<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/03/19/content/js/%E5%BD%92%E7%BA%B3/"/>
    <url>/2025/03/19/content/js/%E5%BD%92%E7%BA%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="归纳"><a href="#归纳" class="headerlink" title="归纳"></a>归纳</h1><h2 id="three-js"><a href="#three-js" class="headerlink" title="three.js"></a>three.js</h2><p>基本概念：<a href="https://blog.csdn.net/qq_52395343/article/details/133772669">https://blog.csdn.net/qq_52395343/article/details/133772669</a></p><h3 id="webgl初步使用"><a href="#webgl初步使用" class="headerlink" title="webgl初步使用"></a>webgl初步使用</h3><p>参考资料：<a href="http://www.webgl3d.cn/pages/f66004/#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAcanvas%E7%94%BB%E5%B8%83">webgl入门介绍</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>使用WebGL绘制一个点<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;webgl&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: #000;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;webgl&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> gl = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;webgl&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//顶点着色器源码</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> vertexShaderSource = <span class="hljs-string">`</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">      void main()&#123;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">          gl_PointSize = 10.0;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">          gl_Position = vec4(0.5,0.0,0.0,1.0);</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">      `</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//片元着色器源码</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> fragShaderSource = <span class="hljs-string">`</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">      void main()&#123;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">          // 红色</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">          gl_FragColor = vec4(1.0,0.0,1.0,1.0);</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">      &#125;    </span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">      `</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//初始化着色器</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> program = <span class="hljs-title function_">initShader</span>(gl, vertexShaderSource, fragShaderSource);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//开始绘制，显示器显示结果</span></span></span><br><span class="language-javascript"><span class="language-xml">    gl.<span class="hljs-title function_">drawArrays</span>(gl.<span class="hljs-property">POINTS</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//声明初始化着色器函数</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">initShader</span>(<span class="hljs-params">gl, vertexShaderSource, fragmentShaderSource</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//创建顶点着色器对象</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> vertexShader = gl.<span class="hljs-title function_">createShader</span>(gl.<span class="hljs-property">VERTEX_SHADER</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//创建片元着色器对象</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> fragmentShader = gl.<span class="hljs-title function_">createShader</span>(gl.<span class="hljs-property">FRAGMENT_SHADER</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//引入顶点、片元着色器源代码</span></span></span><br><span class="language-javascript"><span class="language-xml">      gl.<span class="hljs-title function_">shaderSource</span>(vertexShader, vertexShaderSource);</span></span><br><span class="language-javascript"><span class="language-xml">      gl.<span class="hljs-title function_">shaderSource</span>(fragmentShader, fragmentShaderSource);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//编译顶点、片元着色器</span></span></span><br><span class="language-javascript"><span class="language-xml">      gl.<span class="hljs-title function_">compileShader</span>(vertexShader);</span></span><br><span class="language-javascript"><span class="language-xml">      gl.<span class="hljs-title function_">compileShader</span>(fragmentShader);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//创建程序对象program</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> program = gl.<span class="hljs-title function_">createProgram</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//附着顶点着色器和片元着色器到program</span></span></span><br><span class="language-javascript"><span class="language-xml">      gl.<span class="hljs-title function_">attachShader</span>(program, vertexShader);</span></span><br><span class="language-javascript"><span class="language-xml">      gl.<span class="hljs-title function_">attachShader</span>(program, fragmentShader);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//链接program</span></span></span><br><span class="language-javascript"><span class="language-xml">      gl.<span class="hljs-title function_">linkProgram</span>(program);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//使用program</span></span></span><br><span class="language-javascript"><span class="language-xml">      gl.<span class="hljs-title function_">useProgram</span>(program);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//返回程序program对象</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> program;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="3D几何变换数学基础"><a href="#3D几何变换数学基础" class="headerlink" title="3D几何变换数学基础"></a>3D几何变换数学基础</h3><h4 id="平移、旋转、缩放矩阵"><a href="#平移、旋转、缩放矩阵" class="headerlink" title="平移、旋转、缩放矩阵"></a>平移、旋转、缩放矩阵</h4><h2 id="前端适配"><a href="#前端适配" class="headerlink" title="前端适配"></a>前端适配</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>前端屏幕适配的两种方案</p><p>：<a href="https://blog.csdn.net/qq_29101285/article/details/138308570">https://blog.csdn.net/qq_29101285/article/details/138308570</a></p><p>推荐使用rem插件</p><h3 id="一-rem适配"><a href="#一-rem适配" class="headerlink" title="一.rem适配"></a>一.rem适配</h3><h4 id="1-直接使用rem，项目使用rem"><a href="#1-直接使用rem，项目使用rem" class="headerlink" title="1.直接使用rem，项目使用rem"></a>1.直接使用rem，项目使用rem</h4><h4 id="2-rem-自适应插件"><a href="#2-rem-自适应插件" class="headerlink" title="2.rem 自适应插件"></a>2.rem 自适应插件</h4><p>vite+vue3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-number">1.</span>介绍<br>postcss-pxtorem是<span class="hljs-title class_">PostCSS</span>的插件，用于将像素单元生成rem单位。<br><br>前端开发还原设计稿的重要性毋庸置疑，目前应用的单位最多还是rem,然而每次在制作过程中需要自己计算rem值，为了能够直接按照设计图的尺寸开发，并且能自动编译转换成rem，下面就来分享下postcss-pxtorem的使用。<br><br>介绍amfe-flexible<br>amfe-flexible是配置可伸缩布局方案，主要是将1rem设为viewWidth/<span class="hljs-number">10</span>。<br><br>autoprefixer介绍<br><br><span class="hljs-title class_">Autoprefixer</span>是一款自动管理浏览器前缀的插件，可以解析css文件并且添加前缀到css内容里，使用<span class="hljs-title class_">Can</span> I <span class="hljs-title class_">Use</span>(caniuse网站)的数据决定哪些前缀是需要的。该插件css解析器采用postcss，使用<span class="hljs-title class_">Browserslist</span>库，可以对浏览器的版本做精确设置。<br><br>安装<br><br>npm i postcss-pxtorem autoprefixer amfe-flexible --save-dev<br><br><span class="hljs-number">2.</span>进行配置使用<br>首先在main.<span class="hljs-property">ts</span>中引入<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;amfe-flexible&#x27;</span><br><br>在vite.<span class="hljs-property">config</span>.<span class="hljs-property">ts</span>中配置<br><br><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><span class="hljs-keyword">import</span> autoprefixer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;autoprefixer&#x27;</span>;<br><span class="hljs-keyword">import</span> postCssPxToRem <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;postcss-pxtorem&#x27;</span>;<br> <br> <br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()],<br>  <span class="hljs-attr">css</span>: &#123;<br>    <span class="hljs-attr">postcss</span>: &#123;<br>      <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-title function_">autoprefixer</span>(&#123;<br>          <span class="hljs-attr">overrideBrowserslist</span>: [<span class="hljs-string">&#x27;Android 4.1&#x27;</span>, <span class="hljs-string">&#x27;iOS 7.1&#x27;</span>, <span class="hljs-string">&#x27;Chrome &gt; 31&#x27;</span>, <span class="hljs-string">&#x27;ff &gt; 31&#x27;</span>, <span class="hljs-string">&#x27;ie &gt;= 8&#x27;</span>, <span class="hljs-string">&quot;last 10 versions&quot;</span>, <span class="hljs-comment">// 所有主流浏览器最近10版本用</span><br>          ],<br>          <span class="hljs-attr">grid</span>: <span class="hljs-literal">true</span><br>        &#125;),<br>        <span class="hljs-title function_">postCssPxToRem</span>(&#123;<br>          <span class="hljs-comment">// 自适应，px&gt;rem转换</span><br>         <span class="hljs-attr">rootValue</span>: <span class="hljs-number">192</span>, <span class="hljs-comment">// 设计稿宽度的1/ 10 例如设计稿按照 1920设计 此处就为192</span><br>   <span class="hljs-attr">propList</span>: [<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;!border&quot;</span>], <span class="hljs-comment">// 除 border 外所有px 转 rem</span><br>   <span class="hljs-attr">selectorBlackList</span>: [<span class="hljs-string">&quot;.el-&quot;</span>], <span class="hljs-comment">// 过滤掉.el-开头的class，不进行rem转换</span><br>        &#125;),<br>      ],<br>    &#125;,<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="3-rem-js"><a href="#3-rem-js" class="headerlink" title="3.rem.js"></a>3.rem.js</h4><p>参考：<a href="https://blog.csdn.net/Jenny_ljj/article/details/115690777">https://blog.csdn.net/Jenny_ljj/article/details/115690777</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span>;<br><span class="hljs-keyword">import</span> postcssPxtorem <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;postcss-pxtorem&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>    <span class="hljs-attr">css</span>: &#123;<br>        <span class="hljs-attr">postcss</span>: &#123;<br>            <span class="hljs-attr">plugins</span>: [<br>                <span class="hljs-title function_">postcssPxtorem</span>(&#123;<br>                    <span class="hljs-attr">rootValue</span>: <span class="hljs-number">16</span>, <span class="hljs-comment">// 1rem 的基准值，通常设置为 16，和浏览器默认值一致</span><br>                    <span class="hljs-attr">propList</span>: [<span class="hljs-string">&#x27;*&#x27;</span>], <span class="hljs-comment">// 要转换的 CSS 属性列表，* 表示所有属性</span><br>                    <span class="hljs-attr">selectorBlackList</span>: [], <span class="hljs-comment">// 不进行转换的选择器列表</span><br>                    <span class="hljs-attr">minPixelValue</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 小于该值的像素不转换</span><br>                    <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/i</span> <span class="hljs-comment">// 排除 node_modules 目录</span><br>                &#125;)<br>            ]<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">resolve</span>: &#123;<br>        <span class="hljs-attr">alias</span>: &#123;<br>            <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-string">&#x27;/src&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// rem等比适配配置文件</span><br><span class="hljs-comment">// 基准大小</span><br><span class="hljs-keyword">const</span> baseSize = <span class="hljs-number">16</span>;<br><span class="hljs-comment">// 设置 rem 函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setRem</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 当前页面宽度相对于 1920宽的缩放比例，可根据自己需要修改。</span><br>  <span class="hljs-keyword">const</span> scale = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span> / <span class="hljs-number">1920</span>;<br>  <span class="hljs-comment">// 设置页面根节点字体大小（“Math.min(scale, 2)” 指最高放大比例为2，可根据实际业务需求调整）</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> =<br>    baseSize * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(scale, <span class="hljs-number">2</span>) + <span class="hljs-string">&quot;px&quot;</span>;<br>&#125;<br><span class="hljs-comment">// 初始化</span><br><span class="hljs-title function_">setRem</span>();<br><span class="hljs-comment">// 改变窗口大小时重新设置 rem</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">setRem</span>();<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二-scale适配"><a href="#二-scale适配" class="headerlink" title="二.scale适配"></a>二.scale适配</h3><h4 id="1-一种vue3大屏自适应组件-VScaleScreen"><a href="#1-一种vue3大屏自适应组件-VScaleScreen" class="headerlink" title="1.一种vue3大屏自适应组件 VScaleScreen"></a>1.一种vue3大屏自适应组件 VScaleScreen</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, delay</span>) &#123;<br>  <span class="hljs-keyword">let</span> timer<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-keyword">if</span> (timer) <span class="hljs-built_in">clearTimeout</span>(timer)<br>    timer = <span class="hljs-built_in">setTimeout</span>(<br>      <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">typeof</span> fn === <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; fn.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, args)<br>        <span class="hljs-built_in">clearTimeout</span>(timer)<br>      &#125;,<br>      delay &gt; <span class="hljs-number">0</span> ? delay : <span class="hljs-number">100</span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">VScaleScreen</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;VScaleScreen&#x27;</span>,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">width</span>: &#123;<br>      <span class="hljs-attr">type</span>: [<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Number</span>],<br>      <span class="hljs-attr">default</span>: <span class="hljs-number">1920</span><br>    &#125;,<br>    <span class="hljs-attr">height</span>: &#123;<br>      <span class="hljs-attr">type</span>: [<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Number</span>],<br>      <span class="hljs-attr">default</span>: <span class="hljs-number">1080</span><br>    &#125;,<br>    <span class="hljs-attr">fullScreen</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Boolean</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-literal">false</span><br>    &#125;,<br>    <span class="hljs-attr">autoScale</span>: &#123;<br>      <span class="hljs-attr">type</span>: [<span class="hljs-title class_">Object</span>, <span class="hljs-title class_">Boolean</span>],<br>      <span class="hljs-attr">default</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-attr">delay</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-number">500</span><br>    &#125;,<br>    <span class="hljs-attr">boxStyle</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> (&#123;&#125;)<br>    &#125;,<br>    <span class="hljs-attr">wrapperStyle</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> (&#123;&#125;)<br>    &#125;,<br>    <span class="hljs-attr">bodyOverflowHidden</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Boolean</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params">props, &#123; slots &#125;</span>) &#123;<br>    <span class="hljs-keyword">let</span> bodyOverflowHidden<br>    <span class="hljs-keyword">const</span> state = &#123;<br>      <span class="hljs-attr">width</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">height</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">originalWidth</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">originalHeight</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">observer</span>: <span class="hljs-literal">null</span><br>    &#125;<br><br>    <span class="hljs-keyword">const</span> styles = &#123;<br>      <span class="hljs-attr">box</span>: &#123;<br>        <span class="hljs-attr">overflow</span>: <span class="hljs-string">&#x27;hidden&#x27;</span>,<br>        <span class="hljs-attr">backgroundSize</span>: <span class="hljs-string">&#x27;100% 100%&#x27;</span>,<br>        <span class="hljs-attr">background</span>: <span class="hljs-string">&#x27;#000&#x27;</span>,<br>        <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;100vw&#x27;</span>,<br>        <span class="hljs-attr">height</span>: <span class="hljs-string">&#x27;100vh&#x27;</span><br>      &#125;,<br>      <span class="hljs-attr">wrapper</span>: &#123;<br>        <span class="hljs-attr">transitionProperty</span>: <span class="hljs-string">&#x27;all&#x27;</span>,<br>        <span class="hljs-attr">transitionTimingFunction</span>: <span class="hljs-string">&#x27;cubic-bezier(0.4, 0, 0.2, 1)&#x27;</span>,<br>        <span class="hljs-attr">transitionDuration</span>: <span class="hljs-string">&#x27;500ms&#x27;</span>,<br>        <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;relative&#x27;</span>,<br>        <span class="hljs-attr">overflow</span>: <span class="hljs-string">&#x27;hidden&#x27;</span>,<br>        <span class="hljs-attr">zIndex</span>: <span class="hljs-number">100</span>,<br>        <span class="hljs-attr">transformOrigin</span>: <span class="hljs-string">&#x27;left top&#x27;</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> el = &#123;<br>      <span class="hljs-attr">value</span>: <span class="hljs-literal">null</span><br>    &#125;<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">initSize</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        <span class="hljs-title function_">nextTick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (props.<span class="hljs-property">width</span> &amp;&amp; props.<span class="hljs-property">height</span>) &#123;<br>            state.<span class="hljs-property">width</span> = props.<span class="hljs-property">width</span><br>            state.<span class="hljs-property">height</span> = props.<span class="hljs-property">height</span><br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            state.<span class="hljs-property">width</span> = el.<span class="hljs-property">value</span>.<span class="hljs-property">clientWidth</span><br>            state.<span class="hljs-property">height</span> = el.<span class="hljs-property">value</span>.<span class="hljs-property">clientHeight</span><br>          &#125;<br><br>          <span class="hljs-keyword">if</span> (!state.<span class="hljs-property">originalHeight</span> || !state.<span class="hljs-property">originalWidth</span>) &#123;<br>            state.<span class="hljs-property">originalWidth</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">width</span><br>            state.<span class="hljs-property">originalHeight</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">height</span><br>          &#125;<br>          <span class="hljs-title function_">resolve</span>()<br>        &#125;)<br>      &#125;)<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">initBodyStyle</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (props.<span class="hljs-property">bodyOverflowHidden</span>) &#123;<br>        bodyOverflowHidden = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">overflow</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">overflow</span> = <span class="hljs-string">&#x27;hidden&#x27;</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">updateSize</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>      <span class="hljs-keyword">if</span> (state.<span class="hljs-property">width</span> &amp;&amp; state.<span class="hljs-property">height</span>) &#123;<br>        el.<span class="hljs-property">value</span>.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;state.width&#125;</span>px`</span><br>        el.<span class="hljs-property">value</span>.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;state.height&#125;</span>px`</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        el.<span class="hljs-property">value</span>.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;state.originalWidth&#125;</span>px`</span><br>        el.<span class="hljs-property">value</span>.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;state.originalHeight&#125;</span>px`</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">autoScale</span> = scale =&gt; &#123;<br>      <span class="hljs-keyword">if</span> (!props.<span class="hljs-property">autoScale</span>) <span class="hljs-keyword">return</span><br>      <span class="hljs-keyword">const</span> domWidth = el.<span class="hljs-property">value</span>.<span class="hljs-property">clientWidth</span><br>      <span class="hljs-keyword">const</span> domHeight = el.<span class="hljs-property">value</span>.<span class="hljs-property">clientHeight</span><br>      <span class="hljs-keyword">const</span> currentWidth = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientWidth</span><br>      <span class="hljs-keyword">const</span> currentHeight = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span><br>      el.<span class="hljs-property">value</span>.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">`scale(<span class="hljs-subst">$&#123;scale&#125;</span>,<span class="hljs-subst">$&#123;scale&#125;</span>)`</span><br>      <span class="hljs-keyword">let</span> mx = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>((currentWidth - domWidth * scale) / <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)<br>      <span class="hljs-keyword">let</span> my = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>((currentHeight - domHeight * scale) / <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> props.<span class="hljs-property">autoScale</span> === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>        !props.<span class="hljs-property">autoScale</span>.<span class="hljs-property">x</span> &amp;&amp; (mx = <span class="hljs-number">0</span>)<br>        !props.<span class="hljs-property">autoScale</span>.<span class="hljs-property">y</span> &amp;&amp; (my = <span class="hljs-number">0</span>)<br>      &#125;<br>      el.<span class="hljs-property">value</span>.<span class="hljs-property">style</span>.<span class="hljs-property">margin</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;my&#125;</span>px <span class="hljs-subst">$&#123;mx&#125;</span>px`</span><br>    &#125;<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">updateScale</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>      <span class="hljs-keyword">const</span> currentWidth = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientWidth</span><br>      <span class="hljs-keyword">const</span> currentHeight = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span><br>      <span class="hljs-keyword">const</span> realWidth = state.<span class="hljs-property">width</span> || state.<span class="hljs-property">originalWidth</span><br>      <span class="hljs-keyword">const</span> realHeight = state.<span class="hljs-property">height</span> || state.<span class="hljs-property">originalHeight</span><br>      <span class="hljs-keyword">const</span> widthScale = currentWidth / +realWidth<br>      <span class="hljs-keyword">const</span> heightScale = currentHeight / +realHeight<br>      <span class="hljs-keyword">if</span> (props.<span class="hljs-property">fullScreen</span>) &#123;<br>        el.<span class="hljs-property">value</span>.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">`scale(<span class="hljs-subst">$&#123;widthScale&#125;</span>,<span class="hljs-subst">$&#123;heightScale&#125;</span>)`</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>      &#125;<br>      <span class="hljs-keyword">const</span> scale = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(widthScale, heightScale)<br>      <span class="hljs-title function_">autoScale</span>(scale)<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> onResize = <span class="hljs-title function_">debounce</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">initSize</span>()<br>      <span class="hljs-title function_">updateSize</span>()<br>      <span class="hljs-title function_">updateScale</span>()<br>    &#125;, props.<span class="hljs-property">delay</span>)<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">initMutationObserver</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>      <span class="hljs-keyword">const</span> observer = (state.<span class="hljs-property">observer</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutationObserver</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">onResize</span>()<br>      &#125;))<br>      observer.<span class="hljs-title function_">observe</span>(el.<span class="hljs-property">value</span>, &#123;<br>        <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">attributeFilter</span>: [<span class="hljs-string">&#x27;style&#x27;</span>],<br>        <span class="hljs-attr">attributeOldValue</span>: <span class="hljs-literal">true</span><br>      &#125;)<br>    &#125;<br><br>    <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">initBodyStyle</span>()<br>      <span class="hljs-title function_">nextTick</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">initSize</span>()<br>        <span class="hljs-title function_">updateSize</span>()<br>        <span class="hljs-title function_">updateScale</span>()<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, onResize)<br>        <span class="hljs-title function_">initMutationObserver</span>()<br>      &#125;)<br>    &#125;)<br><br>    <span class="hljs-title function_">onUnmounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, onResize)<br>      state.<span class="hljs-property">observer</span>?.<span class="hljs-title function_">disconnect</span>()<br>      <span class="hljs-keyword">if</span> (props.<span class="hljs-property">bodyOverflowHidden</span>) &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">overflow</span> = bodyOverflowHidden<br>      &#125;<br>    &#125;)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(<br>        <span class="hljs-string">&#x27;div&#x27;</span>,<br>        &#123;<br>          <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;v-screen-box&#x27;</span>,<br>          <span class="hljs-attr">style</span>: &#123; ...styles.<span class="hljs-property">box</span>, ...props.<span class="hljs-property">boxStyle</span> &#125;<br>        &#125;,<br>        [<br>          <span class="hljs-title function_">h</span>(<br>            <span class="hljs-string">&#x27;div&#x27;</span>,<br>            &#123;<br>              <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;screen-wrapper&#x27;</span>,<br>              <span class="hljs-attr">style</span>: &#123; ...styles.<span class="hljs-property">wrapper</span>, ...props.<span class="hljs-property">wrapperStyle</span> &#125;,<br>              <span class="hljs-attr">ref</span>: el<br>            &#125;,<br>            slots.<span class="hljs-property">default</span>?.()<br>          )<br>        ]<br>      )<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-手写一个scale缩放"><a href="#2-手写一个scale缩放" class="headerlink" title="2.手写一个scale缩放"></a>2.手写一个scale缩放</h4><p>会有白边</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// src/utiles/useResize.ts</span><br><span class="hljs-keyword">import</span> &#123; ref, onMounted, onBeforeUnmount &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-comment">// 默认适配宽高</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> width = <span class="hljs-number">1920</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> height = <span class="hljs-number">1080</span><br><br>type <span class="hljs-title class_">ResizeType</span> = &#123;<br>        w?: number<br>        h?: number<br>        fullScreen?: boolean<br>        delay?: number<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">callback, delay</span>) &#123;<br>        <span class="hljs-keyword">let</span> timerId<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>                <span class="hljs-comment">// 如果上次事件还没有真正处理, 清除</span><br>                <span class="hljs-keyword">if</span> (timerId) &#123;<br>                        <span class="hljs-built_in">clearTimeout</span>(timerId)<br>                &#125;<br><br>                <span class="hljs-comment">// 发事件发生指定事件后才调用处理事件的回调函数</span><br>                <span class="hljs-comment">// 启动定时器, 只是准备真正处理</span><br>                timerId = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                        <span class="hljs-comment">// 正在处理事件</span><br>                        callback.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, event)<br>                        <span class="hljs-comment">// 删除准备处理的标记</span><br>                        timerId = <span class="hljs-literal">null</span><br>                &#125;, delay)<br>        &#125;<br>&#125;<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useResize</span> = (<span class="hljs-params">options: ResizeType = &#123;&#125;</span>) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> &#123;<br>                w = width,<br>                h = height,<br>                fullScreen = <span class="hljs-literal">false</span>,<br>                delay = <span class="hljs-number">100</span><br>        &#125; = options<br>        <span class="hljs-comment">// 缩放元素</span><br>        <span class="hljs-keyword">const</span> screenRef = <span class="hljs-title function_">ref</span>()<br>  <span class="hljs-keyword">const</span> scale = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">resize</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 浏览器宽高</span><br>    <span class="hljs-keyword">const</span> clientWidth = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientWidth</span><br>    <span class="hljs-keyword">const</span> clientHeight = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span><br><br>    <span class="hljs-comment">// 计算宽高缩放比例</span><br>                <span class="hljs-keyword">const</span> scaleW = clientWidth / w<br>                <span class="hljs-keyword">const</span> scaleH = clientHeight / h<br><br>    <span class="hljs-keyword">if</span> (clientWidth / clientHeight &gt; w / h) &#123;<br>                        <span class="hljs-comment">// 如果浏览器的宽高比大于设计稿的宽高比，就取浏览器高度和设计稿高度之比</span><br>      scale.<span class="hljs-property">value</span> = scaleH<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// 如果浏览器的宽高比小于设计稿的宽高比，就取浏览器宽度和设计稿宽度之比</span><br>      scale.<span class="hljs-property">value</span> = scaleW<br>    &#125;<br><br>                <span class="hljs-keyword">if</span> (fullScreen) &#123;<br>                        <span class="hljs-comment">// 如果不在乎缩放失真的情况，可以设置全屏</span><br>                        screenRef.<span class="hljs-property">value</span>.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">`scale(<span class="hljs-subst">$&#123;scaleW&#125;</span>, <span class="hljs-subst">$&#123;scaleH&#125;</span>)`</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// 否则选择适配比例缩放</span><br>                        screenRef.<span class="hljs-property">value</span>.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">&#x27;scale(&#x27;</span> + scale.<span class="hljs-property">value</span> + <span class="hljs-string">&#x27;)&#x27;</span><br>                &#125;<br>  &#125;<br><br>        <span class="hljs-keyword">const</span> resizeDelay = <span class="hljs-title function_">debounce</span>(resize, delay)<br>  <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (screenRef.<span class="hljs-property">value</span>) &#123;<br>                        <span class="hljs-title function_">resize</span>()<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, resizeDelay)<br>                &#125;<br>  &#125;)<br><br>  <span class="hljs-title function_">onBeforeUnmount</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, resizeDelay)<br>  &#125;)<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    scale,<br>                screenRef<br>  &#125;<br>&#125;<br>&lt;template&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;screenRef&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useResize &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/useResize&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> &#123; screenRef &#125; = <span class="hljs-title function_">useResize</span>()</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="3-scale函数2"><a href="#3-scale函数2" class="headerlink" title="3.scale函数2"></a>3.scale函数2</h4><p>下面是一个初始版本自适应函数，方法比较简单，更利于理解</p><p>参考：<a href="https://juejin.cn/post/7224015103481118757">https://juejin.cn/post/7224015103481118757</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">keepFit</span>(<span class="hljs-params">designWidth, designHeight, renderDom</span>) &#123;<br>      <span class="hljs-keyword">let</span> clientHeight = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span>;<br>      <span class="hljs-keyword">let</span> clientWidth = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span>;<br>      <span class="hljs-keyword">let</span> scale = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">if</span> (clientWidth / clientHeight &lt; designWidth / designHeight) &#123;<br>        scale = (clientWidth / designWidth)<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(renderDom).<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;clientHeight / scale&#125;</span>px`</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        scale = (clientHeight / designHeight)<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(renderDom).<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;clientWidth / scale&#125;</span>px`</span>;<br>      &#125;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(renderDom).<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">`scale(<span class="hljs-subst">$&#123;scale&#125;</span>)`</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="三-autofit-js"><a href="#三-autofit-js" class="headerlink" title="三.autofit.js"></a>三.autofit.js</h3><p>在线链接：<a href="https://larryzhu-dev.github.io/autoLarryPages/autofit.js/">https://larryzhu-dev.github.io/autoLarryPages/autofit.js/</a></p><h2 id="vue3动态路由匹配"><a href="#vue3动态路由匹配" class="headerlink" title="vue3动态路由匹配"></a>vue3动态路由匹配</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Layout</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/layout/index.vue&#x27;</span><br><span class="hljs-keyword">const</span> viewsComponent = <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-title function_">glob</span>(<span class="hljs-string">&#x27;/src/components/**/*.vue&#x27;</span>)<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span> 递归数据，并对组件进行处理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; data 后台返回的接口数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">recursion</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!data || data.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> []<br>  &#125;<br><br>  data.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 处理meta属性</span><br>    <span class="hljs-keyword">let</span> meta = &#123;<br>      <span class="hljs-attr">noCache</span>: item.<span class="hljs-property">meta</span>.<span class="hljs-property">noCache</span>,<br>      <span class="hljs-attr">title</span>: item.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (item.<span class="hljs-property">children</span>) &#123;<br>      meta.<span class="hljs-property">icon</span> = <span class="hljs-string">&#x27;DocumentCopy&#x27;</span><br>    &#125;<br>    item.<span class="hljs-property">meta</span> = meta<br><br>    <span class="hljs-comment">// 匹配component，对组件做处理</span><br>    <span class="hljs-keyword">if</span> (item.<span class="hljs-property">component</span> === <span class="hljs-string">&#x27;Layout&#x27;</span>) &#123;<br>      item.<span class="hljs-property">component</span> = <span class="hljs-title class_">Layout</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> path <span class="hljs-keyword">in</span> viewsComponent) &#123;<br>        <span class="hljs-keyword">const</span> dir = <span class="hljs-string">&#x27;/&#x27;</span> + path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;components/&#x27;</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.vue&#x27;</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> (dir === item.<span class="hljs-property">component</span>) &#123;<br>          item.<span class="hljs-property">component</span> = viewsComponent[path]<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(viewsComponent, path)<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (item.<span class="hljs-property">children</span> &amp;&amp; item.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-title function_">recursion</span>(item.<span class="hljs-property">children</span>)<br>    &#125;<br>  &#125;)<br><br>  <span class="hljs-keyword">return</span> data<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vue2和vue3-组件通信的几种方式"><a href="#vue2和vue3-组件通信的几种方式" class="headerlink" title="vue2和vue3 组件通信的几种方式"></a>vue2和vue3 组件通信的几种方式</h2><p><a href="https://juejin.cn/post/6999687348120190983#heading-8">https://juejin.cn/post/6999687348120190983#heading-8</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// Vue3 中没有了 EventBus 跨组件通信，但是现在有了一个替代的方案 mitt.js，原理还是 EventBus</span><br><span class="hljs-comment">// 先安装 npm i mitt -S</span><br><span class="hljs-comment">// 然后像以前封装 bus 一样，封装一下</span><br><span class="hljs-comment">// mitt.js</span><br><span class="hljs-keyword">import</span> mitts <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mitt&#x27;</span><br><span class="hljs-keyword">const</span> mitt = <span class="hljs-title function_">mitts</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> mitt<br><span class="hljs-comment">// 复制代码</span><br><span class="hljs-comment">// 然后两个组件之间通信的使用</span><br><span class="hljs-comment">// 组件 A</span><br>&lt;script setup&gt;<br><span class="hljs-keyword">import</span> mitt <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mitt&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    mitt.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;handleChange&#x27;</span>)<br>&#125;<br>&lt;/script&gt;<br><br><span class="hljs-comment">// 组件 B </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"><span class="hljs-keyword">import</span> mitt <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mitt&#x27;</span><span class="hljs-keyword">import</span> &#123; onUnmounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><span class="hljs-keyword">const</span> <span class="hljs-title function_">someMethed</span> = (<span class="hljs-params"></span>) =&gt; &#123; ... &#125;</span></span><br><span class="language-javascript"><span class="language-xml">mitt.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;handleChange&#x27;</span>,someMethed)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onUnmounted</span>(<span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    mitt.<span class="hljs-title function_">off</span>(<span class="hljs-string">&#x27;handleChange&#x27;</span>,someMethed)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>。<br></code></pre></td></tr></table></figure><h2 id="vue3-vuex-persistedstate"><a href="#vue3-vuex-persistedstate" class="headerlink" title="vue3  vuex-persistedstate"></a>vue3  vuex-persistedstate</h2><p><a href="https://blog.csdn.net/weixin_57649833/article/details/120881688">https://blog.csdn.net/weixin_57649833/article/details/120881688</a></p><p><a href="https://juejin.cn/post/7091966627339567112">https://juejin.cn/post/7091966627339567112</a></p><h2 id="解决Vue3中使用setup如何定义组件的name属性"><a href="#解决Vue3中使用setup如何定义组件的name属性" class="headerlink" title="解决Vue3中使用setup如何定义组件的name属性"></a>解决Vue3中使用setup如何定义组件的name属性</h2><p><a href="https://blog.csdn.net/zy21131437/article/details/124523320">https://blog.csdn.net/zy21131437/article/details/124523320</a></p><h2 id="vue3一键换肤主题参考"><a href="#vue3一键换肤主题参考" class="headerlink" title="vue3一键换肤主题参考"></a>vue3一键换肤主题参考</h2><p><a href="https://juejin.cn/post/6844904016892133383">https://juejin.cn/post/6844904016892133383</a></p><p><a href="https://juejin.cn/post/6966173655470440456">https://juejin.cn/post/6966173655470440456</a></p><p><a href="https://gitee.com/cmdparkour/vue-admin-box">https://gitee.com/cmdparkour/vue-admin-box</a></p><p><a href="https://vvbin.cn/next/#/frame/doc">https://vvbin.cn/next/#/frame/doc</a></p><p><a href="http://huaxhe.gitee.io/vue3_study_docs/chapter1/03_HelloWorld.html#%E7%BC%96%E5%86%99-ts-%E7%A8%8B%E5%BA%8F">http://huaxhe.gitee.io/vue3_study_docs/chapter1/03_HelloWorld.html#%E7%BC%96%E5%86%99-ts-%E7%A8%8B%E5%BA%8F</a></p><p>使用变量 <a href="https://www.zhangshengrong.com/p/4yNqjd25XA/">https://www.zhangshengrong.com/p/4yNqjd25XA/</a></p><h2 id="Vue3项目中配置TypeScript和JavaScript的兼容-https-www-jb51-net-javascript-295012d3b-htm"><a href="#Vue3项目中配置TypeScript和JavaScript的兼容-https-www-jb51-net-javascript-295012d3b-htm" class="headerlink" title="Vue3项目中配置TypeScript和JavaScript的兼容: https://www.jb51.net/javascript/295012d3b.htm"></a>Vue3项目中配置TypeScript和JavaScript的兼容: <a href="https://www.jb51.net/javascript/295012d3b.htm">https://www.jb51.net/javascript/295012d3b.htm</a></h2><h2 id="vue3中，h和element-plus组件库的使用"><a href="#vue3中，h和element-plus组件库的使用" class="headerlink" title="vue3中，h和element-plus组件库的使用"></a>vue3中，h和element-plus组件库的使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 虚拟表格的column示例</span><br><br><span class="hljs-keyword">const</span> columns = [<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;name&#x27;</span>,<br>    <span class="hljs-attr">dataKey</span>: <span class="hljs-string">&#x27;name&#x27;</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;名称&#x27;</span>,<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">200</span> <span class="hljs-comment">// 必须设置数字类型宽度 </span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;color&#x27;</span>,<br>    <span class="hljs-attr">dataKey</span>: <span class="hljs-string">&#x27;color&#x27;</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;颜色选择&#x27;</span>,<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">150</span>,<br>    <span class="hljs-attr">cellRenderer</span>: <span class="hljs-function">(<span class="hljs-params">&#123; rowData &#125;</span>) =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">ElColorPicker</span>, &#123;<br>      <span class="hljs-attr">modelValue</span>: rowData.<span class="hljs-property">color</span>, <br>      <span class="hljs-string">&quot;onUpdate:modelValue&quot;</span>: <span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> &#123;<br>        rowData.<span class="hljs-property">color</span>  = val <span class="hljs-comment">// 直接修改响应式数据 </span><br>      &#125;,<br>      <span class="hljs-attr">showAlpha</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 启用透明度选择 </span><br>    &#125;)<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><h2 id="el-upload中on-change在上传多个文件多次调用解决方法"><a href="#el-upload中on-change在上传多个文件多次调用解决方法" class="headerlink" title="el-upload中on-change在上传多个文件多次调用解决方法"></a>el-upload中on-change在上传多个文件多次调用解决方法</h2><p><a href="https://blog.csdn.net/dafadafahao/article/details/109512882el">https://blog.csdn.net/dafadafahao/article/details/109512882el</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br></code></pre></td></tr></table></figure><h2 id="vite相关"><a href="#vite相关" class="headerlink" title="vite相关"></a>vite相关</h2><h3 id="1-如何自定义vite插件"><a href="#1-如何自定义vite插件" class="headerlink" title="1.如何自定义vite插件"></a>1.如何自定义vite插件</h3><p>可查看：<a href="https://vitejs.cn/vite5-cn/guide/api-plugin.html#transforming-custom-file-types">https://vitejs.cn/vite5-cn/guide/api-plugin.html#transforming-custom-file-types</a></p><p>下面是去一个构建后去除console.log的插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">build</span>: &#123;<br>    <span class="hljs-attr">rollupOptions</span>: &#123;<br>      <span class="hljs-attr">plugins</span>: [<br>        &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;remove - console&#x27;</span>,<br>          <span class="hljs-title function_">transform</span>(<span class="hljs-params">code</span>) &#123;<br>            <span class="hljs-keyword">return</span> code.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/console.log\(.*\);?/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="iframe发送和接收消息"><a href="#iframe发送和接收消息" class="headerlink" title="iframe发送和接收消息"></a>iframe发送和接收消息</h2><p>vue组件嵌入iframe与其他系统页面跨域通信参考地址：<a href="https://blog.csdn.net/weixin_42520314/article/details/96146855">https://blog.csdn.net/weixin_42520314/article/details/96146855</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// iframe发送消息</span><br>    <span class="hljs-attr">sendIframe</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> ifarmeDom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;iframeBOX&#x27;</span>);<br>        ifarmeDom.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> json = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>                <span class="hljs-attr">token</span>: <span class="hljs-string">&#x27;1&#x27;</span><br>            &#125;);<br>            ifarmeDom.<span class="hljs-property">contentWindow</span>.<span class="hljs-title function_">postMessage</span>(json, <span class="hljs-string">&#x27;*&#x27;</span>);<br>        &#125;;<br>    &#125;,<br>    <span class="hljs-comment">// 接收iframe的消息</span><br>    <span class="hljs-attr">receiveMessage</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (event &amp;&amp; event.<span class="hljs-property">data</span> &amp;&amp; <span class="hljs-keyword">typeof</span> event.<span class="hljs-property">data</span> === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>                <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(event.<span class="hljs-property">data</span>);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-property">token</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="localStorage支持过期时间设置"><a href="#localStorage支持过期时间设置" class="headerlink" title="localStorage支持过期时间设置"></a>localStorage支持过期时间设置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> store = &#123;<br>  <span class="hljs-comment">// 存储过期时间映射</span><br>  <span class="hljs-attr">setExpireMap</span>: <span class="hljs-function">(<span class="hljs-params">key, expire</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> expireMap = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;EXPIRE_MAP&#x27;</span>) || <span class="hljs-string">&quot;&#123;&#125;&quot;</span><br>    <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<br>      <span class="hljs-string">&#x27;EXPIRE_MAP&#x27;</span>, <br>      <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>      ...<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(expireMap),<br>      <span class="hljs-attr">key</span>: expire<br>    &#125;))<br>  &#125;,<br>  <span class="hljs-attr">setItem</span>: <span class="hljs-function">(<span class="hljs-params">key, value, expire</span>) =&gt;</span> &#123;<br>    store.<span class="hljs-title function_">setExpireMap</span>(key, expire)<br>    <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(key, value)<br>  &#125;,<br>  <span class="hljs-attr">getItem</span>: <span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 在取值之前先判断是否过期</span><br>    <span class="hljs-keyword">const</span> expireMap = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<br>      <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;EXPIRE_MAP&#x27;</span>) || <span class="hljs-string">&quot;&#123;&#125;&quot;</span><br>    )<br>    <span class="hljs-keyword">if</span>(expireMap[key] &amp;&amp; expireMap[key] &lt; <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(key)<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">removeItem</span>(key)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="axios中responseType配置blob、arraybuffer、stream值有什么差异"><a href="#axios中responseType配置blob、arraybuffer、stream值有什么差异" class="headerlink" title="axios中responseType配置blob、arraybuffer、stream值有什么差异"></a>axios中responseType配置blob、arraybuffer、stream值有什么差异</h2><p><a href="https://juejin.cn/post/7248431224175050807?searchId=20230724144208AF886BB373F8E7ACC93A">https://juejin.cn/post/7248431224175050807?searchId=20230724144208AF886BB373F8E7ACC93A</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">enum <span class="hljs-title class_">XMLHttpRequestResponseType</span> &#123;<br>  <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;arraybuffer&quot;</span>,<br>  <span class="hljs-string">&quot;blob&quot;</span>,<br>  <span class="hljs-string">&quot;document&quot;</span>,<br>  <span class="hljs-string">&quot;json&quot;</span>,<br>  <span class="hljs-string">&quot;text&quot;</span><br>&#125;;<br><br>总结一下差异：<br><span class="hljs-title class_">ArrayBuffer</span>：仅对内存操作，是最基础的二进制对象。所有的数据都放在内存中，当有大量的<span class="hljs-title class_">ArrayBuffer</span>时等于数据全在内存中，就容易导致浏览器标签页因内存超过限制而崩溃。<br><span class="hljs-title class_">Blob</span>：blob的数据存储比较复合，所引用的数据不仅仅在内存中，也可能存在磁盘上。当数据超过一定量时会将数据从内存转存到磁盘中。这也符合blob的名称二进制大数据对象（<span class="hljs-title class_">Binary</span> <span class="hljs-title class_">Large</span> <span class="hljs-title class_">Object</span>），对大文件对象有做专门的优化。<br>综合看来，如果<span class="hljs-title class_">Axios</span>处理文件数据，还是配置blob比较适合。<br></code></pre></td></tr></table></figure><h2 id="file、bolb文件"><a href="#file、bolb文件" class="headerlink" title="file、bolb文件"></a>file、bolb文件</h2><h3 id="二进制数据：ArrayBuffer和blob总结-实战-，以及相互转换方法"><a href="#二进制数据：ArrayBuffer和blob总结-实战-，以及相互转换方法" class="headerlink" title="二进制数据：ArrayBuffer和blob总结(实战)，以及相互转换方法"></a><strong>二进制数据：ArrayBuffer和blob总结(实战)，以及相互转换方法</strong></h3><p><a href="https://blog.csdn.net/qq_38974163/article/details/119862253">二进制数据：ArrayBuffer和blob总结(实战)，以及相互转换方法_arraybuffer blob-CSDN博客</a></p><h3 id="下载bolb文件，无法打开问题"><a href="#下载bolb文件，无法打开问题" class="headerlink" title="下载bolb文件，无法打开问题"></a>下载bolb文件，无法打开问题</h3><p>1.请求时添加·<code>responseType: &quot;blob&quot;</code>，示例如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">downloadTemplate</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">instance</span>(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/api/basic/temp&quot;</span>,<br>    <span class="hljs-attr">responseType</span>: <span class="hljs-string">&quot;blob&quot;</span>,<br>    <span class="hljs-attr">responseEncoding</span>: <span class="hljs-string">&quot;utf8&quot;</span><br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><code>responseType: &quot;blob&quot;</code> 表示响应的数据类型是 Blob 对象，这将使得响应的 <code>data</code> 属性是一个 Blob 对象，其中包含了下载文件的二进制数据。</li><li><code>responseEncoding: &quot;utf8&quot;</code> 表示在解码响应数据时使用 UTF-8 编码。</li></ul><p>2.请求之后的下载方法，仅供参考</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 下载文件的封装函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">File</span>&#125; <span class="hljs-variable">file</span> - 要下载的文件对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">void</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">downloadFile</span>(<span class="hljs-params">file, name = <span class="hljs-string">&#x27;数据&#x27;</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> content = file<br>  <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([content])<br>  <span class="hljs-keyword">const</span> fileName = name<br>  <span class="hljs-keyword">const</span> elink = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">//创建一个a标签通过a标签的点击事件区下载文件</span><br>  elink.<span class="hljs-property">download</span> = fileName<br>  elink.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span><br>  elink.<span class="hljs-property">href</span> = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(blob) <span class="hljs-comment">//使用blob创建一个指向类型数组的URL</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(elink)<br>  elink.<span class="hljs-title function_">click</span>()<br>  <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(elink.<span class="hljs-property">href</span>) <span class="hljs-comment">// 释放URL 对象</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(elink)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="vue3-预览docx文件"><a href="#vue3-预览docx文件" class="headerlink" title="vue3 预览docx文件"></a><strong>vue3 预览docx文件</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>import &#123; renderAsync &#125; from &quot;docx-preview&quot;;<br>// 获取到上传附件的 on-change事件<br>const fileViews = ref()<br>let container = ref(null);<br>// fileViews.value.raw 二进制流文件<br>// container.value dom元素<br>renderAsync(fileViews.value.raw, container.value, null, &#123;<br>   className: &quot;docx&quot;, // 默认和文档样式类的类名/前缀<br>   inWrapper: true, // 启用围绕文档内容渲染包装器<br>   ignoreWidth: false, // 禁止页面渲染宽度<br>   ignoreHeight: false, // 禁止页面渲染高度<br>   ignoreFonts: false, // 禁止字体渲染<br>   breakPages: true, // 在分页符上启用分页<br>   ignoreLastRenderedPageBreak: true, //禁用lastRenderedPageBreak元素的分页<br>   experimental: false, //启用实验性功能（制表符停止计算）<br>   trimXmlDeclaration: true, //如果为真，xml声明将在解析之前从xml文档中删除<br>   debug: false, // 启用额外的日志记录<br>&#125;)<br></code></pre></td></tr></table></figure><p>封装成js方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"><span class="hljs-doctag">@desc</span> 使用docx-preview插件预览.docx，请注意不支持.doc</span><br><span class="hljs-comment"><span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; renderAsync docx-preview插件的renderAsync方法</span><br><span class="hljs-comment"><span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; blob .docx二进制流文件</span><br><span class="hljs-comment"><span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; dom 元素dom</span><br><span class="hljs-comment"><span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">previewDocx</span> = (<span class="hljs-params">renderAsync, blob, dom</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">renderAsync</span>(blob, dom, <span class="hljs-literal">null</span>, &#123;<br>            <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;docx&#x27;</span>, <span class="hljs-comment">// 默认和文档样式类的类名/前缀</span><br>            <span class="hljs-attr">inWrapper</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 启用围绕文档内容渲染包装器</span><br>            <span class="hljs-attr">ignoreWidth</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 禁止页面渲染宽度</span><br>            <span class="hljs-attr">ignoreHeight</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 禁止页面渲染高度</span><br>            <span class="hljs-attr">ignoreFonts</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 禁止字体渲染</span><br>            <span class="hljs-attr">breakPages</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 在分页符上启用分页</span><br>            <span class="hljs-attr">ignoreLastRenderedPageBreak</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//禁用lastRenderedPageBreak元素的分页</span><br>            <span class="hljs-attr">experimental</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//启用实验性功能（制表符停止计算）</span><br>            <span class="hljs-attr">trimXmlDeclaration</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//如果为真，xml声明将在解析之前从xml文档中删除</span><br>            <span class="hljs-attr">debug</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 启用额外的日志记录</span><br>        &#125;)<br>            .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>                <span class="hljs-title function_">resolve</span>(res)<br>            &#125;)<br>            .<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-title function_">reject</span>(<span class="hljs-number">500</span>)<br>            &#125;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文件转换图"><a href="#文件转换图" class="headerlink" title="文件转换图"></a>文件转换图</h3><p>来源于：<a href="https://juejin.cn/post/7395866692798201871#heading-3">https://juejin.cn/post/7395866692798201871#heading-3</a></p><p><img src="https://e4ebh5yc27.feishu.cn/space/api/box/stream/download/asynccode/?code=MDE4YzFmYmViZjgyMGU5NzJkY2VkZjYxODNkNTUyZmFfcm52eFFGWmJBWEVLS3JBVlFiaGxZYUdoRVZlbElNZGZfVG9rZW46VW1oc2JMRXBNb2s3Tlh4TWhITGMwQkFibnFlXzE3NDIzOTIyOTA6MTc0MjM5NTg5MF9WNA" alt="img"></p><h2 id="文件上传相关"><a href="#文件上传相关" class="headerlink" title="文件上传相关"></a>文件上传相关</h2><h3 id="前端分片上传示例"><a href="#前端分片上传示例" class="headerlink" title="前端分片上传示例"></a>前端分片上传示例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&lt;!DOCTYPE html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="hljs-code">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="hljs-code">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="hljs-code">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="hljs-code">    &lt;style&gt;</span><br><span class="hljs-code">         #progressBar &#123;</span><br><span class="hljs-code">            height: 20px;</span><br><span class="hljs-code">            width: 0;</span><br><span class="hljs-code">            background-color: blue;</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">    &lt;/style&gt;</span><br><span class="hljs-code">&lt;/head&gt;</span><br><span class="hljs-code"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="hljs-code">    // HTML 文件</span><br><span class="hljs-code">    &lt;input type=&quot;file&quot; id=&quot;fileInput&quot;&gt;</span><br><span class="hljs-code">    &lt;button id=&quot;uploadButton&quot;&gt;开始上传&lt;/button&gt;</span><br><span class="hljs-code">    &lt;div id=&quot;progressBar&quot;&gt;&lt;/div&gt;</span><br><span class="hljs-code">    &lt;script&gt;</span><br><span class="hljs-code"></span><br><span class="hljs-code">        // JavaScript 代码</span><br><span class="hljs-code">        const fileInput = document.getElementById(&#x27;fileInput&#x27;);</span><br><span class="hljs-code">        const uploadButton = document.getElementById(&#x27;uploadButton&#x27;);</span><br><span class="hljs-code">        const progressBar = document.getElementById(&#x27;progressBar&#x27;);</span><br><span class="hljs-code"></span><br><span class="hljs-code">        // 监听上传按钮点击事件</span><br><span class="hljs-code">        uploadButton.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="hljs-code">            const file = fileInput.files[0];</span><br><span class="hljs-code"></span><br><span class="hljs-code">            if (file) &#123;</span><br><span class="hljs-code">                uploadFile(file);</span><br><span class="hljs-code">            &#125;</span><br><span class="hljs-code">        &#125;);</span><br><span class="hljs-code"></span><br><span class="hljs-code">        // 上传文件函数</span><br><span class="hljs-code">        function uploadFile(file) &#123;</span><br><span class="hljs-code">            const CHUNK_SIZE = 1024 * 1024; // 1MB</span><br><span class="hljs-code"></span><br><span class="hljs-code">            const formData = new FormData();</span><br><span class="hljs-code">            formData.append(&#x27;file&#x27;, file);</span><br><span class="hljs-code"></span><br><span class="hljs-code">            const stream = file.stream();</span><br><span class="hljs-code"></span><br><span class="hljs-code">            const reader = stream.getReader();</span><br><span class="hljs-code">            let uploadedBytes = 0;</span><br><span class="hljs-code">            const totalBytes = file.size;</span><br><span class="hljs-code"></span><br><span class="hljs-code">            function readChunk() &#123;</span><br><span class="hljs-code">                return reader.read().then(function processResult(result) &#123;</span><br><span class="hljs-code">                    if (result.done) &#123;</span><br><span class="hljs-code">                        console.log(&#x27;文件上传完成&#x27;);</span><br><span class="hljs-code">                        return;</span><br><span class="hljs-code">                    &#125;</span><br><span class="hljs-code"></span><br><span class="hljs-code">                    const chunk = result.value;</span><br><span class="hljs-code">                    uploadedBytes += chunk.length;</span><br><span class="hljs-code"></span><br><span class="hljs-code">                    // 更新进度条</span><br><span class="hljs-code">                    const progress = Math.round((uploadedBytes / totalBytes) * 100);</span><br><span class="hljs-code">                    progressBar.style.width = `$&#123;progress&#125;%`;</span><br><span class="hljs-code"></span><br><span class="hljs-code">                    // 将 chunk 发送到服务器进行上传</span><br><span class="hljs-code">                    sendChunk(chunk).then(readChunk);</span><br><span class="hljs-code">                &#125;);</span><br><span class="hljs-code">            &#125;</span><br><span class="hljs-code"></span><br><span class="hljs-code">            function sendChunk(chunk) &#123;</span><br><span class="hljs-code">                const start = uploadedBytes - chunk.length;</span><br><span class="hljs-code">                const end = uploadedBytes;</span><br><span class="hljs-code"></span><br><span class="hljs-code">                // 创建一个新的 Blob 对象，只包含当前片段的数据</span><br><span class="hljs-code">                const blob = new Blob([chunk]);</span><br><span class="hljs-code"></span><br><span class="hljs-code">                // 创建一个新的 FormData 对象，用于上传当前片段的数据</span><br><span class="hljs-code">                const formData = new FormData();</span><br><span class="hljs-code">                formData.append(&#x27;file&#x27;, blob, file.name);</span><br><span class="hljs-code">                formData.append(&#x27;start&#x27;, start);</span><br><span class="hljs-code">                formData.append(&#x27;end&#x27;, end);</span><br><span class="hljs-code"></span><br><span class="hljs-code">                // 这里可以使用 fetch API 或其他网络请求库发送 formData 到服务器</span><br><span class="hljs-code">                // 例如：</span><br><span class="hljs-code">                // return fetch(&#x27;/upload&#x27;, &#123;</span><br><span class="hljs-code">                //   method: &#x27;POST&#x27;,</span><br><span class="hljs-code">                //   body: formData</span><br><span class="hljs-code">                // &#125;)</span><br><span class="hljs-code">                // .then(response =&gt; response.json())</span><br><span class="hljs-code">                // .then(data =&gt; &#123;</span><br><span class="hljs-code">                //   // 处理服务器响应</span><br><span class="hljs-code">                // &#125;);</span><br><span class="hljs-code"></span><br><span class="hljs-code">                // 这里为了示例，直接返回一个 resolved 的 Promise</span><br><span class="hljs-code">                return Promise.resolve();</span><br><span class="hljs-code">            &#125;</span><br><span class="hljs-code"></span><br><span class="hljs-code">            readChunk();</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code"></span><br><span class="hljs-code">    &lt;/script&gt;</span><br><span class="hljs-code">&lt;/body&gt;</span><br><span class="hljs-code"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="Echatrs"><a href="#Echatrs" class="headerlink" title="Echatrs"></a>Echatrs</h2><h3 id="相关字段"><a href="#相关字段" class="headerlink" title="相关字段"></a>相关字段</h3><p><a href="https://blog.csdn.net/m0_62395042/article/details/129492654">https://blog.csdn.net/m0_62395042/article/details/129492654</a></p><h3 id="自适应的方法"><a href="#自适应的方法" class="headerlink" title="自适应的方法"></a>自适应的方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 两个方法</span><br>echarts.<span class="hljs-title function_">dispose</span>(dom)<br><span class="hljs-comment">// ...</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListenter</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, callback)<br></code></pre></td></tr></table></figure><h3 id="双y轴"><a href="#双y轴" class="headerlink" title="双y轴"></a>双y轴</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">chart</span>.<span class="hljs-title function_">setOption</span>(&#123;<br>        <span class="hljs-attr">legend</span>: &#123;<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;scroll&quot;</span>,<br>          <span class="hljs-attr">data</span>: [<span class="hljs-string">&quot;红色预警&quot;</span>, <span class="hljs-string">&quot;橙色预警&quot;</span>, <span class="hljs-string">&quot;黄色预警&quot;</span>, <span class="hljs-string">&quot;蓝色预警&quot;</span>, <span class="hljs-string">&quot;设备在线率&quot;</span>],<br>          <span class="hljs-attr">orient</span>: <span class="hljs-string">&quot;horizontal&quot;</span>,<br>          <span class="hljs-attr">bottom</span>: <span class="hljs-string">&#x27;-1%&#x27;</span>,<br>          <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;20%&#x27;</span>,<br>          <span class="hljs-attr">itemWidth</span>: <span class="hljs-number">21</span>,<br>          <span class="hljs-attr">itemHeight</span>: <span class="hljs-number">21</span>,<br>          <span class="hljs-attr">textStyle</span>: &#123;<br>            <span class="hljs-attr">fontSize</span>: <span class="hljs-title function_">fontSize</span>(<span class="hljs-number">0.12</span>),<br>            <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#fff&#x27;</span><br>          &#125;,<br>        &#125;,<br>        <span class="hljs-attr">grid</span>: &#123;<br>          <span class="hljs-attr">top</span>: <span class="hljs-string">&#x27;15%&#x27;</span>,<br>          <span class="hljs-attr">right</span>: <span class="hljs-string">&quot;10%&quot;</span>,<br>          <span class="hljs-attr">left</span>: <span class="hljs-string">&quot;15%&quot;</span>,<br>          <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">borderColor</span>: <span class="hljs-string">&quot;transparent&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">tooltip</span>: &#123;<br>          <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;axis&quot;</span>,<br>        &#125;,<br>        <span class="hljs-attr">xAxis</span>: &#123;<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;category&quot;</span>,<br>          <span class="hljs-attr">data</span>: xData,<br>          <span class="hljs-attr">axisLabel</span>: &#123;<br>            <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">textStyle</span>: &#123;<br>              <span class="hljs-attr">fontSize</span>: <span class="hljs-title function_">fontSize</span>(<span class="hljs-number">0.12</span>),<br>              <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#fff&#x27;</span><br>            &#125;,<br>          &#125;,<br>        &#125;,<br>        <span class="hljs-attr">yAxis</span>: [<br>          &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;每日预警(处)&quot;</span>,<br>            <span class="hljs-attr">nameTextStyle</span>: &#123;<br>              <span class="hljs-attr">fontSize</span>: <span class="hljs-title function_">fontSize</span>(<span class="hljs-number">0.12</span>),<br>              <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#fff&#x27;</span><br>            &#125;,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;value&quot;</span>,<br>            <span class="hljs-attr">min</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">max</span>: <span class="hljs-title class_">Max1</span>,<br>            <span class="hljs-attr">splitNumber</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-attr">interval</span>: (<span class="hljs-title class_">Max1</span> - <span class="hljs-number">0</span>) / <span class="hljs-number">5</span>,<br>            <span class="hljs-attr">splitLine</span>: &#123;<br>              <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>              <span class="hljs-attr">lineStyle</span>: &#123;<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;dashed&quot;</span>,<br>              &#125;,<br>            &#125;,<br>            <span class="hljs-attr">axisLabel</span>: &#123;<br>              <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>              <span class="hljs-attr">textStyle</span>: &#123;<br>                <span class="hljs-attr">fontSize</span>: <span class="hljs-title function_">fontSize</span>(<span class="hljs-number">0.12</span>),<br>                <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#fff&#x27;</span><br>              &#125;,<br>            &#125;,<br>            <span class="hljs-attr">minInterval</span>: <span class="hljs-number">1</span>,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;设备在线率(%)&quot;</span>,<br>            <span class="hljs-attr">nameTextStyle</span>: &#123;<br>              <span class="hljs-attr">fontSize</span>: <span class="hljs-title function_">fontSize</span>(<span class="hljs-number">0.12</span>),<br>              <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#fff&#x27;</span><br>            &#125;,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;value&quot;</span>,<br>            <span class="hljs-attr">min</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">max</span>: <span class="hljs-number">100</span>,<br>            <span class="hljs-attr">splitNumber</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-attr">splitLine</span>: &#123;<br>              <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>              <span class="hljs-attr">lineStyle</span>: &#123;<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;dashed&quot;</span>,<br>              &#125;,<br>            &#125;,<br>            <span class="hljs-attr">axisLabel</span>: &#123;<br>              <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>              <span class="hljs-attr">textStyle</span>: &#123;<br>                <span class="hljs-attr">fontSize</span>: <span class="hljs-title function_">fontSize</span>(<span class="hljs-number">0.12</span>),<br>                <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#fff&#x27;</span><br>              &#125;,<br>            &#125;,<br>          &#125;,<br>        ],<br>        <span class="hljs-attr">series</span>: [<br>          &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;蓝色预警&quot;</span>,<br>            <span class="hljs-attr">stack</span>: <span class="hljs-string">&quot;每日预警(条)&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br>            <span class="hljs-attr">data</span>: blueData,<br>            <span class="hljs-attr">smooth</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//曲线</span><br>            <span class="hljs-attr">symbol</span>: <span class="hljs-string">&quot;circle&quot;</span>, <span class="hljs-comment">//实心节点</span><br>            <span class="hljs-attr">symbolSize</span>: <span class="hljs-number">10</span>, <span class="hljs-comment">//节点大小</span><br>            <span class="hljs-attr">color</span>: [<span class="hljs-string">&quot;#69b6f0&quot;</span>], <span class="hljs-comment">//折线颜色</span><br>            <span class="hljs-attr">barWidth</span>: <span class="hljs-number">30</span>,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;黄色预警&quot;</span>,<br>            <span class="hljs-attr">stack</span>: <span class="hljs-string">&quot;每日预警(条)&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br>            <span class="hljs-attr">data</span>: yellowData,<br>            <span class="hljs-attr">smooth</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//曲线</span><br>            <span class="hljs-attr">symbol</span>: <span class="hljs-string">&quot;circle&quot;</span>, <span class="hljs-comment">//实心节点</span><br>            <span class="hljs-attr">symbolSize</span>: <span class="hljs-number">10</span>, <span class="hljs-comment">//节点大小</span><br>            <span class="hljs-attr">color</span>: [<span class="hljs-string">&quot;#f6c359&quot;</span>], <span class="hljs-comment">//折线颜色</span><br>            <span class="hljs-attr">barWidth</span>: <span class="hljs-number">30</span>,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;橙色预警&quot;</span>,<br>            <span class="hljs-attr">stack</span>: <span class="hljs-string">&quot;每日预警(条)&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br>            <span class="hljs-attr">data</span>: orangeData,<br>            <span class="hljs-attr">smooth</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//曲线</span><br>            <span class="hljs-attr">symbol</span>: <span class="hljs-string">&quot;circle&quot;</span>, <span class="hljs-comment">//实心节点</span><br>            <span class="hljs-attr">symbolSize</span>: <span class="hljs-number">10</span>, <span class="hljs-comment">//节点大小</span><br>            <span class="hljs-attr">color</span>: [<span class="hljs-string">&quot;#f19149&quot;</span>], <span class="hljs-comment">//折线颜色</span><br>            <span class="hljs-attr">barWidth</span>: <span class="hljs-number">30</span>,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;红色预警&quot;</span>,<br>            <span class="hljs-attr">stack</span>: <span class="hljs-string">&quot;每日预警(条)&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br>            <span class="hljs-attr">data</span>: redData,<br>            <span class="hljs-attr">smooth</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//曲线</span><br>            <span class="hljs-attr">symbol</span>: <span class="hljs-string">&quot;circle&quot;</span>, <span class="hljs-comment">//实心节点</span><br>            <span class="hljs-attr">symbolSize</span>: <span class="hljs-number">10</span>, <span class="hljs-comment">//节点大小</span><br>            <span class="hljs-attr">color</span>: [<span class="hljs-string">&quot;#f46d63&quot;</span>], <span class="hljs-comment">//折线颜色</span><br>            <span class="hljs-attr">barWidth</span>: <span class="hljs-number">30</span>,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;设备在线率&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;line&quot;</span>,<br>            <span class="hljs-attr">data</span>: rtuData,<br>            <span class="hljs-attr">symbol</span>: <span class="hljs-string">&quot;circle&quot;</span>,<br>            <span class="hljs-attr">symbolSize</span>: <span class="hljs-number">10</span>,<br>            <span class="hljs-attr">yAxisIndex</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">color</span>: [<span class="hljs-string">&quot;#2ACCAC&quot;</span>], <span class="hljs-comment">//折线颜色</span><br>            <span class="hljs-attr">barWidth</span>: <span class="hljs-number">30</span>,<br>          &#125;,<br>        ],<br>      &#125;);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">showChart</span> = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><h2 id="insertAdjacentElement方法介绍"><a href="#insertAdjacentElement方法介绍" class="headerlink" title="insertAdjacentElement方法介绍"></a><strong>insertAdjacentElement方法介绍</strong></h2><p>一个原生方法，用于将元素插入到指定元素的给定位置。</p><p>语法： <code>element.insertAdjacentElement(position, element);</code></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Makefile"><span class="hljs-section">position:&#x27;beforebegin&#x27;: 在该元素本身的前面.&#x27;afterbegin&#x27;:只在该元素当中, 在该元素第一个子孩子前面.&#x27;beforeend&#x27;:只在该元素当中, 在该元素最后一个子孩子后面.&#x27;afterend&#x27;: 在该元素本身的后面.</span><br></code></pre></td></tr></table></figure><p><img src="https://e4ebh5yc27.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTY2NWQwOWQxYTUzMjA1OWJkN2I4ZjUxNTViNjRkN2JfbzJ1SjBJakpLemRZSko2dmsxdThxM1QxdEhvbzZYSE1fVG9rZW46Ym94Y253TkZaNFRZTlJKb0pjQ2ZHWjY2UmNmXzE3NDIzOTIyOTA6MTc0MjM5NTg5MF9WNA" alt="img"></p><p>这个方法可以很快速的在节点的前后或者节点内部首尾，对比insertBefore来说更方便。</p><p>和insertBefore一样，插入的节点如果原本出于文档中，那么就会被移动到指定的位置。</p><p>如果只是想插入一段文本的话，可以使用类似的方法：insertAdjacentText， 语法都是一样的。</p><h2 id="webScoket参考"><a href="#webScoket参考" class="headerlink" title="webScoket参考"></a>webScoket参考</h2><p><a href="https://juejin.cn/post/7248219648054591546#heading-7">https://juejin.cn/post/7248219648054591546#heading-7</a></p><h2 id="video相关"><a href="#video相关" class="headerlink" title="video相关"></a><strong>video相关</strong></h2><h4 id="在vue3项目中使用flv-js播放直播视频流"><a href="#在vue3项目中使用flv-js播放直播视频流" class="headerlink" title="在vue3项目中使用flv.js播放直播视频流"></a><strong>在vue3项目中使用flv.js播放直播视频流</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;videoBox&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">video</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;videoElement&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">controls</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">autoplay</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">muted</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%; height: 100%; object-fit: fill&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;videoFlv&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">import</span> flvjs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;flv.js&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">import</span> &#123; useMessage &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;naive-ui&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> message = <span class="hljs-title function_">useMessage</span>();</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">taskInfo</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 首先定义flvPlayer为null</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> flvPlayer = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> taskInfo = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> props.<span class="hljs-property">taskInfo</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> <span class="hljs-title function_">createVideo</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">if</span> (flvjs.<span class="hljs-title function_">isSupported</span>()) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> videoElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;videoElement&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      flvPlayer.<span class="hljs-property">value</span> = flvjs.<span class="hljs-title function_">createPlayer</span>(</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;flv&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">url</span>: ‘’, <span class="hljs-comment">//你的url地址</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">isLive</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">hasAudio</span>: <span class="hljs-literal">false</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      );</span></span><br><span class="language-javascript"><span class="language-xml">      flvPlayer.<span class="hljs-property">value</span>.<span class="hljs-title function_">attachMediaElement</span>(videoElement);</span></span><br><span class="language-javascript"><span class="language-xml">      flvPlayer.<span class="hljs-property">value</span>.<span class="hljs-title function_">load</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        flvPlayer.<span class="hljs-property">value</span>.<span class="hljs-title function_">play</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;, <span class="hljs-number">300</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//处理视频播放错误的语法</span></span></span><br><span class="language-javascript"><span class="language-xml">      flvPlayer.<span class="hljs-property">value</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        message.<span class="hljs-title function_">error</span>(</span></span><br><span class="language-javascript"><span class="language-xml">视频加载失败，请稍候重试！</span></span><br><span class="language-javascript"><span class="language-xml">);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;;</span></span><br><span class="language-javascript"><span class="language-xml"> </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 我的视频是弹窗显示的，所以创建了destroy方法，在子组件中暴露出去后，在父组件调用即可，这样关闭弹窗后，视频流会停止请求。</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> <span class="hljs-title function_">destroy</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    flvPlayer.<span class="hljs-property">value</span>.<span class="hljs-title function_">pause</span>(); <span class="hljs-comment">//暂停播放数据流</span></span></span><br><span class="language-javascript"><span class="language-xml">    flvPlayer.<span class="hljs-property">value</span>.<span class="hljs-title function_">unload</span>(); <span class="hljs-comment">//取消数据流加载</span></span></span><br><span class="language-javascript"><span class="language-xml">    flvPlayer.<span class="hljs-property">value</span>.<span class="hljs-title function_">detachMediaElement</span>(); <span class="hljs-comment">//将播放实例从节点中取出</span></span></span><br><span class="language-javascript"><span class="language-xml">    flvPlayer.<span class="hljs-property">value</span>.<span class="hljs-title function_">destroy</span>(); <span class="hljs-comment">//销毁播放实例</span></span></span><br><span class="language-javascript"><span class="language-xml">    flvPlayer.<span class="hljs-property">value</span> = <span class="hljs-literal">null</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">defineExpose</span>(&#123; destroy &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">createVideo</span>();</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.videoBox</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">height</span>: <span class="hljs-number">450px</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> <span class="hljs-number">#ccc</span>;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>参考来源：</p><p><a href="https://blog.csdn.net/m0_61101059/article/details/129042981">https://blog.csdn.net/m0_61101059/article/details/129042981</a></p><h4 id="flv-js的追帧、断流重连及实时更新的直播优化方案"><a href="#flv-js的追帧、断流重连及实时更新的直播优化方案" class="headerlink" title="flv.js的追帧、断流重连及实时更新的直播优化方案"></a><strong>flv.js的追帧、断流重连及实时更新的直播优化方案</strong></h4><p><a href="https://blog.csdn.net/gw5205566/article/details/131290591">https://blog.csdn.net/gw5205566/article/details/131290591</a></p><h4 id="video标签控制"><a href="#video标签控制" class="headerlink" title="video标签控制"></a><strong>video标签控制</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs CSS">&lt;<span class="hljs-selector-tag">video</span> controls&gt;&lt;/<span class="hljs-selector-tag">video</span>&gt;<br>    //全屏按钮<br>    <span class="hljs-selector-tag">video</span>::-webkit-media-controls-fullscreen-button &#123;<br>        <span class="hljs-attribute">display</span>: none;<br>    &#125;<br>    //播放按钮<br>    <span class="hljs-selector-tag">video</span>::-webkit-media-controls-play-button &#123;<br>        <span class="hljs-attribute">display</span>: none;<br>    &#125;<br>    //进度条<br>    <span class="hljs-selector-tag">video</span>::-webkit-media-controls-timeline &#123;<br>        <span class="hljs-attribute">display</span>: none;<br>    &#125;<br>    //观看的当前时间<br>    <span class="hljs-selector-tag">video</span>::-webkit-media-controls-current-time-display&#123;<br>        <span class="hljs-attribute">display</span>: none;<br><br>    &#125;<br>    //剩余时间<br>    <span class="hljs-selector-tag">video</span>::-webkit-media-controls-time-remaining-display &#123;<br>        <span class="hljs-attribute">display</span>: none;<br><br>    &#125;<br>    //音量按钮<br>    <span class="hljs-selector-tag">video</span>::-webkit-media-controls-mute-button &#123;<br>        <span class="hljs-attribute">display</span>: none;<br><br>    &#125;<br>    <span class="hljs-selector-tag">video</span>::-webkit-media-controls-toggle-closed-captions-button &#123;<br>        <span class="hljs-attribute">display</span>: none;<br><br>    &#125;<br>    //音量的控制条<br>    <span class="hljs-selector-tag">video</span>::-webkit-media-controls-volume-slider &#123;<br>        <span class="hljs-attribute">display</span>: none;<br><br>    &#125;<br>    //所有控件<br>    <span class="hljs-selector-tag">video</span>::-webkit-media-controls-enclosure&#123;<br>        <span class="hljs-attribute">display</span>: none;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="HTML5的Video标签的属性-方法和事件汇总"><a href="#HTML5的Video标签的属性-方法和事件汇总" class="headerlink" title="HTML5的Video标签的属性,方法和事件汇总"></a><a href="https://segmentfault.com/a/1190000008053507">HTML5的Video标签的属性,方法和事件汇总</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;video&gt;标签的属性<br>src ：视频的属性<br>poster：视频封面，没有播放时显示的图片<br>preload：预加载<br>autoplay：自动播放<br>loop：循环播放<br>controls：浏览器自带的控制条<br>width：视频宽度<br>height：视频高度<br>html 代码<br><br>  &lt;video id=<span class="hljs-string">&quot;media&quot;</span> src=<span class="hljs-string">&quot;http://www.sundxs.com/test.mp4&quot;</span> controls width=<span class="hljs-string">&quot;400px&quot;</span> heigt=<span class="hljs-string">&quot;400px&quot;</span>&gt;&lt;/video&gt;  <br>  <span class="hljs-comment">//audio和video都可以通过JS获取对象,JS通过id获取video和audio的对象</span><br>获取video对象<br><br>  <span class="hljs-title class_">Media</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;media&quot;</span>); <br><span class="hljs-title class_">Media</span>方法和属性：<br><span class="hljs-title class_">HTMLVideoElement</span>和<span class="hljs-title class_">HTMLAudioElement</span> 均继承自<span class="hljs-title class_">HTMLMediaElement</span><br><span class="hljs-title class_">Media</span>.<span class="hljs-property">error</span>; <span class="hljs-comment">//null:正常</span><br><span class="hljs-title class_">Media</span>.<span class="hljs-property">error</span>.<span class="hljs-property">code</span>; <span class="hljs-comment">//1.用户终止 2.网络错误 3.解码错误 4.URL无效</span><br><span class="hljs-comment">//网络状态 </span><br>- <span class="hljs-title class_">Media</span>.<span class="hljs-property">currentSrc</span>; <span class="hljs-comment">//返回当前资源的URL</span><br>- <span class="hljs-title class_">Media</span>.<span class="hljs-property">src</span> = value; <span class="hljs-comment">//返回或设置当前资源的URL</span><br>- <span class="hljs-title class_">Media</span>.<span class="hljs-title function_">canPlayType</span>(type); <span class="hljs-comment">//是否能播放某种格式的资源</span><br>- <span class="hljs-title class_">Media</span>.<span class="hljs-property">networkState</span>; <span class="hljs-comment">//0.此元素未初始化 1.正常但没有使用网络 2.正在下载数据 3.没有找到资源</span><br>- <span class="hljs-title class_">Media</span>.<span class="hljs-title function_">load</span>(); <span class="hljs-comment">//重新加载src指定的资源</span><br>- <span class="hljs-title class_">Media</span>.<span class="hljs-property">buffered</span>; <span class="hljs-comment">//返回已缓冲区域，TimeRanges</span><br>- <span class="hljs-title class_">Media</span>.<span class="hljs-property">preload</span>; <span class="hljs-comment">//none:不预载 metadata:预载资源信息 auto:</span><br><br><span class="hljs-comment">//准备状态 </span><br>- <span class="hljs-title class_">Media</span>.<span class="hljs-property">readyState</span>;<span class="hljs-comment">//1:HAVE_NOTHING 2:HAVE_METADATA 3.HAVE_CURRENT_DATA 4.HAVE_FUTURE_DATA 5.HAVE_ENOUGH_DATA</span><br>- <span class="hljs-title class_">Media</span>.<span class="hljs-property">seeking</span>; <span class="hljs-comment">//是否正在seeking</span><br><br><span class="hljs-comment">//回放状态</span><br><br><span class="hljs-title class_">Media</span>.<span class="hljs-property">currentTime</span> = value; <span class="hljs-comment">//当前播放的位置，赋值可改变位置</span><br><span class="hljs-title class_">Media</span>.<span class="hljs-property">startTime</span>; <span class="hljs-comment">//一般为0，如果为流媒体或者不从0开始的资源，则不为0</span><br><span class="hljs-title class_">Media</span>.<span class="hljs-property">duration</span>; <span class="hljs-comment">//当前资源长度 流返回无限</span><br><span class="hljs-title class_">Media</span>.<span class="hljs-property">paused</span>; <span class="hljs-comment">//是否暂停</span><br><span class="hljs-title class_">Media</span>.<span class="hljs-property">defaultPlaybackRate</span> = value;<span class="hljs-comment">//默认的回放速度，可以设置</span><br><span class="hljs-title class_">Media</span>.<span class="hljs-property">playbackRate</span> = value;<span class="hljs-comment">//当前播放速度，设置后马上改变</span><br><span class="hljs-title class_">Media</span>.<span class="hljs-property">played</span>; <span class="hljs-comment">//返回已经播放的区域，TimeRanges，关于此对象见下文</span><br><span class="hljs-title class_">Media</span>.<span class="hljs-property">seekable</span>; <span class="hljs-comment">//返回可以seek的区域 TimeRanges</span><br><span class="hljs-title class_">Media</span>.<span class="hljs-property">ended</span>; <span class="hljs-comment">//是否结束</span><br><span class="hljs-title class_">Media</span>.<span class="hljs-property">autoPlay</span>; <span class="hljs-comment">//是否自动播放</span><br><span class="hljs-title class_">Media</span>.<span class="hljs-property">loop</span>; <span class="hljs-comment">//是否循环播放</span><br><span class="hljs-title class_">Media</span>.<span class="hljs-title function_">play</span>(); <span class="hljs-comment">//播放</span><br><span class="hljs-title class_">Media</span>.<span class="hljs-title function_">pause</span>(); <span class="hljs-comment">//暂停</span><br><span class="hljs-comment">//视频控制</span><br><br><span class="hljs-title class_">Media</span>.<span class="hljs-property">controls</span>;<span class="hljs-comment">//是否有默认控制条</span><br><span class="hljs-title class_">Media</span>.<span class="hljs-property">volume</span> = value; <span class="hljs-comment">//音量</span><br><span class="hljs-title class_">Media</span>.<span class="hljs-property">muted</span> = value; <span class="hljs-comment">//静音</span><br><span class="hljs-title class_">TimeRanges</span>(区域)对象<br><span class="hljs-title class_">TimeRanges</span>.<span class="hljs-property">length</span>; <span class="hljs-comment">//区域段数</span><br><span class="hljs-title class_">TimeRanges</span>.<span class="hljs-title function_">start</span>(index) <span class="hljs-comment">//第index段区域的开始位置</span><br><span class="hljs-title class_">TimeRanges</span>.<span class="hljs-title function_">end</span>(index) <span class="hljs-comment">//第index段区域的结束位置</span><br><span class="hljs-comment">//相关事件</span><br><br>  <span class="hljs-keyword">var</span> eventTester = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>     <span class="hljs-title class_">Media</span>.<span class="hljs-title function_">addEventListener</span>(e,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).<span class="hljs-title function_">getTime</span>(),e)<br>     &#125;,<span class="hljs-literal">false</span>);<br> &#125;<br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;loadstart&quot;</span>); <span class="hljs-comment">//客户端开始请求数据</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;progress&quot;</span>); <span class="hljs-comment">//客户端正在请求数据</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;suspend&quot;</span>); <span class="hljs-comment">//延迟下载</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;abort&quot;</span>); <span class="hljs-comment">//客户端主动终止下载（不是因为错误引起）</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;loadstart&quot;</span>); <span class="hljs-comment">//客户端开始请求数据</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;progress&quot;</span>); <span class="hljs-comment">//客户端正在请求数据</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;suspend&quot;</span>); <span class="hljs-comment">//延迟下载</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;abort&quot;</span>); <span class="hljs-comment">//客户端主动终止下载（不是因为错误引起），</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;error&quot;</span>); <span class="hljs-comment">//请求数据时遇到错误</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;stalled&quot;</span>); <span class="hljs-comment">//网速失速</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;play&quot;</span>); <span class="hljs-comment">//play()和autoplay开始播放时触发</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;pause&quot;</span>); <span class="hljs-comment">//pause()触发</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;loadedmetadata&quot;</span>); <span class="hljs-comment">//成功获取资源长度</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;loadeddata&quot;</span>); <span class="hljs-comment">//</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;waiting&quot;</span>); <span class="hljs-comment">//等待数据，并非错误</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;playing&quot;</span>); <span class="hljs-comment">//开始回放</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;canplay&quot;</span>); <span class="hljs-comment">//可以播放，但中途可能因为加载而暂停</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;canplaythrough&quot;</span>); <span class="hljs-comment">//可以播放，歌曲全部加载完毕</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;seeking&quot;</span>); <span class="hljs-comment">//寻找中</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;seeked&quot;</span>); <span class="hljs-comment">//寻找完毕</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;timeupdate&quot;</span>); <span class="hljs-comment">//播放时间改变</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;ended&quot;</span>); <span class="hljs-comment">//播放结束</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;ratechange&quot;</span>); <span class="hljs-comment">//播放速率改变</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;durationchange&quot;</span>); <span class="hljs-comment">//资源长度改变</span><br><span class="hljs-title function_">eventTester</span>(<span class="hljs-string">&quot;volumechange&quot;</span>); <span class="hljs-comment">//音量改变</span><br></code></pre></td></tr></table></figure><p>参考地址：<a href="https://segmentfault.com/a/1190000008053507">https://segmentfault.com/a/1190000008053507</a></p><h4 id="RTSP格式视频流"><a href="#RTSP格式视频流" class="headerlink" title="RTSP格式视频流"></a>RTSP格式视频流</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">详细介绍：<br>在 Vue 中使用 flv.js 插件播放 RTSP 视频流的主要原因是浏览器原生的 <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span>&gt;</span></span> 标签并不直接支持 RTSP 协议，也不支持 FLV 容器格式。<br>FLV 是一种流行的流媒体容器格式，主要用于在线视频播放，而 RTSP 是一种用于控制实时流媒体会话的网络协议。<br>flv.js 是一个开源的 JavaScript 库，它可以用于在现代浏览器中播放 FLV 格式的视频流，同时它也支持 HLS (HTTP Live Streaming) 和 DASH (Dynamic Adaptive Streaming over HTTP)。<br>flv.js 能够在浏览器环境中解码和播放 FLV 流，这是因为 flv.js 内部实现了对 FLV 文件结构的理解和相应的解码逻辑。<br>当要在 Vue 中播放 RTSP 视频流时，一般需要先将 RTSP 流转换成浏览器能够理解的格式，比如 FLV 或者 HLS。这个转换过程通常发生在服务器端或者使用某种流媒体服务器软件（如 FFmpeg、SRS、Nginx RTMP 等）。转换后的流可以通过 HTTP 协议发送到客户端，这样 flv.js 就可以接收并解码这些流了。<br>flv.js 并不直接支持 RTSP 协议，所以仍然需要一个中间层来将 RTSP 转换成 FLV 或其他 flv.js 支持的格式。这就是为什么在 Vue 中使用 flv.js 插件播放 RTSP 视频流时，你不能直接请求 RTSP 地址的原因。                     <br></code></pre></td></tr></table></figure><p>资料参考：<a href="https://blog.csdn.net/weixin_65793170/article/details/140049511">https://blog.csdn.net/weixin_65793170/article/details/140049511</a></p><h2 id="monorepo模式"><a href="#monorepo模式" class="headerlink" title="monorepo模式"></a>monorepo模式</h2><p>概述：monorepo是可多个模块共用依赖，只能使用pnpm</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue3-pnpm-monorepo&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;private&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dev:vue-demo1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pnpm run -C packages/vue-demo1 dev&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dev:vue-demo2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pnpm run -C packages/vue-demo2 dev&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build:vue-demo1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pnpm run -C packages/vue-demo1 build&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build:vue-demo2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pnpm run -C packages/vue-demo2 build&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;preview:vue-demo1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pnpm run -C packages/vue-demo2 preview&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ISC&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="yarn命令在vscode上面无法使用问题"><a href="#yarn命令在vscode上面无法使用问题" class="headerlink" title="yarn命令在vscode上面无法使用问题"></a>yarn命令在vscode上面无法使用问题</h2><p><a href="https://blog.csdn.net/qq_45990281/article/details/124830907">https://blog.csdn.net/qq_45990281/article/details/124830907</a></p><h2 id="前端重新部署如何通知用户刷新网页"><a href="#前端重新部署如何通知用户刷新网页" class="headerlink" title="前端重新部署如何通知用户刷新网页"></a>前端重新部署如何通知用户刷新网页</h2><p>讨论：<a href="https://juejin.cn/post/7185451392994115645">https://juejin.cn/post/7185451392994115645</a></p><p>方法：<a href="https://juejin.cn/post/7166134868215070733">https://juejin.cn/post/7166134868215070733</a></p><p>插件：<a href="https://github.com/GreatAuk/plugin-web-update-notification/blob/master/README.zh-CN.md">https://github.com/GreatAuk/plugin-web-update-notification/blob/master/README.zh-CN.md</a></p><h2 id="打包项目版本号自加"><a href="#打包项目版本号自加" class="headerlink" title="打包项目版本号自加"></a><strong>打包项目版本号自加</strong></h2><p><a href="https://www.jb51.net/article/263340.htm">https://www.jb51.net/article/263340.htm</a></p><h2 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h2><p><a href="https://blog.csdn.net/Ariel_tilamisu/article/details/122252571">https://blog.csdn.net/Ariel_tilamisu/article/details/122252571</a></p><p><a href="https://www.cnblogs.com/mahongbiao/p/14778155.html">https://www.cnblogs.com/mahongbiao/p/14778155.html</a></p><p>gantt使用教程：<a href="https://www.evget.com/article/2021/3/30/41207.html">https://www.evget.com/article/2021/3/30/41207.html</a></p><p>gantt官网：<a href="https://docs.dhtmlx.com/gantt/samples/">https://docs.dhtmlx.com/gantt/samples/</a></p><p>示例：<a href="https://docs.dhtmlx.com/gantt/samples/?sample=%2710_layout/01_rightside_columns.html%27&filter=%27%27">https://docs.dhtmlx.com/gantt/samples/?sample=%2710_layout/01_rightside_columns.html%27&amp;filter=%27%27</a></p><h2 id="input-type-number-禁止输入字符“e”的办法"><a href="#input-type-number-禁止输入字符“e”的办法" class="headerlink" title="input type&#x3D;number 禁止输入字符“e”的办法"></a>input type&#x3D;number 禁止输入字符“e”的办法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">onkeypress</span>=<span class="hljs-string">&quot;return(/[\d]/.test(String.fromCharCode(event.keyCode)))&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="js-cookies"><a href="#js-cookies" class="headerlink" title="js-cookies"></a>js-cookies</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// npm install js-cookie --save</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Cookies</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;js-cookie&#x27;</span><br>cookies.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;token&#x27;</span>, <span class="hljs-string">&#x27;这里是你的token&#x27;</span>, &#123;<span class="hljs-attr">expires</span>:<span class="hljs-number">7</span>, <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-attr">domain</span>: <span class="hljs-string">&#x27;.jd.com&#x27;</span>&#125;)<br>cookies.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;token&#x27;</span>, &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">domain</span>: <span class="hljs-string">&#x27;.jd.com&#x27;</span> &#125;)<br><br><span class="hljs-comment">// https://juejin.cn/post/6844903876840128526</span><br></code></pre></td></tr></table></figure><h2 id="大文件上传github地址"><a href="#大文件上传github地址" class="headerlink" title="大文件上传github地址"></a>大文件上传github地址</h2><p><a href="https://github.com/yeyan1996/file-upload">https://github.com/yeyan1996/file-upload</a></p><h2 id="前端实现-文件批量下载"><a href="#前端实现-文件批量下载" class="headerlink" title="前端实现-文件批量下载"></a>前端实现-文件批量下载</h2><p><a href="https://blog.csdn.net/m0_37792830/article/details/103992796">https://blog.csdn.net/m0_37792830/article/details/103992796</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> triggerDelay = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">let</span> removeDelay = <span class="hljs-number">1000</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">urlList</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">url, index</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createIFrame</span>(url, index * triggerDelay, removeDelay);<br>&#125;);<br><br><span class="hljs-comment">// 这里是创建iframe的方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createIFrame</span>(<span class="hljs-params">url, triggerDelay, removeDelay</span>) &#123;<br>   <span class="hljs-comment">//动态添加iframe，设置src，然后删除</span><br>   <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-keyword">var</span> frame = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;iframe&quot;</span>);<br>     frame.<span class="hljs-property">src</span> = url;<br>     frame.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>;<br>     <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(frame);<br>     <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>       frame.<span class="hljs-title function_">remove</span>();<br>     &#125;, removeDelay);<br>   &#125;, triggerDelay);<br> &#125;,<br></code></pre></td></tr></table></figure><p>vue3 使用keep-alive</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;router-view v-slot=<span class="hljs-string">&quot;&#123; Component &#125;&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span></span><br>&lt;/router-view&gt;<br></code></pre></td></tr></table></figure><p>文件流</p><p><a href="https://blog.csdn.net/qq_40636998/article/details/107239922">https://blog.csdn.net/qq_40636998/article/details/107239922</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// utils.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">download</span> = (<span class="hljs-params">res, type, filename</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 创建blob对象，解析流数据</span><br>  <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([res], &#123;<br>    <span class="hljs-comment">// 如何后端没返回下载文件类型，则需要手动设置：type: &#x27;application/pdf;chartset=UTF-8&#x27; 表示下载文档为pdf，如果是word则设置为msword，excel为excel</span><br>    <span class="hljs-attr">type</span>: type<br>  &#125;)<br>  <span class="hljs-keyword">const</span> a = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>  <span class="hljs-comment">// 兼容webkix浏览器，处理webkit浏览器中href自动添加blob前缀，默认在浏览器打开而不是下载</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">URL</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitURL</span><br>  <span class="hljs-comment">// 根据解析后的blob对象创建URL 对象</span><br>  <span class="hljs-keyword">const</span> herf = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(blob)<br>  <span class="hljs-comment">// 下载链接</span><br>  a.<span class="hljs-property">href</span> = herf<br>  <span class="hljs-comment">// 下载文件名,如果后端没有返回，可以自己写a.download = &#x27;文件.pdf&#x27;</span><br>  a.<span class="hljs-property">download</span> = filename<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(a)<br>  a.<span class="hljs-title function_">click</span>()<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(a)<br>  <span class="hljs-comment">// 在内存中移除URL 对象</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(herf)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="js对文字进行编码涉及3个函数："><a href="#js对文字进行编码涉及3个函数：" class="headerlink" title="js对文字进行编码涉及3个函数："></a>js对文字进行编码涉及3个函数：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-built_in">escape</span>,<span class="hljs-built_in">encodeURI</span>,<span class="hljs-built_in">encodeURIComponent</span><br><span class="hljs-built_in">unescape</span>,<span class="hljs-built_in">decodeURI</span>,<span class="hljs-built_in">decodeURIComponent</span><br></code></pre></td></tr></table></figure><h2 id="Npm-install"><a href="#Npm-install" class="headerlink" title="Npm install"></a>Npm install</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">npm install --registry=<span class="hljs-attr">https</span>:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><h5 id="建议不要直接使用-cnpm-安装以来，会有各种诡异的-bug。可以通过如下操作解决-npm-下载速度慢的问题，或者使用-yarn-先用npm-install-yarn-g-再执行-yarn-install"><a href="#建议不要直接使用-cnpm-安装以来，会有各种诡异的-bug。可以通过如下操作解决-npm-下载速度慢的问题，或者使用-yarn-先用npm-install-yarn-g-再执行-yarn-install" class="headerlink" title="# 建议不要直接使用 cnpm 安装以来，会有各种诡异的 bug。可以通过如下操作解决 npm 下载速度慢的问题，或者使用**yarn(先用npm** install yarn -g , 再执行 yarn install)"></a><strong># 建议不要直接使用 cnpm 安装以来，会有各种诡异的 bug。可以通过如下操作解决</strong> <strong>npm</strong> <strong>下载速度慢的问题，或者使用**<strong>yarn</strong></strong>(先用npm** <strong>install</strong> <strong>yarn -g , 再执行 yarn install)</strong></h5><p>npm install –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><h5 id="安装node-sass失败可先运行一下命令"><a href="#安装node-sass失败可先运行一下命令" class="headerlink" title="# 安装node-sass失败可先运行一下命令"></a><strong># 安装node-sass失败可先运行一下命令</strong></h5><p>npm install -g mirror-config-china –registry&#x3D;<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a></p><h2 id="nvm问题"><a href="#nvm问题" class="headerlink" title="nvm问题"></a>nvm问题</h2><h3 id="nvm-下载node时很慢或卡住或下载失败"><a href="#nvm-下载node时很慢或卡住或下载失败" class="headerlink" title="nvm 下载node时很慢或卡住或下载失败"></a>nvm 下载node时很慢或卡住或下载失败</h3><h4 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h4><p>打开nvm目录，找到setting.txt 文件夹打开</p><h4 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h4><p>复制如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">node_mirror: https://npmmirror.com/mirrors/node/<br><br>npm_mirror: https://npmmirror.com/mirrors/npm/<br></code></pre></td></tr></table></figure><h2 id="BLOB下载-文件解析为二进制上传"><a href="#BLOB下载-文件解析为二进制上传" class="headerlink" title="BLOB下载,文件解析为二进制上传"></a>BLOB下载,文件解析为二进制上传</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/* BLOB下载 */</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable constant_">BLOB</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([res.<span class="hljs-property">data</span>])<br><span class="hljs-keyword">let</span> url = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(<span class="hljs-variable constant_">BLOB</span>)<br><span class="hljs-keyword">let</span> link = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>link.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span><br>link.<span class="hljs-property">href</span> = url<br>link.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;download&#x27;</span>, params.<span class="hljs-property">fileName</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(link)<br>link.<span class="hljs-title function_">click</span>()<br>link.<span class="hljs-title function_">remove</span>()<br><br><span class="hljs-comment">/* 文件解析为二进制上传 */</span><br><br><span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();<br>reader.<span class="hljs-title function_">readAsArrayBuffer</span>(file)<br>reader.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br><span class="hljs-comment">//如果文件需要参数</span><br><span class="hljs-comment">//const formdata=new FormData()</span><br><span class="hljs-comment">//formdata.append(&#x27;file&#x27;,e.target.result)</span><br>  axios.<span class="hljs-title function_">post</span>(url, e.<span class="hljs-property">target</span>.<span class="hljs-property">result</span>, &#123;<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&#x27;Authorization&#x27;</span>: <span class="hljs-string">&#x27;Bearer &#x27;</span> + <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-property">token</span>,<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW&#x27;</span><br>    &#125;<br>  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修改自动填充的input背景色"><a href="#修改自动填充的input背景色" class="headerlink" title="修改自动填充的input背景色"></a>修改自动填充的input背景色</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">input</span>:-internal-autofill-previewed, input:-internal-autofill-selected &#123;<br>    -webkit-text-fill-<span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span> <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">5000s</span> ease-in-out <span class="hljs-number">0s</span> <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8个实用的自定义指令"><a href="#8个实用的自定义指令" class="headerlink" title="8个实用的自定义指令"></a>8个实用的自定义指令</h2><p><a href="https://juejin.cn/post/7067051410671534116">https://juejin.cn/post/7067051410671534116</a></p><h2 id="jsencrypt公钥私钥加密解密加密和解密"><a href="#jsencrypt公钥私钥加密解密加密和解密" class="headerlink" title="jsencrypt公钥私钥加密解密加密和解密"></a>jsencrypt公钥私钥加密解密加密和解密</h2><p><a href="https://blog.csdn.net/qq_37760041/article/details/108963492">https://blog.csdn.net/qq_37760041/article/details/108963492</a></p><h2 id="structuredClone"><a href="#structuredClone" class="headerlink" title="structuredClone"></a>structuredClone</h2><p><a href="https://www.51cto.com/article/753940.html">https://www.51cto.com/article/753940.html</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 注意不能拷贝函数、dom对象</span><br></code></pre></td></tr></table></figure><h2 id="js工具库集合"><a href="#js工具库集合" class="headerlink" title="js工具库集合"></a>js工具库集合</h2><h3 id="数组转换成树结构"><a href="#数组转换成树结构" class="headerlink" title="数组转换成树结构"></a>数组转换成树结构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">arrayToTree</span>(<span class="hljs-params">nodes</span>) &#123;<br>           <span class="hljs-keyword">let</span> map = &#123;&#125;;<br>           <span class="hljs-keyword">let</span> tree = [];<br><br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> node <span class="hljs-keyword">of</span> nodes) &#123;<br>               map[node.<span class="hljs-property">id</span>] = &#123;...node, <span class="hljs-attr">children</span>: []&#125;;<br>           &#125;<br><br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> node <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(map)) &#123;<br>               <span class="hljs-keyword">if</span> (!node.<span class="hljs-property">parentId</span> || !map[node.<span class="hljs-property">parentId</span>]) &#123;<br>                   tree.<span class="hljs-title function_">push</span>(node);<br>               &#125; <span class="hljs-keyword">else</span> &#123;<br>                   map[node.<span class="hljs-property">parentId</span>].<span class="hljs-property">children</span>.<span class="hljs-title function_">push</span>(node);<br>               &#125;<br>           &#125;<br><br>           <span class="hljs-keyword">return</span> tree;<br>       &#125;<br><br>       <span class="hljs-keyword">const</span> originalData = [<br>           &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Root&#x27;</span>, <span class="hljs-attr">parentId</span>: <span class="hljs-literal">null</span> &#125;,<br>           &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Child 1&#x27;</span>, <span class="hljs-attr">parentId</span>: <span class="hljs-number">1</span> &#125;,<br>           &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;GrandChild 1&#x27;</span>, <span class="hljs-attr">parentId</span>: <span class="hljs-number">2</span> &#125;,<br>           &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Child 2&#x27;</span>, <span class="hljs-attr">parentId</span>: <span class="hljs-number">1</span> &#125;,<br>       ];<br><br>       <span class="hljs-keyword">const</span> tree = <span class="hljs-title function_">arrayToTree</span>(originalData);<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tree);<br></code></pre></td></tr></table></figure><h3 id="判断对象是否循环引用"><a href="#判断对象是否循环引用" class="headerlink" title="判断对象是否循环引用"></a>判断对象是否循环引用</h3><p>如果一个对象存在循环引用，序列化会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">existCircular</span>(<span class="hljs-params">obj</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>      &#125; <span class="hljs-keyword">catch</span> (e)&#123;<br>        <span class="hljs-keyword">return</span> e.<span class="hljs-property">message</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;circular structure&#x27;</span>)<br>      &#125;<br>  &#125;<br><br>    <span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;<br>    obj.<span class="hljs-property">b</span> = obj<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">existCircular</span>(obj))<br></code></pre></td></tr></table></figure><h2 id="并发请求"><a href="#并发请求" class="headerlink" title="并发请求"></a>并发请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcurrentRequestController</span> &#123;<br>            <span class="hljs-title function_">constructor</span>(<span class="hljs-params">maxConcurrentRequests</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxConcurrentRequests</span> = maxConcurrentRequests;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">runningRequests</span> = <span class="hljs-number">0</span>;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span> = [];<br>            &#125;<br><br>            <span class="hljs-title function_">addRequest</span>(<span class="hljs-params">requestFunction</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-title function_">push</span>(requestFunction);<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">processQueue</span>();<br>            &#125;<br><br>            <span class="hljs-title function_">processQueue</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">runningRequests</span> &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxConcurrentRequests</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">const</span> request = <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-title function_">shift</span>();<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">executeRequest</span>(request);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-title function_">executeRequest</span>(<span class="hljs-params">requestFunction</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">runningRequests</span>++;<br>                <span class="hljs-title function_">requestFunction</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">runningRequests</span>--;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">processQueue</span>();<br>                &#125;);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 使用示例</span><br>        <span class="hljs-keyword">const</span> controller = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentRequestController</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// 设置最大并发数为 3</span><br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">makeRequest</span>(<span class="hljs-params">id</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Request <span class="hljs-subst">$&#123;id&#125;</span> started`</span>);<br>                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Request <span class="hljs-subst">$&#123;id&#125;</span> completed`</span>);<br>                    <span class="hljs-title function_">resolve</span>();<br>                &#125;, <span class="hljs-number">2000</span>);<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            controller.<span class="hljs-title function_">addRequest</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">makeRequest</span>(i));<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="AbortController"><a href="#AbortController" class="headerlink" title="AbortController"></a>AbortController</h2><p><strong>什么是AbortController</strong></p><p><code>AbortController</code>是一个用于控制DOM请求的接口，允许你中止一个或多个DOM请求（如<code>fetch</code>请求），从而释放资源、防止内存泄漏。它与<code>AbortSignal</code>一起工作。<code>AbortSignal</code>可以被用来监听和触发中止请求的事件</p><p><code>AbortController</code>主要有两个常用的属性和方法：</p><ul><li><code>controller.signal</code>: 返回一个<code>AbortSignal</code>对象实例，通过这个实例可以监控取消事件。</li><li><code>controller.abort()</code>: 当调用此方法时，会设置<code>signal</code>的<code>aborted</code>标志为<code>true</code>，并触发<code>abort</code>事件通知监听器。</li></ul><h3 id="fetch的一个示例-取消网络请求"><a href="#fetch的一个示例-取消网络请求" class="headerlink" title="fetch的一个示例(取消网络请求)"></a><strong>fetch的一个示例(取消网络请求)</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 创建一个新的 AbortController 实例</span><br><span class="hljs-keyword">const</span> controller = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortController</span>();<br><span class="hljs-keyword">const</span> signal = controller.<span class="hljs-property">signal</span>;<br><br><span class="hljs-comment">// 使用 fetch 开始一个网络请求，并传入 signal</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchData</span>(<span class="hljs-params">url</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url, &#123; signal &#125;);<br>        <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Network response was not ok&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Data received:&#x27;</span>, data);<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-keyword">if</span> (error.<span class="hljs-property">name</span> === <span class="hljs-string">&#x27;AbortError&#x27;</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Fetch aborted!&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Fetch error:&#x27;</span>, error);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 启动请求</span><br><span class="hljs-title function_">fetchData</span>(<span class="hljs-string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>);<br><br><span class="hljs-comment">// 在 2 秒后取消请求</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Aborting fetch...&#x27;</span>);<br>    controller.<span class="hljs-title function_">abort</span>(); <span class="hljs-comment">// 会触发 AbortError</span><br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><h3 id="取消超时操作"><a href="#取消超时操作" class="headerlink" title="取消超时操作"></a>取消超时操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">delayOperation</span>(<span class="hljs-params">timeout</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> controller = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortController</span>();<br>        <span class="hljs-keyword">const</span> &#123; signal &#125; = controller;<br>        <br>        signal.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;abort&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Operation timed out&#x27;</span>));<br>        &#125;);<br>          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (!signal.<span class="hljs-property">aborted</span>) &#123;<br>                <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;Operation completed&#x27;</span>);<br>            &#125;<br>        &#125;, timeout);<br>        <br>        <span class="hljs-comment">// 模拟时间过长的操作</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            controller.<span class="hljs-title function_">abort</span>();<br>        &#125;, timeout + <span class="hljs-number">1000</span>); <span class="hljs-comment">// 这里设定超时时间为操作时间长加1秒</span><br>    &#125;);<br>&#125;<br><br><span class="hljs-title function_">delayOperation</span>(<span class="hljs-number">5000</span>)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span>);<br></code></pre></td></tr></table></figure><p>在这个例子中，我们通过<code>AbortController</code>创建了一个超时机制，如果操作在指定的5秒内没有完成，则会被中止并抛出错误。</p><h3 id="使用-AbortController-来取消-XMLHttpRequest-请求的示例"><a href="#使用-AbortController-来取消-XMLHttpRequest-请求的示例" class="headerlink" title="使用 AbortController 来取消 XMLHttpRequest 请求的示例"></a>使用 <code>AbortController</code> 来取消 <code>XMLHttpRequest</code> 请求的示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 创建一个 AbortController 实例</span><br><span class="hljs-keyword">const</span> controller = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortController</span>();<br><span class="hljs-keyword">const</span> signal = controller.<span class="hljs-property">signal</span>;<br><br><span class="hljs-comment">// 创建一个 XMLHttpRequest 实例</span><br><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br><br><span class="hljs-comment">// 定义请求的 URL 和响应类型</span><br><span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;https://example.com/data&#x27;</span>;<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, url, <span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 监听 XMLHttpRequest 的 readyState 变化</span><br>xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-title class_">XMLHttpRequest</span>.<span class="hljs-property">DONE</span>) &#123;<br>    <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Success:&#x27;</span>, xhr.<span class="hljs-property">responseText</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed:&#x27;</span>, xhr.<span class="hljs-property">statusText</span>);<br>    &#125;<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 监听 signal 的 abort 事件</span><br>signal.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;abort&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Fetch aborted&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 发送请求</span><br>xhr.<span class="hljs-title function_">send</span>();<br><br><span class="hljs-comment">// 假设在某些条件下你想取消请求</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 调用 AbortController 的 abort 方法来取消请求</span><br>  controller.<span class="hljs-title function_">abort</span>();<br>&#125;, <span class="hljs-number">1000</span>); <span class="hljs-comment">// 1秒后取消请求</span><br></code></pre></td></tr></table></figure><h2 id="tailwindcss官方文档"><a href="#tailwindcss官方文档" class="headerlink" title="tailwindcss官方文档"></a>tailwindcss官方文档</h2><p><a href="https://www.tailwindcss.cn/docs/installation">https://www.tailwindcss.cn/docs/installation</a></p><h2 id="PixJs"><a href="#PixJs" class="headerlink" title="PixJs"></a>PixJs</h2><p>官网：<a href="https://pixijs.com/">https://pixijs.com/</a></p><p>其他学习路径：<a href="https://juejin.cn/user/976022056736765/posts">https://juejin.cn/user/976022056736765/posts</a></p><h2 id="ngrok-cc"><a href="#ngrok-cc" class="headerlink" title="ngrok.cc"></a><strong>ngrok.cc</strong></h2><p><a href="https://juejin.cn/post/6844903993911558157?searchId=20240603111539FD022D01854AE4322434#heading-2">ngrok.cc</a>参考教程</p><h2 id="strapi"><a href="#strapi" class="headerlink" title="strapi"></a>strapi</h2><p><a href="https://strapi.io/">官网</a></p><h2 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h2><h3 id="原型链基本示意图"><a href="#原型链基本示意图" class="headerlink" title="原型链基本示意图"></a>原型链基本示意图</h3><p><img src="https://e4ebh5yc27.feishu.cn/space/api/box/stream/download/asynccode/?code=MzBiOThkYTQ1ZGFmZWViZjVhODJjNjYzZDU2YThiYjFfUERWOWNWcGs4eXViaDRWbld1MWFidFVWM0JoWVVvelJfVG9rZW46SGtueWJ0bnpPb3ZueER4Nk5NdWNxS3Uxbm5kXzE3NDIzOTIyOTA6MTc0MjM5NTg5MF9WNA" alt="img"></p><p><img src="https://e4ebh5yc27.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjY3MWUwZWNhN2NjODExNTY4NjE3ODM2MjExOTU1MzRfYTBkTkp1bFJaeEFWVGJ5VjlxdnprY1dTZmZneWlOVm1fVG9rZW46UlhmOGJ0eVc4bzdvcVB4WU1YQ2N5OEZzbldiXzE3NDIzOTIyOTA6MTc0MjM5NTg5MF9WNA" alt="img"></p><h3 id="关于class的几点补充"><a href="#关于class的几点补充" class="headerlink" title="关于class的几点补充"></a>关于class的几点补充</h3><p>1.私有属性和私有方法</p><p>私有属性和私有方法，在ES2022中，提供了私有属性的命名方式；</p><p>方法是在属性名或者方法名前面加<code>#</code>标识符</p><p>私有属性和方法可以保证不被外面读取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;<br>    <br>    #count = <span class="hljs-number">1</span><br> <br>    #<span class="hljs-title function_">getuuid</span>(<span class="hljs-params"></span>) &#123;<br>    &#125;<br>    <br>    <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 使用</span><br>        <span class="hljs-comment">// this.#count</span><br>        <span class="hljs-comment">// this.#getuuid() </span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.super关键字</p><p><code>super</code>作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次<code>super()</code>函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>super</code>作为对象时，在普通方法中，指向父类的原型对象；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-title function_">p</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">super</span>.<span class="hljs-title function_">p</span>()); <span class="hljs-comment">// 2</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">B</span>();<br></code></pre></td></tr></table></figure><p><code>super</code>作为对象时，在静态方法中，指向父类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  <span class="hljs-keyword">static</span> a = <span class="hljs-number">10</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>  &#125;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">m</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-property">a</span><br>  &#125;<br>&#125;<br><br>B.<span class="hljs-title function_">m</span>() <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure><h3 id="关于hasOwnProperty"><a href="#关于hasOwnProperty" class="headerlink" title="关于hasOwnProperty"></a>关于hasOwnProperty</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">object.<span class="hljs-title function_">hasOwnProperty</span>(propertyName)<br>可以检查自身对象是否包含这个属性，但是不是判断是否重写了hasOwnProperty这个方法 或者object直接指向<span class="hljs-literal">null</span><br><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(objRef, <span class="hljs-string">&#x27;propName&#x27;</span>);<br>传入的对象能够通过call方法借用<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>的hasOwnProperty方法，无论object是否改写了hasOwnProperty或者object是<span class="hljs-literal">null</span>的时候都能很好的判断<br></code></pre></td></tr></table></figure><p>如下面的示例，a的指向是null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> a = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// Setting `null` as prototype for &#x27;a&#x27;. </span><br><br>a.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;peter&#x27;</span>;<br><br><span class="hljs-comment">// Using `hasOwnProperty` method would cause an error</span><br>a.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;name&#x27;</span>); <br><br><span class="hljs-comment">// Prototype chain</span><br>a ---&gt; <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h2 id="offsetX、offsetY、scrollTop、scrollY、scrollHeight、clientX、clientY、pageX、pageY以及类似属性的异同点"><a href="#offsetX、offsetY、scrollTop、scrollY、scrollHeight、clientX、clientY、pageX、pageY以及类似属性的异同点" class="headerlink" title="offsetX、offsetY、scrollTop、scrollY、scrollHeight、clientX、clientY、pageX、pageY以及类似属性的异同点"></a>offsetX、offsetY、scrollTop、scrollY、scrollHeight、clientX、clientY、pageX、pageY以及类似属性的异同点</h2><p>图示例</p><p><img src="https://e4ebh5yc27.feishu.cn/space/api/box/stream/download/asynccode/?code=MGQ5N2NjMmZjNzY3MTY0YzRkZDZhMDVhNGYxOGY2OWVfY1A4ZFRnNFV5WG9qR2tTMXBucEZHZGp1bzZPdmtQQ1lfVG9rZW46VU14Z2JiMEJMb3dxajd4QkxKWWNpNEs5bm5lXzE3NDIzOTIyOTA6MTc0MjM5NTg5MF9WNA" alt="img"></p><p><strong>1、clientX&#x2F;clientY</strong></p><p>clientX: 鼠标相对于浏览器文档显示区的水平X坐标,不包括工具栏和滚动条</p><p>clientY:鼠标相对于浏览器文档显示区的垂直Y坐标,不包括工具栏和滚动条</p><p><strong>2、screenX&#x2F;screenY</strong></p><p>screenX:鼠标相对于显示器屏幕的水平X坐标,不包括滚动条</p><p>screenY:鼠标相对于显示器屏幕的垂直Y坐标,不包括滚动条</p><p><strong>3、offsetX&#x2F;offsetY</strong></p><p>offsetX:鼠标相对于事件源(被点击的元素)本身的水平X坐标</p><p>offsetY:鼠标相对于事件源(被点击的元素)本身的垂直Y坐标</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">                        *&#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;</span></span><br><span class="language-css"><span class="language-xml">                        <span class="hljs-selector-class">.box</span>&#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid gold;<span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;&#125;</span></span><br><span class="language-css"><span class="language-xml">                </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-keyword">var</span> box=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                        box.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-keyword">var</span> e=e||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;clientX:&quot;</span>+e.<span class="hljs-property">clientX</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;clientY:&quot;</span>+e.<span class="hljs-property">clientY</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;screenX:&quot;</span>+e.<span class="hljs-property">screenX</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;screenY:&quot;</span>+e.<span class="hljs-property">screenY</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;offsetX:&quot;</span>+e.<span class="hljs-property">offsetX</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;offsetY:&quot;</span>+e.<span class="hljs-property">offsetY</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">                </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="setItemEvent"><a href="#setItemEvent" class="headerlink" title="setItemEvent"></a>setItemEvent</h2><p>我们可以通过重写<strong>localStorage或者sessionStorage的存储操作</strong> ，通过一个自定义事件，来全局监听</p><p>localStorage.setItem的操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 设置 localStorage.setItem 的拦截代码</span><br><span class="hljs-keyword">const</span> signSetItem = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-property">setItem</span>;<br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-property">setItem</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">key, val</span>) &#123;<br>    <span class="hljs-keyword">let</span> setEvent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Event</span>(<span class="hljs-string">&#x27;setItemEvent&#x27;</span>);<br>    setEvent.<span class="hljs-property">key</span> = key;<br>    setEvent.<span class="hljs-property">newValue</span> = val;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">dispatchEvent</span>(setEvent);<br>    signSetItem.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>&#125;;<br><br><span class="hljs-comment">// 监听 setItemEvent 事件：在其他的 JavaScript 代码中，你可以添加一个事件监听器来捕获 setItemEvent 事件并执行相应的操作</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;setItemEvent&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`localStorage.setItem 触发了，设置了键 <span class="hljs-subst">$&#123;event.key&#125;</span>，值 <span class="hljs-subst">$&#123;event.newValue&#125;</span>`</span>);<br>    <span class="hljs-comment">// 在这里可以做任何你希望在 localStorage 被设置时执行的操作</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="autolog（消息提示插件）"><a href="#autolog（消息提示插件）" class="headerlink" title="autolog（消息提示插件）"></a>autolog（消息提示插件）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> cssStr = <span class="hljs-string">`#autolog&#123;display:flex;flex-direction:column;align-items:center;justify-content:flex-start;pointer-events:none;width:100vw;height:100vh;position:fixed;left:0;top:0;z-index:9999999;cursor:pointer;transition:0.2s&#125;#autolog span&#123;pointer-events:auto;width:max-content;animation:fadein 0.4s;animation-delay:0s;border-radius:6px;padding:10px 20px;box-shadow:0 0 10px 6px rgba(0,0,0,0.1);margin:4px;transition:0.2s;z-index:9999999;font-size:14px;display:flex;align-items:center;justify-content:center;gap:4px;height:max-content&#125;#autolog span.hide&#123;opacity:0;pointer-events:none;transform:translateY(-10px);height:0;padding:0;margin:0&#125;.autolog-warn&#123;background-color:#fffaec;color:#e29505&#125;.autolog-error&#123;background-color:#fde7e7;color:#d93025&#125;.autolog-info&#123;background-color:#e6f7ff;color:#0e6eb8&#125;.autolog-success&#123;background-color:#e9f7e7;color:#1a9e2c&#125;.autolog-&#123;background-color:#fafafa;color:#333&#125;@keyframes fadein&#123;0%&#123;opacity:0;transform:translateY(-10px)&#125;100%&#123;opacity:1;transform:translateY(0)&#125;&#125;`</span>;<br><span class="hljs-keyword">const</span> svgIcons = &#123;<br>    <span class="hljs-attr">warn</span>: <span class="hljs-string">`&lt;svg t=&quot;1713405237257&quot; class=&quot;icon&quot; viewBox=&quot;0 0 1024 1024&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; p-id=&quot;2387&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;path d=&quot;M934.4 770.133333L605.866667 181.333333C586.666667 147.2 550.4 128 512 128c-38.4 0-74.666667 21.333333-93.866667 53.333333L89.6 770.133333c-19.2 34.133333-19.2 76.8 0 110.933334S145.066667 938.666667 183.466667 938.666667h657.066666c38.4 0 74.666667-21.333333 93.866667-57.6 19.2-34.133333 19.2-76.8 0-110.933334z m-55.466667 81.066667c-8.533333 14.933333-23.466667 23.466667-38.4 23.466667H183.466667c-14.933333 0-29.866667-8.533333-38.4-23.466667-8.533333-14.933333-8.533333-34.133333 0-49.066667L473.6 213.333333c8.533333-12.8 23.466667-21.333333 38.4-21.333333s29.866667 8.533333 38.4 21.333333l328.533333 588.8c8.533333 14.933333 8.533333 32 0 49.066667z&quot; fill=&quot;#e29505&quot; p-id=&quot;2388&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M512 746.666667m-42.666667 0a42.666667 42.666667 0 1 0 85.333334 0 42.666667 42.666667 0 1 0-85.333334 0Z&quot; fill=&quot;#e29505&quot; p-id=&quot;2389&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M512 629.333333c17.066667 0 32-14.933333 32-32v-192c0-17.066667-14.933333-32-32-32s-32 14.933333-32 32v192c0 17.066667 14.933333 32 32 32z&quot; fill=&quot;#e29505&quot; p-id=&quot;2390&quot;&gt;&lt;/path&gt;&lt;/svg&gt;`</span>,<br>    <span class="hljs-attr">error</span>: <span class="hljs-string">`&lt;svg t=&quot;1713405212725&quot; class=&quot;icon&quot; viewBox=&quot;0 0 1024 1024&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; p-id=&quot;1744&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;path d=&quot;M512 74.666667C270.933333 74.666667 74.666667 270.933333 74.666667 512S270.933333 949.333333 512 949.333333 949.333333 753.066667 949.333333 512 753.066667 74.666667 512 74.666667z m0 810.666666c-204.8 0-373.333333-168.533333-373.333333-373.333333S307.2 138.666667 512 138.666667 885.333333 307.2 885.333333 512 716.8 885.333333 512 885.333333z&quot; fill=&quot;#d93025&quot; p-id=&quot;1745&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M657.066667 360.533333c-12.8-12.8-32-12.8-44.8 0l-102.4 102.4-102.4-102.4c-12.8-12.8-32-12.8-44.8 0-12.8 12.8-12.8 32 0 44.8l102.4 102.4-102.4 102.4c-12.8 12.8-12.8 32 0 44.8 6.4 6.4 14.933333 8.533333 23.466666 8.533334s17.066667-2.133333 23.466667-8.533334l102.4-102.4 102.4 102.4c6.4 6.4 14.933333 8.533333 23.466667 8.533334s17.066667-2.133333 23.466666-8.533334c12.8-12.8 12.8-32 0-44.8l-106.666666-100.266666 102.4-102.4c12.8-12.8 12.8-34.133333 0-46.933334z&quot; fill=&quot;#d93025&quot; p-id=&quot;1746&quot;&gt;&lt;/path&gt;&lt;/svg&gt;`</span>,<br>    <span class="hljs-attr">info</span>: <span class="hljs-string">`&lt;svg t=&quot;1713405208589&quot; class=&quot;icon&quot; viewBox=&quot;0 0 1024 1024&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; p-id=&quot;1582&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;path d=&quot;M853.333333 138.666667H170.666667c-40.533333 0-74.666667 34.133333-74.666667 74.666666v512c0 40.533333 34.133333 74.666667 74.666667 74.666667h151.466666V917.333333c0 12.8 8.533333 25.6 19.2 29.866667 4.266667 2.133333 8.533333 2.133333 12.8 2.133333 8.533333 0 17.066667-4.266667 23.466667-10.666666l136.533333-138.666667H853.333333c40.533333 0 74.666667-34.133333 74.666667-74.666667V213.333333c0-40.533333-34.133333-74.666667-74.666667-74.666666z m10.666667 586.666666c0 6.4-4.266667 10.666667-10.666667 10.666667H501.333333c-8.533333 0-17.066667 4.266667-23.466666 10.666667l-89.6 93.866666V768c0-17.066667-14.933333-32-32-32H170.666667c-6.4 0-10.666667-4.266667-10.666667-10.666667V213.333333c0-6.4 4.266667-10.666667 10.666667-10.666666h682.666666c6.4 0 10.666667 4.266667 10.666667 10.666666v512z&quot; fill=&quot;#0e6eb8&quot; p-id=&quot;1583&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M512 490.666667H298.666667c-17.066667 0-32 14.933333-32 32S281.6 554.666667 298.666667 554.666667h213.333333c17.066667 0 32-14.933333 32-32S529.066667 490.666667 512 490.666667zM672 341.333333H298.666667c-17.066667 0-32 14.933333-32 32S281.6 405.333333 298.666667 405.333333h373.333333c17.066667 0 32-14.933333 32-32s-14.933333-32-32-32z&quot; fill=&quot;#0e6eb8&quot; p-id=&quot;1584&quot;&gt;&lt;/path&gt;&lt;/svg&gt;`</span>,<br>    <span class="hljs-attr">success</span>: <span class="hljs-string">`&lt;svg t=&quot;1713405224326&quot; class=&quot;icon&quot; viewBox=&quot;0 0 1024 1024&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; p-id=&quot;2225&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;path d=&quot;M512 74.666667C270.933333 74.666667 74.666667 270.933333 74.666667 512S270.933333 949.333333 512 949.333333 949.333333 753.066667 949.333333 512 753.066667 74.666667 512 74.666667z m0 810.666666c-204.8 0-373.333333-168.533333-373.333333-373.333333S307.2 138.666667 512 138.666667 885.333333 307.2 885.333333 512 716.8 885.333333 512 885.333333z&quot; fill=&quot;#1a9e2c&quot; p-id=&quot;2226&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M701.866667 381.866667L448 637.866667 322.133333 512c-12.8-12.8-32-12.8-44.8 0-12.8 12.8-12.8 32 0 44.8l149.333334 149.333333c6.4 6.4 14.933333 8.533333 23.466666 8.533334s17.066667-2.133333 23.466667-8.533334l277.333333-277.333333c12.8-12.8 12.8-32 0-44.8-14.933333-12.8-36.266667-12.8-49.066666-2.133333z&quot; fill=&quot;#1a9e2c&quot; p-id=&quot;2227&quot;&gt;&lt;/path&gt;&lt;/svg&gt;`</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> autolog = &#123;<br>    <span class="hljs-title function_">log</span>(<span class="hljs-params">text, type = <span class="hljs-string">&quot;&quot;</span>, time = <span class="hljs-number">2500</span></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> type === <span class="hljs-string">&quot;number&quot;</span>) &#123;<br>            time = type;<br>            type = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">let</span> mainEl = <span class="hljs-title function_">getMainElement</span>();<br>        <span class="hljs-keyword">let</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;span&quot;</span>);<br>        el.<span class="hljs-property">className</span> = <span class="hljs-string">`autolog-<span class="hljs-subst">$&#123;type&#125;</span>`</span>;<br>        el.<span class="hljs-property">innerHTML</span> = svgIcons[type] + text;<br>        mainEl.<span class="hljs-title function_">appendChild</span>(el);<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            el.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;hide&quot;</span>);<br>        &#125;, time - <span class="hljs-number">500</span>);<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            mainEl.<span class="hljs-title function_">removeChild</span>(el);<br>            el = <span class="hljs-literal">null</span>;<br>        &#125;, time);<br>    &#125;,<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getMainElement</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> mainEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#autolog&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!mainEl) &#123;<br>        mainEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>        mainEl.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;autolog&quot;</span>;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(mainEl);<br>        <span class="hljs-keyword">let</span> style = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;style&quot;</span>);<br>        style.<span class="hljs-property">innerHTML</span> = cssStr;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">insertBefore</span>(style, <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-property">firstChild</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> mainEl;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> autolog;<br></code></pre></td></tr></table></figure><h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><h3 id="svg基础知识"><a href="#svg基础知识" class="headerlink" title="svg基础知识"></a>svg基础知识</h3><p>svg基础知识可以参考这篇文章</p><p><a href="https://juejin.cn/post/7124312346947764260#heading-19">https://juejin.cn/post/7124312346947764260#heading-19</a></p><h3 id="矩形、折线、多边形折线绘制"><a href="#矩形、折线、多边形折线绘制" class="headerlink" title="矩形、折线、多边形折线绘制"></a>矩形、折线、多边形折线绘制</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>SVG Drawing with Guides<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    svg &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">      <span class="hljs-attribute">cursor</span>: crosshair;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#tool</span> &#123;</span><br><span class="language-css">      <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.active</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tool&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-type</span>=<span class="hljs-string">&quot;rect&quot;</span>&gt;</span>矩形<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-type</span>=<span class="hljs-string">&quot;polyline&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>折线<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-type</span>=<span class="hljs-string">&quot;polygon&quot;</span>&gt;</span>多边形<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;drawingArea&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;600&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;guideX&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;#ccc&quot;</span> <span class="hljs-attr">stroke-dasharray</span>=<span class="hljs-string">&quot;5,5&quot;</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;600&quot;</span> <span class="hljs-attr">visibility</span>=<span class="hljs-string">&quot;hidden&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;guideY&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;#ccc&quot;</span> <span class="hljs-attr">stroke-dasharray</span>=<span class="hljs-string">&quot;5,5&quot;</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">visibility</span>=<span class="hljs-string">&quot;hidden&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShapeDrawer</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">constructor</span>(<span class="hljs-params">svgElement</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span> = svgElement;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;guideX&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;guideY&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isDrawing</span> = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span> = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span> = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">points</span> = [];</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousedown&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseDown</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseMove</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseUp</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-title function_">handleMouseDown</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (event.<span class="hljs-property">button</span> !== <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// Ignore non-left clicks</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isDrawing</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span> = event.<span class="hljs-property">offsetX</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span> = event.<span class="hljs-property">offsetY</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;rect&#x27;</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElementNS</span>(<span class="hljs-string">&#x27;http://www.w3.org/2000/svg&#x27;</span>, <span class="hljs-string">&#x27;rect&#x27;</span>);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span>);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span>);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;width&#x27;</span>, <span class="hljs-number">0</span>);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;height&#x27;</span>, <span class="hljs-number">0</span>);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;stroke&#x27;</span>, <span class="hljs-string">&#x27;black&#x27;</span>);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;fill&#x27;</span>, <span class="hljs-string">&#x27;transparent&#x27;</span>);</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;polyline&#x27;</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">points</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">x</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span>, <span class="hljs-attr">y</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span> &#125;);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElementNS</span>(<span class="hljs-string">&#x27;http://www.w3.org/2000/svg&#x27;</span>, <span class="hljs-string">&#x27;polyline&#x27;</span>);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;points&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">points</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">point</span> =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;point.x&#125;</span>,<span class="hljs-subst">$&#123;point.y&#125;</span>`</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; &#x27;</span>));</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;stroke&#x27;</span>, <span class="hljs-string">&#x27;black&#x27;</span>);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;fill&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>);</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;polygon&#x27;</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">points</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">x</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span>, <span class="hljs-attr">y</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span> &#125;);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElementNS</span>(<span class="hljs-string">&#x27;http://www.w3.org/2000/svg&#x27;</span>, <span class="hljs-string">&#x27;polygon&#x27;</span>);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;points&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">points</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">point</span> =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;point.x&#125;</span>,<span class="hljs-subst">$&#123;point.y&#125;</span>`</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; &#x27;</span>));</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;stroke&#x27;</span>, <span class="hljs-string">&#x27;black&#x27;</span>);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;fill&#x27;</span>, <span class="hljs-string">&#x27;transparent&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;x1&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;x2&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;visible&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;y1&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;y2&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;visible&#x27;</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-title function_">handleMouseMove</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">isDrawing</span>) <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> currentX = event.<span class="hljs-property">offsetX</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> currentY = event.<span class="hljs-property">offsetY</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;rect&#x27;</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> width = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(currentX - <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span>);</span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> height = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(currentY - <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span>);</span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span>, currentX);</span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> y = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span>, currentY);</span><br><span class="language-javascript"></span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;x&#x27;</span>, x);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;y&#x27;</span>, y);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;width&#x27;</span>, width);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;height&#x27;</span>, height);</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;polyline&#x27;</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">points</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">x</span>: currentX, <span class="hljs-attr">y</span>: currentY &#125;);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;points&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">points</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">point</span> =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;point.x&#125;</span>,<span class="hljs-subst">$&#123;point.y&#125;</span>`</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; &#x27;</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;polygon&#x27;</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">points</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">x</span>: currentX, <span class="hljs-attr">y</span>: currentY &#125;);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;points&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">points</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">point</span> =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;point.x&#125;</span>,<span class="hljs-subst">$&#123;point.y&#125;</span>`</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; &#x27;</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">          <span class="hljs-comment">// 更新当前鼠标位置作为新的点</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> currentX = event.<span class="hljs-property">offsetX</span>;</span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> currentY = event.<span class="hljs-property">offsetY</span>;</span><br><span class="language-javascript">          <span class="hljs-comment">// 将当前点添加到点集合中</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">points</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">x</span>: currentX, <span class="hljs-attr">y</span>: currentY &#125;);</span><br><span class="language-javascript">          <span class="hljs-comment">// 更新 polygon 的 points 属性</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;points&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">points</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">point</span> =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;point.x&#125;</span>,<span class="hljs-subst">$&#123;point.y&#125;</span>`</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; &#x27;</span>));</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;x1&#x27;</span>, currentX);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;x2&#x27;</span>, currentX);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;y1&#x27;</span>, currentY);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;y2&#x27;</span>, currentY);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-title function_">handleMouseUp</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (event.<span class="hljs-property">button</span> !== <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// Ignore non-left clicks</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isDrawing</span> = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;hidden&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;hidden&#x27;</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> drawingArea = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;drawingArea&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> drawer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShapeDrawer</span>(drawingArea);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// Example usage</span></span><br><span class="language-javascript">    drawer.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;polyline&#x27;</span>; <span class="hljs-comment">// Change this to &#x27;polyline&#x27; or &#x27;polygon&#x27; to draw different shapes</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;tool&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 检查点击的元素是否是 span</span></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (event.<span class="hljs-property">target</span>.<span class="hljs-property">tagName</span> === <span class="hljs-string">&#x27;SPAN&#x27;</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 移除所有 span 的 active 类</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;#tool span&#x27;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">s</span> =&gt;</span> s.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;active&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-comment">// 为当前点击的 span 添加 active 类</span></span><br><span class="language-javascript">        event.<span class="hljs-property">target</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 获取点击的 span 的类型数据</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> type = event.<span class="hljs-property">target</span>.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-type&#x27;</span>);</span><br><span class="language-javascript">        drawer.<span class="hljs-property">type</span> = type</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="线段绘制"><a href="#线段绘制" class="headerlink" title="线段绘制"></a>线段绘制</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>SVG Drawing with Guides<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    svg &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">      <span class="hljs-attribute">cursor</span>: crosshair;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;drawingArea&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;600&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;guideX&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;#ccc&quot;</span> <span class="hljs-attr">stroke-dasharray</span>=<span class="hljs-string">&quot;5,5&quot;</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;600&quot;</span> <span class="hljs-attr">visibility</span>=<span class="hljs-string">&quot;hidden&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;guideY&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;#ccc&quot;</span> <span class="hljs-attr">stroke-dasharray</span>=<span class="hljs-string">&quot;5,5&quot;</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">visibility</span>=<span class="hljs-string">&quot;hidden&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShapeDrawer</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">constructor</span>(<span class="hljs-params">svgElement</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span> = svgElement;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;guideX&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;guideY&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isDrawing</span> = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span> = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span> = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousedown&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseDown</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-title function_">handleMouseDown</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (event.<span class="hljs-property">button</span> !== <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// Ignore non-left clicks</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isDrawing</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span> = event.<span class="hljs-property">clientX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">left</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span> = event.<span class="hljs-property">clientY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElementNS</span>(<span class="hljs-string">&#x27;http://www.w3.org/2000/svg&#x27;</span>, <span class="hljs-string">&#x27;line&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;x1&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;y1&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;stroke&#x27;</span>, <span class="hljs-string">&#x27;black&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">       </span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;x1&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;x2&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;visible&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;y1&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;y2&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;visible&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseMove</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseUp</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-title function_">handleMouseMove</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">isDrawing</span>) <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> currentX = event.<span class="hljs-property">clientX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">left</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> currentY = event.<span class="hljs-property">clientY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;x2&#x27;</span>, currentX);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;y2&#x27;</span>, currentY);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;x1&#x27;</span>, currentX);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;x2&#x27;</span>, currentX);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;y1&#x27;</span>, currentY);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;y2&#x27;</span>, currentY);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-title function_">handleMouseUp</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (event.<span class="hljs-property">button</span> !== <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// Ignore non-left clicks</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isDrawing</span> = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseMove</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseUp</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;hidden&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;hidden&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span> = <span class="hljs-literal">null</span>; </span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> drawingArea = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;drawingArea&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> drawer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShapeDrawer</span>(drawingArea);</span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="多边形绘制"><a href="#多边形绘制" class="headerlink" title="多边形绘制"></a>多边形绘制</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>SVG Drawing with Guides<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    svg &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">      <span class="hljs-attribute">cursor</span>: crosshair;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;drawingArea&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;600&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;guideX&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;#ccc&quot;</span> <span class="hljs-attr">stroke-dasharray</span>=<span class="hljs-string">&quot;5,5&quot;</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;600&quot;</span> <span class="hljs-attr">visibility</span>=<span class="hljs-string">&quot;hidden&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;guideY&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;#ccc&quot;</span> <span class="hljs-attr">stroke-dasharray</span>=<span class="hljs-string">&quot;5,5&quot;</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">visibility</span>=<span class="hljs-string">&quot;hidden&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShapeDrawer</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">constructor</span>(<span class="hljs-params">svgElement</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span> = svgElement;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;guideX&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;guideY&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isDrawing</span> = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span> = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span> = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">polygonArray</span> = []</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastIndex</span> = <span class="hljs-number">0</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousedown&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseDown</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleClick</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseMove</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseUp</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;dblclick&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleDblclick</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));</span><br><span class="language-javascript">        <span class="hljs-comment">// 创建多边形 </span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createdShape</span>()</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">createdShape</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElementNS</span>(<span class="hljs-string">&#x27;http://www.w3.org/2000/svg&#x27;</span>, <span class="hljs-string">&#x27;polyline&#x27;</span>)</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;stroke&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>);</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;fill&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-title function_">handleMouseDown</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (event.<span class="hljs-property">button</span> !== <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>; </span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isDrawing</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span> = event.<span class="hljs-property">clientX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">left</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span> = event.<span class="hljs-property">clientY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;x1&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;x2&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">startX</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;visible&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;y1&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;y2&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">startY</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;visible&#x27;</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-title function_">handleClick</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">isDrawing</span>) <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">       </span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> currentX = event.<span class="hljs-property">clientX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">left</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> currentY = event.<span class="hljs-property">clientY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">// 保存到多边形数组中</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">polygonArray</span>.<span class="hljs-title function_">push</span>(&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">x</span>: currentX,</span><br><span class="language-javascript">          <span class="hljs-attr">y</span>: currentY</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastIndex</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">polygonArray</span>.<span class="hljs-property">length</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;points&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">polygonArray</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">point</span> =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;point.x&#125;</span>,<span class="hljs-subst">$&#123;point.y&#125;</span>`</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; &#x27;</span>));</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 双击结束</span></span><br><span class="language-javascript">      <span class="hljs-title function_">handleDblclick</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isDrawing</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span> = <span class="hljs-literal">null</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">polygonArray</span> = []</span><br><span class="language-javascript">        <span class="hljs-comment">// 创建多边形 </span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createdShape</span>()</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-title function_">handleMouseMove</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">isDrawing</span>) <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">polygonArray</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span> ) <span class="hljs-keyword">return</span> </span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> currentX = event.<span class="hljs-property">clientX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">left</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> currentY = event.<span class="hljs-property">clientY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">svg</span>.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 移动过程中动态更新折线</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">polygonArray</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">lastIndex</span>] = &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">x</span>: currentX,</span><br><span class="language-javascript">          <span class="hljs-attr">y</span>: currentY</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">shape</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;points&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">polygonArray</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">point</span> =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;point.x&#125;</span>,<span class="hljs-subst">$&#123;point.y&#125;</span>`</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; &#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;x1&#x27;</span>, currentX);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;x2&#x27;</span>, currentX);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;visible&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;y1&#x27;</span>, currentY);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;y2&#x27;</span>, currentY);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;visible&#x27;</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-title function_">handleMouseUp</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (event.<span class="hljs-property">button</span> !== <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>; </span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseMove</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleMouseUp</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideX</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;hidden&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">guideY</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;visibility&#x27;</span>, <span class="hljs-string">&#x27;hidden&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> drawingArea = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;drawingArea&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> drawer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShapeDrawer</span>(drawingArea);</span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="相关库推荐"><a href="#相关库推荐" class="headerlink" title="相关库推荐"></a>相关库推荐</h3><p><strong>svg</strong></p><ul><li><p><strong>Snap.svg</strong></p><ul><li>官网：<a href="http://snapsvg.io/">http://snapsvg.io</a></li><li>特点：轻量级 SVG 操作库，支持动画、路径操作、事件绑定。</li><li>适用场景：简单的 SVG 动态效果（如路径动画、图形变换）。</li></ul></li><li><p><strong>GreenSock (GSAP)</strong></p><ul><li><p>官网：<a href="https://greensock.com/gsap">https://greensock.com/gsap</a></p></li><li><p>特点：专业级动画库，支持 SVG 属性动画、路径动画、复杂时间轴。</p></li><li><p>适用场景：高性能复杂动画（如网页 Banner、交互式动画）。</p></li><li><p><strong>Rough.js</strong></p></li><li><p>官网：<a href="https://roughjs.com/">https://roughjs.com</a></p></li><li><p>特点：生成手绘风格的 SVG 图形，支持草图效果。</p></li></ul></li></ul><p><strong>canvas</strong></p><ul><li><strong>Konva.js</strong><ul><li>官网：<a href="https://konvajs.org/">https://konvajs.org</a></li><li>特点：高性能 Canvas 库，支持图层、事件、动画和复杂图形操作。</li><li>适用场景：交互式画布应用（如绘图工具、流程图）。</li></ul></li><li><strong>Fabric.js</strong><ul><li>官网：<a href="http://fabricjs.com/">http://fabricjs.com</a></li><li>特点：功能丰富的 Canvas 库，支持对象操作、序列化、图像滤镜。</li><li>适用场景：图形编辑器（如在线设计工具、图片标注）。</li></ul></li><li><strong>PixiJS</strong><ul><li>官网：<a href="https://pixijs.com/">https://pixijs.com</a></li><li>特点：专注于 2D 渲染的引擎，支持 WebGL 和 Canvas 双模式。</li><li>适用场景：网页游戏、高性能动画。</li></ul></li></ul><h2 id="前端加密方式汇总"><a href="#前端加密方式汇总" class="headerlink" title="前端加密方式汇总"></a>前端加密方式汇总</h2><p>参考资料：<a href="https://blog.csdn.net/sinat_36728518/article/details/139258871">https://blog.csdn.net/sinat_36728518/article/details/139258871</a></p><p>jsencrypt  非对称加密</p><h2 id="大数据虚拟滚动加载"><a href="#大数据虚拟滚动加载" class="headerlink" title="大数据虚拟滚动加载"></a>大数据虚拟滚动加载</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>scroll<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.v-scroll</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">            <span class="hljs-attribute">overflow-y</span>: scroll;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;v-scroll&quot;</span> @<span class="hljs-attr">scroll</span>=<span class="hljs-string">&quot;doScroll&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;scrollBox&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;blankStyle&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in currentList&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>                    &#123;&#123; item &#125;&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> &#123; createApp, ref, onMounted, computed &#125; = <span class="hljs-title class_">Vue</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">createApp</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> allList = <span class="hljs-title function_">ref</span>([]);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-title function_">getAllList</span>(<span class="hljs-number">3000</span>); </span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">function</span> <span class="hljs-title function_">getAllList</span>(<span class="hljs-params">count</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">const</span> length = allList.<span class="hljs-property">value</span>.<span class="hljs-property">length</span>;</span><br><span class="language-javascript">                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;</span><br><span class="language-javascript">                        allList.<span class="hljs-property">value</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">`我是列表<span class="hljs-subst">$&#123;length + i + <span class="hljs-number">1</span>&#125;</span>项`</span>)</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> scrollBox = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> boxHeight = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">function</span> <span class="hljs-title function_">getScrollBoxHeight</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    boxHeight.<span class="hljs-property">value</span> = scrollBox.<span class="hljs-property">value</span>.<span class="hljs-property">clientHeight</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-title function_">getScrollBoxHeight</span>();</span><br><span class="language-javascript">                    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = getScrollBoxHeight;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onorientationchange</span> = getScrollBoxHeight;</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> itemHiehgt = <span class="hljs-title function_">ref</span>(<span class="hljs-number">40</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> itemNum = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> ~~(boxHeight.<span class="hljs-property">value</span> / itemHiehgt.<span class="hljs-property">value</span>) + <span class="hljs-number">2</span>;</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> startIndex = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> doScroll = _.<span class="hljs-title function_">throttle</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">const</span> index = ~~(scrollBox.<span class="hljs-property">value</span>.<span class="hljs-property">scrollTop</span> / itemHiehgt.<span class="hljs-property">value</span>);</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (index === startIndex.<span class="hljs-property">value</span>) <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">                    startIndex.<span class="hljs-property">value</span> = index;</span><br><span class="language-javascript">                &#125;, <span class="hljs-number">200</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> endIndex = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">let</span> index = startIndex.<span class="hljs-property">value</span> + itemNum.<span class="hljs-property">value</span> * <span class="hljs-number">2</span>;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (!allList.<span class="hljs-property">value</span>[index]) &#123;</span><br><span class="language-javascript">                        index = allList.<span class="hljs-property">value</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> index;</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> currentList = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (startIndex.<span class="hljs-property">value</span> &lt;= itemNum.<span class="hljs-property">value</span>) &#123;</span><br><span class="language-javascript">                        index = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">                    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                        index = startIndex.<span class="hljs-property">value</span> - itemNum.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index, endIndex.<span class="hljs-property">value</span> + <span class="hljs-number">1</span>)</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> allList.<span class="hljs-property">value</span>.<span class="hljs-title function_">slice</span>(index, endIndex.<span class="hljs-property">value</span> + <span class="hljs-number">1</span>);</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> blankStyle = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (startIndex.<span class="hljs-property">value</span> &lt;= itemNum.<span class="hljs-property">value</span>) &#123;</span><br><span class="language-javascript">                        index = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">                    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                        index = startIndex.<span class="hljs-property">value</span> - itemNum.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">paddingTop</span>: index * itemHiehgt.<span class="hljs-property">value</span> + <span class="hljs-string">&quot;px&quot;</span>,</span><br><span class="language-javascript"></span><br><span class="language-javascript">                        <span class="hljs-attr">paddingBottom</span>: (allList.<span class="hljs-property">value</span>.<span class="hljs-property">length</span> - endIndex.<span class="hljs-property">value</span> - <span class="hljs-number">1</span>) * itemHiehgt.<span class="hljs-property">value</span> + <span class="hljs-string">&quot;px&quot;</span>           </span><br><span class="language-javascript">                    &#125;;</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                    allList,</span><br><span class="language-javascript">                    currentList,</span><br><span class="language-javascript">                    boxHeight,</span><br><span class="language-javascript">                    itemHiehgt,</span><br><span class="language-javascript">                    scrollBox,</span><br><span class="language-javascript">                    doScroll,</span><br><span class="language-javascript">                    blankStyle</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="前端接口防止重复请求实现方案"><a href="#前端接口防止重复请求实现方案" class="headerlink" title="前端接口防止重复请求实现方案"></a>前端接口防止重复请求实现方案</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs HTML">import axios from &quot;axios&quot;<br><br>let instance = axios.create(&#123;<br>    baseURL: &quot;/api/&quot;<br>&#125;)<br><br>// 发布订阅<br>class EventEmitter &#123;<br>    constructor() &#123;<br>        this.event = &#123;&#125;<br>    &#125;<br>    on(type, cbres, cbrej) &#123;<br>        if (!this.event[type]) &#123;<br>            this.event[type] = [[cbres, cbrej]]<br>        &#125; else &#123;<br>            this.event[type].push([cbres, cbrej])<br>        &#125;<br>    &#125;<br><br>    emit(type, res, ansType) &#123;<br>        if (!this.event[type]) return<br>        else &#123;<br>            this.event[type].forEach(cbArr =&gt; &#123;<br>                if(ansType === &#x27;resolve&#x27;) &#123;<br>                    cbArr[0](res)<br>                &#125;else&#123;<br>                    cbArr[1](res)<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br>// 根据请求生成对应的key<br>function generateReqKey(config, hash) &#123;<br>    const &#123; method, url, params, data &#125; = config;<br>    return [method, url, JSON.stringify(params), JSON.stringify(data), hash].join(&quot;&amp;&quot;);<br>&#125;<br><br>// 存储已发送但未响应的请求<br>const pendingRequest = new Set();<br>// 发布订阅容器<br>const ev = new EventEmitter()<br><br>// 添加请求拦截器<br>instance.interceptors.request.use(async (config) =&gt; &#123;<br>    let hash = location.hash<br>    // 生成请求Key<br>    let reqKey = generateReqKey(config, hash)<br>    <br>    if(pendingRequest.has(reqKey)) &#123;<br>        // 如果是相同请求,在这里将请求挂起，通过发布订阅来为该请求返回结果<br>        // 这里需注意，拿到结果后，无论成功与否，都需要return Promise.reject()来中断这次请求，否则请求会正常发送至服务器<br>        let res = null<br>        try &#123;<br>            // 接口成功响应<br>          res = await new Promise((resolve, reject) =&gt; &#123;<br>                    ev.on(reqKey, resolve, reject)<br>                &#125;)<br>          return Promise.reject(&#123;<br>                    type: &#x27;limiteResSuccess&#x27;,<br>                    val: res<br>                &#125;)<br>        &#125;catch(limitFunErr) &#123;<br>            // 接口报错<br>            return Promise.reject(&#123;<br>                        type: &#x27;limiteResError&#x27;,<br>                        val: limitFunErr<br>                    &#125;)<br>        &#125;<br>    &#125;else&#123;<br>        // 将请求的key保存在config<br>        config.pendKey = reqKey<br>        pendingRequest.add(reqKey)<br>    &#125;<br><br>    return config;<br>  &#125;, function (error) &#123;<br>    return Promise.reject(error);<br>  &#125;);<br><br>// 添加响应拦截器<br>instance.interceptors.response.use(function (response) &#123;<br>    // 将拿到的结果发布给其他相同的接口<br>    handleSuccessResponse_limit(response)<br>    return response;<br>  &#125;, function (error) &#123;<br>    return handleErrorResponse_limit(error)<br>  &#125;);<br><br>// 接口响应成功<br>function handleSuccessResponse_limit(response) &#123;<br>      const reqKey = response.config.pendKey<br>    if(pendingRequest.has(reqKey)) &#123;<br>      let x = null<br>      try &#123;<br>        x = JSON.parse(JSON.stringify(response))<br>      &#125;catch(e) &#123;<br>        x = response<br>      &#125;<br>      pendingRequest.delete(reqKey)<br>      ev.emit(reqKey, x, &#x27;resolve&#x27;)<br>      delete ev.event[reqKey]<br>    &#125;<br>&#125;<br><br>// 接口走失败响应<br>function handleErrorResponse_limit(error) &#123;<br>    if(error.type &amp;&amp; error.type === &#x27;limiteResSuccess&#x27;) &#123;<br>      return Promise.resolve(error.val)<br>    &#125;else if(error.type &amp;&amp; error.type === &#x27;limiteResError&#x27;) &#123;<br>      return Promise.reject(error.val);<br>    &#125;else&#123;<br>      const reqKey = error.config.pendKey<br>      if(pendingRequest.has(reqKey)) &#123;<br>        let x = null<br>        try &#123;<br>          x = JSON.parse(JSON.stringify(error))<br>        &#125;catch(e) &#123;<br>          x = error<br>        &#125;<br>        pendingRequest.delete(reqKey)<br>        ev.emit(reqKey, x, &#x27;reject&#x27;)<br>        delete ev.event[reqKey]<br>      &#125;<br>    &#125;<br>      return Promise.reject(error);<br>&#125;<br><br>export default instance;<br></code></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>参考资料：</p><p>queueMicrotask: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide">https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide</a></p><p>手写Promise参考： <a href="https://juejin.cn/post/7426319570813075475#heading-4">https://juejin.cn/post/7426319570813075475#heading-4</a></p><h3 id="1-queueMicrotask"><a href="#1-queueMicrotask" class="headerlink" title="1.queueMicrotask"></a>1.queueMicrotask</h3><p>在Promise的封装中，resolve和reject函数中，使用到了微任务 queuemicrotask</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">queueMicrotask</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-comment">// ...</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>2.手写参考</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PROMISE_STATUS_PENDING</span> = <span class="hljs-string">&#x27;pending&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PROMISE_STATUS_FULFILLED</span> = <span class="hljs-string">&#x27;fulfilled&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PROMISE_STATUS_REJECTED</span> = <span class="hljs-string">&#x27;rejected&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 工具函数</span></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">execFunctionWithCatchError</span>(<span class="hljs-params">execFn, value, resolve, reject</span>) &#123;</span><br><span class="language-javascript">  <span class="hljs-keyword">try</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">execFn</span>(value)</span><br><span class="language-javascript">    <span class="hljs-title function_">resolve</span>(result)</span><br><span class="language-javascript">  &#125; <span class="hljs-keyword">catch</span>(err) &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">reject</span>(err)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPromise</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">executor</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">PROMISE_STATUS_PENDING</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-literal">undefined</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span> = <span class="hljs-literal">undefined</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">onFulfilledFns</span> = []</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedFns</span> = []</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">resolve</span> = (<span class="hljs-params">value</span>) =&gt; &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">PROMISE_STATUS_PENDING</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 添加微任务</span></span><br><span class="language-javascript">        <span class="hljs-title function_">queueMicrotask</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> !== <span class="hljs-variable constant_">PROMISE_STATUS_PENDING</span>) <span class="hljs-keyword">return</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">PROMISE_STATUS_FULFILLED</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">onFulfilledFns</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">fn</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)</span><br><span class="language-javascript">          &#125;)</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">reject</span> = (<span class="hljs-params">reason</span>) =&gt; &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">PROMISE_STATUS_PENDING</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 添加微任务</span></span><br><span class="language-javascript">        <span class="hljs-title function_">queueMicrotask</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> !== <span class="hljs-variable constant_">PROMISE_STATUS_PENDING</span>) <span class="hljs-keyword">return</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">PROMISE_STATUS_REJECTED</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span> = reason</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedFns</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">fn</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>)</span><br><span class="language-javascript">          &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">executor</span>(resolve, reject)</span><br><span class="language-javascript">    &#125; <span class="hljs-keyword">catch</span> (err) &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">reject</span>(err)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title function_">then</span>(<span class="hljs-params">onFulfilled, onRejected</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPromise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 1.如果在then调用的时候, 状态已经确定下来</span></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">PROMISE_STATUS_FULFILLED</span> &amp;&amp; onFulfilled) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">execFunctionWithCatchError</span>(onFulfilled, <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, resolve, reject)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">PROMISE_STATUS_REJECTED</span> &amp;&amp; onRejected) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">execFunctionWithCatchError</span>(onRejected, <span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>, resolve, reject)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 2.将成功回调和失败的回调放到数组中</span></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">PROMISE_STATUS_PENDING</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">onFulfilledFns</span>.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">execFunctionWithCatchError</span>(onFulfilled, <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, resolve, reject)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedFns</span>.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">execFunctionWithCatchError</span>(onRejected, <span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>, resolve, reject)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPromise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1111</span>) <span class="hljs-comment">// resolved/fulfilled</span></span><br><span class="language-javascript">  <span class="hljs-comment">// reject(2222)</span></span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// // 调用then方法多次调用</span></span><br><span class="language-javascript"><span class="hljs-comment">// promise.then(res =&gt; &#123;</span></span><br><span class="language-javascript"><span class="hljs-comment">//   console.log(&quot;res1:&quot;, res)</span></span><br><span class="language-javascript"><span class="hljs-comment">//   return &quot;aaaa&quot;</span></span><br><span class="language-javascript"><span class="hljs-comment">//   // throw new Error(&quot;err message&quot;)</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#125;, err =&gt; &#123;</span></span><br><span class="language-javascript"><span class="hljs-comment">//   console.log(&quot;err1:&quot;, err)</span></span><br><span class="language-javascript"><span class="hljs-comment">//   return &quot;bbbbb&quot;</span></span><br><span class="language-javascript"><span class="hljs-comment">//   // throw new Error(&quot;err message&quot;)</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#125;).then(res =&gt; &#123;</span></span><br><span class="language-javascript"><span class="hljs-comment">//   console.log(&quot;res2:&quot;, res)</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#125;, err =&gt; &#123;</span></span><br><span class="language-javascript"><span class="hljs-comment">//   console.log(&quot;err2:&quot;, err)</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#125;)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h3><p>发布订阅模式可以解决不同模块之间的通信。比如签到模块和消息列表模块，它们在两个不同组件，当我点击签到后，消息列表模块接收到指令，调用接口，获取最新的消息列表。</p><p>发布订阅的设计实现是：</p><p>全局创建一个对象，用于保存每次推送的函数</p><p>1.订阅方法：每一个订阅方法的key就是事件名称，value值是一个数组，将函数保存在创建的对象数组中</p><p>2.推送方法就是循环遍历并且调用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PubSub</span> &#123;<br>      <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">subscribers</span> = &#123;&#125;;<br>      &#125;<br><br>      <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">eventName, callback</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">subscribers</span>[eventName]) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">subscribers</span>[eventName] = [];<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">subscribers</span>[eventName].<span class="hljs-title function_">push</span>(callback);<br>      &#125;<br><br>      <span class="hljs-title function_">publish</span>(<span class="hljs-params">eventName, data</span>) &#123;<br>        <span class="hljs-keyword">const</span> callbacks = <span class="hljs-variable language_">this</span>.<span class="hljs-property">subscribers</span>[eventName];<br>        <span class="hljs-keyword">if</span> (callbacks) &#123;<br>          callbacks.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">callback</span> =&gt;</span> <span class="hljs-title function_">callback</span>(data));<br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">subscribers</span>)<br>      &#125;<br><br>      <span class="hljs-title function_">unsubscribe</span>(<span class="hljs-params">eventName, callback</span>) &#123;<br>        <span class="hljs-keyword">const</span> callbacks = <span class="hljs-variable language_">this</span>.<span class="hljs-property">subscribers</span>[eventName];<br>        <span class="hljs-keyword">if</span> (callbacks) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">subscribers</span>[eventName] = callbacks.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">cb</span> =&gt;</span> cb !== callback);<br>        &#125;<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 订单创建事件处理</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">callback</span> = (<span class="hljs-params">order</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(order, <span class="hljs-string">&#x27;更新成功&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// （订阅）商品管理模块订阅订单创建事件并处理库存</span><br>pubSub.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;orderCreated&#x27;</span>, callback);<br><br><span class="hljs-comment">// 发布事件</span><br>pubSub.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;orderCreated&#x27;</span>, <span class="hljs-string">&#x27;订单创建成功&#x27;</span>);<br><br><span class="hljs-comment">// 取消订阅</span><br>pubSub.<span class="hljs-title function_">unsubscribe</span>(<span class="hljs-string">&#x27;orderCreated&#x27;</span>, callback);<br></code></pre></td></tr></table></figure><h2 id="判断DOM结构更新-MutationObserver"><a href="#判断DOM结构更新-MutationObserver" class="headerlink" title="判断DOM结构更新 MutationObserver"></a>判断DOM结构更新 <strong>MutationObserver</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">MutationObserver</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<span class="hljs-comment">//判断浏览器支不支持</span><br>        <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutationObserver</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">let</span> res = <span class="hljs-title function_">fn</span>()<br>          <span class="hljs-keyword">if</span> (res <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>) &#123;<br>            res.<span class="hljs-title function_">then</span>(resolve)<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">resolve</span>()<br>          &#125;<br>         <br>        &#125;)<br><br>        observer.<span class="hljs-title function_">observe</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>),&#123;<br>            <span class="hljs-attr">childList</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 观察目标子节点的变化，是否有添加或者删除</span><br>            <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 观察属性变动</span><br>            <span class="hljs-attr">subtree</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 观察后代节点，默认为 false</span><br>        &#125;)<br>      &#125;<br></code></pre></td></tr></table></figure><h2 id="websocket和sse"><a href="#websocket和sse" class="headerlink" title="websocket和sse"></a>websocket和sse</h2><h3 id="1-websocket"><a href="#1-websocket" class="headerlink" title="1.websocket"></a>1.websocket</h3><h3 id="查看文档"><a href="#查看文档" class="headerlink" title="查看文档"></a><a href="https://ch380.github.io/2024/06/09/content/nodejs/nodejs/#websocket">查看文档</a></h3><h3 id="2-sse"><a href="#2-sse" class="headerlink" title="2.sse"></a>2.sse</h3><p><strong>Server-Sent Events</strong> SSE 是单向通道，只能服务器向浏览器发送</p><p><code>EventSource</code> 是浏览器提供的 JavaScript API，用于实现 服务器推送事件（Server-Sent Events, SSE） 的客户端功能。它允许浏览器通过 HTTP 连接持续接收来自服务器的实时数据流，适用于需要服务器主动向客户端推送更新的场景（如实时通知、数据监控等</p><p>SSE核心特性</p><p>特性说明单向通信仅支持服务器 → 客户端的单向通信基于 HTTP使用普通 HTTP 协议，无需特殊协议升级自动重连连接中断时自动尝试重新连接轻量级API 简单易用，适合高频次、低数据量的场景文本协议数据传输格式为纯文本（支持 JSON 等格式解析）</p><p>SSE示例</p><p>html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;messages&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 创建 SSE 连接</span></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> eventSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventSource</span>(<span class="hljs-string">&#x27;/sse&#x27;</span>, &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 配置选项</span></span><br><span class="language-javascript">    <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 携带认证信息</span></span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 通用事件处理器</span></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleEvent</span> = (<span class="hljs-params">eventName</span>) =&gt; <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(e.<span class="hljs-property">data</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    element.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">      &lt;h3&gt;<span class="hljs-subst">$&#123;eventName&#125;</span> (<span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleTimeString()&#125;</span>)&lt;/h3&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">      &lt;pre&gt;<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(data, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>)&#125;</span>&lt;/pre&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">    `</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;messages&#x27;</span>).<span class="hljs-title function_">appendChild</span>(element)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 监听指定事件</span></span><br><span class="language-javascript">  eventSource.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;notice&#x27;</span>, <span class="hljs-title function_">handleEvent</span>(<span class="hljs-string">&#x27;系统通知&#x27;</span>))</span><br><span class="language-javascript">  eventSource.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;alert&#x27;</span>, <span class="hljs-title function_">handleEvent</span>(<span class="hljs-string">&#x27;重要警告&#x27;</span>))</span><br><span class="language-javascript">  eventSource.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;heartbeat&#x27;</span>, <span class="hljs-title function_">handleEvent</span>(<span class="hljs-string">&#x27;心跳检测&#x27;</span>))</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 错误处理</span></span><br><span class="language-javascript">  eventSource.<span class="hljs-property">onerror</span> = <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;SSE 连接错误:&#x27;</span>, err)</span><br><span class="language-javascript">    eventSource.<span class="hljs-title function_">close</span>()</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">// 自动重连（3秒后）</span></span><br><span class="language-javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">reload</span>(), <span class="hljs-number">3000</span>)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 自定义关闭逻辑</span></span><br><span class="language-javascript">  <span class="hljs-variable language_">window</span>.<span class="hljs-property">onbeforeunload</span> = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">    eventSource.<span class="hljs-title function_">close</span>()</span><br><span class="language-javascript">    navigator.<span class="hljs-title function_">sendBeacon</span>(<span class="hljs-string">&#x27;/sse/close&#x27;</span>, <span class="hljs-string">&#x27;用户离开页面&#x27;</span>)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Nodejs</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span><br><span class="hljs-keyword">import</span> cors <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cors&#x27;</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><span class="hljs-keyword">const</span> clients = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>() <span class="hljs-comment">// 客户端连接管理</span><br><br><span class="hljs-comment">// 中间件配置</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>(&#123;<br>  <span class="hljs-attr">origin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 允许所有来源</span><br>  <span class="hljs-attr">credentials</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">methods</span>: [<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]<br>&#125;))<br><br><span class="hljs-comment">// SSE 连接端点</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/sse&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 设置 SSE 响应头</span><br>  res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/event-stream&#x27;</span>,<br>    <span class="hljs-string">&#x27;Cache-Control&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>    <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,<br>    <span class="hljs-string">&#x27;X-Accel-Buffering&#x27;</span>: <span class="hljs-string">&#x27;no&#x27;</span> <span class="hljs-comment">// 禁用 Nginx 缓冲</span><br>  &#125;)<br><br>  <span class="hljs-comment">// 生成唯一客户端 ID</span><br>  <span class="hljs-keyword">const</span> clientId = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>).<span class="hljs-title function_">substr</span>(<span class="hljs-number">2</span>, <span class="hljs-number">8</span>)<br>  <br>  <span class="hljs-comment">// 初始握手消息</span><br>  <span class="hljs-title function_">sendSSE</span>(res, <span class="hljs-string">&#x27;handshake&#x27;</span>, &#123; <br>    clientId,<br>    <span class="hljs-attr">timestamp</span>: <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>  &#125;)<br><br>  <span class="hljs-comment">// 心跳检测（每 30 秒）</span><br>  <span class="hljs-keyword">const</span> heartbeat = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">sendSSE</span>(res, <span class="hljs-string">&#x27;heartbeat&#x27;</span>, &#123; <br>      <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;active&#x27;</span>,<br>      <span class="hljs-attr">clients</span>: clients.<span class="hljs-property">size</span><br>    &#125;)<br>  &#125;, <span class="hljs-number">30000</span>)<br><br>  <span class="hljs-comment">// 客户端断开处理</span><br>  req.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">clearInterval</span>(heartbeat)<br>    clients.<span class="hljs-title function_">delete</span>(clientId)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`客户端 <span class="hljs-subst">$&#123;clientId&#125;</span> 断开连接`</span>)<br>  &#125;)<br><br>  <span class="hljs-comment">// 保存连接</span><br>  clients.<span class="hljs-title function_">set</span>(clientId, res)<br>&#125;)<br><br><span class="hljs-comment">// 消息发送工具函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendSSE</span>(<span class="hljs-params">res, event, data</span>) &#123;<br>  <span class="hljs-keyword">const</span> payload = [<br>    <span class="hljs-string">`event: <span class="hljs-subst">$&#123;event&#125;</span>`</span>,<br>    <span class="hljs-string">`data: <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(data)&#125;</span>`</span>,<br>    <span class="hljs-string">`id: <span class="hljs-subst">$&#123;<span class="hljs-built_in">Date</span>.now()&#125;</span>`</span>,<br>    <span class="hljs-string">&#x27;retry: 5000&#x27;</span>, <span class="hljs-comment">// 重连间隔</span><br>    <span class="hljs-string">&#x27;\n&#x27;</span><br>  ].<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>  <br>  res.<span class="hljs-title function_">write</span>(payload)<br>  res.<span class="hljs-title function_">flush</span>() <span class="hljs-comment">// 确保立即发送</span><br>&#125;<br><br><span class="hljs-comment">// 关闭端点示例</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/sse/close&#x27;</span>, express.<span class="hljs-title function_">text</span>(), <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;客户端关闭原因:&#x27;</span>, req.<span class="hljs-property">body</span>)<br>  res.<span class="hljs-title function_">sendStatus</span>(<span class="hljs-number">204</span>)<br>&#125;)<br><br><span class="hljs-comment">// 启动服务器</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PORT</span> = process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span> || <span class="hljs-number">3000</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-variable constant_">PORT</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`SSE 服务运行在端口 <span class="hljs-subst">$&#123;PORT&#125;</span>`</span>)<br>  <br>  <span class="hljs-comment">// 模拟服务端推送</span><br>  <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    clients.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">res, clientId</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">sendSSE</span>(res, <span class="hljs-string">&#x27;notice&#x27;</span>, &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;system&#x27;</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;定时广播消息&#x27;</span>,<br>        <span class="hljs-attr">clientCount</span>: clients.<span class="hljs-property">size</span><br>      &#125;)<br>    &#125;)<br>  &#125;, <span class="hljs-number">10000</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="css"><a href="#css" class="headerlink" title="css"></a><em><strong>css</strong></em></h1><h3 id="grid布局中的空间平均分配，来源于naive-ui的栅格组件"><a href="#grid布局中的空间平均分配，来源于naive-ui的栅格组件" class="headerlink" title="grid布局中的空间平均分配，来源于naive-ui的栅格组件"></a>grid布局中的空间平均分配，来源于naive-ui的栅格组件</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.main</span> &#123;<br>    <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">4</span>, <span class="hljs-built_in">minmax</span>(<span class="hljs-number">0px</span>, <span class="hljs-number">1</span>fr))<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="设置滚动条样式"><a href="#设置滚动条样式" class="headerlink" title="设置滚动条样式"></a>设置滚动条样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs CSS">// 设置全局滚动条样式<br>*::-webkit-scrollbar &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">8px</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br>*::-webkit-scrollbar-thumb &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;<br>&#125;<br>*::-webkit-scrollbar-track &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">background-color</span>: transparent;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文本溢出"><a href="#文本溢出" class="headerlink" title="文本溢出"></a>文本溢出</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-attribute">overflow</span>: hidden;<br><span class="hljs-attribute">white-space</span>: nowrap;<br><span class="hljs-attribute">text-overflow</span>: ellipsis;<br></code></pre></td></tr></table></figure><h3 id="css动画"><a href="#css动画" class="headerlink" title="css动画"></a>css动画</h3><p><a href="https://github.com/IanLunn/Hover">https://github.com/IanLunn/Hover</a></p><p>demo：<a href="https://ianlunn.github.io/Hover/">https://ianlunn.github.io/Hover/</a></p><h3 id="transition动画"><a href="#transition动画" class="headerlink" title="transition动画"></a>transition动画</h3><h4 id="下划线效果"><a href="#下划线效果" class="headerlink" title="下划线效果"></a>下划线效果</h4><figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs HTMLBars"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Dynamic Tab Underline<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.nav-tabs</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">display</span>: flex;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">justify-content</span>: center;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">align-items</span>: center;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">gap</span>: <span class="hljs-number">1em</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">position</span>: relative;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">  </span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.nav-tabs</span><span class="hljs-selector-pseudo">::before</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">position</span>: absolute;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">left</span>: <span class="hljs-built_in">var</span>(--underline-left);</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">width</span>: <span class="hljs-built_in">var</span>(--underline-width);</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">height</span>: <span class="hljs-number">2px</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00f</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">transition</span>: left <span class="hljs-number">0.3s</span>, width <span class="hljs-number">0.3s</span>;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">  </span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.nav-tabs</span> <span class="hljs-selector-tag">button</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">background</span>: none;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">border</span>: none;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">outline</span>: none;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">cursor</span>: pointer;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.5em</span> <span class="hljs-number">1em</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">position</span>: relative;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">  </span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.nav-tabs</span> <span class="hljs-selector-tag">button</span><span class="hljs-selector-class">.active</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#00f</span>;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-tabs&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span> <span class="hljs-attr">data-left</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">data-width</span>=<span class="hljs-string">&quot;60&quot;</span>&gt;</span>Tab 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">data-left</span>=<span class="hljs-string">&quot;60&quot;</span> <span class="hljs-attr">data-width</span>=<span class="hljs-string">&quot;60&quot;</span>&gt;</span>Tab 2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">data-left</span>=<span class="hljs-string">&quot;120&quot;</span> <span class="hljs-attr">data-width</span>=<span class="hljs-string">&quot;60&quot;</span>&gt;</span>Tab 3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.nav-tabs button&#x27;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">button</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.nav-tabs button.active&#x27;</span>).<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;active&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    button.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> left = <span class="hljs-title function_">getComputedStyle</span>(button).<span class="hljs-title function_">getPropertyValue</span>(<span class="hljs-string">&#x27;--underline-left&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> width = <span class="hljs-title function_">getComputedStyle</span>(button).<span class="hljs-title function_">getPropertyValue</span>(<span class="hljs-string">&#x27;--underline-width&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.nav-tabs&#x27;</span>).<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;--underline-left&#x27;</span>, button.<span class="hljs-property">dataset</span>.<span class="hljs-property">left</span> + <span class="hljs-string">&#x27;px&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.nav-tabs&#x27;</span>).<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;--underline-width&#x27;</span>, button.<span class="hljs-property">dataset</span>.<span class="hljs-property">width</span> + <span class="hljs-string">&#x27;px&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="伪元素选择器获取do元素"><a href="#伪元素选择器获取do元素" class="headerlink" title="伪元素选择器获取do元素"></a>伪元素选择器获取do元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> pElements = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.home &gt; p:not(.box &gt; p)&#x27;</span>);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br>box-shadow: 0 0 10px rgba(0, 105, 148, 1) inset<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js</title>
    <link href="/2024/06/17/content/js/js/"/>
    <url>/2024/06/17/content/js/js/</url>
    
    <content type="html"><![CDATA[<p><img src="https://pic.imgdb.cn/item/63fe1f21f144a0100784a2ca.jpg"></p><h1 id="git-操作"><a href="#git-操作" class="headerlink" title="git 操作"></a>git 操作</h1><h2 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"># git config命令的–<span class="hljs-variable language_">global</span>参数，用了这个参数，表示你这台机器上所有的<span class="hljs-title class_">Git</span>仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和<span class="hljs-title class_">Email</span>地址。<br> <br># <span class="hljs-number">1.</span>查看git配置信息<br>$ git config --list<br> <br> <br># <span class="hljs-number">2.</span>查看git用户名、密码、邮箱的配置<br>$ git config user.<span class="hljs-property">name</span><br>$ git config user.<span class="hljs-property">password</span><br>$ git config user.<span class="hljs-property">email</span><br> <br> <br># <span class="hljs-number">3.</span>设置git用户名、密码、邮箱的配置<br>$ git config user.<span class="hljs-property">name</span> <span class="hljs-string">&quot;freedom&quot;</span><br>$ git config user.<span class="hljs-property">password</span> <span class="hljs-string">&quot;123456&quot;</span><br>$ git config user.<span class="hljs-property">email</span> <span class="hljs-string">&quot;1548429568@qq.com&quot;</span><br># <span class="hljs-number">3.</span>设置git用户名、密码、邮箱的配置（全局配置）<br>$ git config --<span class="hljs-variable language_">global</span> user.<span class="hljs-property">name</span> 用户命<br>$ git config --<span class="hljs-variable language_">global</span> user.<span class="hljs-property">name</span> freedom<br>$ git config --<span class="hljs-variable language_">global</span> user.<span class="hljs-property">password</span> 密码<br>$ git config --<span class="hljs-variable language_">global</span> user.<span class="hljs-property">password</span> abc0506abc<br>$ git config --<span class="hljs-variable language_">global</span> user.<span class="hljs-property">password</span> 邮箱<br>$ git config --<span class="hljs-variable language_">global</span> user.<span class="hljs-property">email</span> <span class="hljs-string">&quot;1548429568@qq.com&quot;</span><br> <br> <br># <span class="hljs-number">4.</span>修改git用户名、密码、邮箱的配置（跟设置语法一样，没有用户名就添加，有了用户名就修改）<br>$ git config user.<span class="hljs-property">name</span> <span class="hljs-string">&quot;freedom&quot;</span><br># <span class="hljs-number">4.</span>修改git用户名、密码、邮箱的配置（全局配置）<br>$ git config --<span class="hljs-variable language_">global</span> user.<span class="hljs-property">name</span> <span class="hljs-string">&quot;freedom&quot;</span><br> <br> <br># <span class="hljs-number">5.</span>删除git用户名、密码、邮箱的配置<br></code></pre></td></tr></table></figure><h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">git push origin --<span class="hljs-keyword">delete</span> 分支名     <span class="hljs-comment">//删除指定分支</span><br></code></pre></td></tr></table></figure><h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><p>在 Git 中，”tag” 是用于给特定的提交（commit）打上标签的功能。它可以方便地标记重要的里程碑、版本发布或其他需要标识的点。下面是一些常用的 git tag 命令及其用法：</p><ol><li>创建标签：</li><li>使用 <code>git tag</code> 命令可以创建一个轻量级标签：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Plain">复制代码<br>git tag &lt;tag_name&gt;<br></code></pre></td></tr></table></figure><ol><li>创建一个带注释的标签，可以使用 <code>-a</code> 参数：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Plain">复制代码<br>git tag -a &lt;tag_name&gt; -m &quot;标签注释&quot;<br></code></pre></td></tr></table></figure><ol><li>查看标签：</li><li>使用 <code>git tag</code> 命令可以列出所有的标签：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Plain">git tag<br><br>查看远端tag<br>git ls-remote --tags origin<br></code></pre></td></tr></table></figure><ol><li>给指定的提交打标签：</li><li>可以使用 <code>git tag</code> 命令加上提交的哈希值（或缩写）来给特定的提交打标签：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">git tag &lt;tag_name&gt; &lt;commit_hash&gt;<br></code></pre></td></tr></table></figure><ol><li>推送标签到远程仓库：</li><li>标签默认不会自动推送到远程仓库，需要显式地将标签推送到远程仓库。使用 <code>git push</code> 命令来推送标签：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">git push origin &lt;tag_name&gt;<br></code></pre></td></tr></table></figure><ol><li>如果要一次性推送所有的标签，可以使用 <code>--tags</code> 参数：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">git push origin --tags<br></code></pre></td></tr></table></figure><ol><li>删除标签：</li><li>使用 <code>git tag -d</code> 命令可以删除本地的标签：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">git tag -d &lt;tag_name&gt;<br></code></pre></td></tr></table></figure><ol><li>如果要删除远程仓库上的标签，需要先删除本地标签，然后使用 <code>git push</code> 命令推送这个删除的操作到远程仓库：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Plain">git tag -d &lt;tag_name&gt;    // 删除本地标签<br>git push origin :refs/tags/&lt;tag_name&gt;    // 删除远程标签<br></code></pre></td></tr></table></figure><p>下载某一tag的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">git <span class="hljs-built_in">clone</span> -b [tag] [git地址]<br>或者<br>git <span class="hljs-built_in">clone</span> [git地址]git checkout tags/&lt;tag_name&gt;<br></code></pre></td></tr></table></figure><p>这些是一些常用的 git tag 命令及用法。通过使用标签，您可以更好地组织和管理您的代码版本，并与团队成员共享标记的里程碑。</p><h1 id="Float32Array"><a href="#Float32Array" class="headerlink" title="Float32Array"></a>Float32Array</h1><h2 id="1-什么是-Float32Array？"><a href="#1-什么是-Float32Array？" class="headerlink" title="1.什么是 Float32Array？"></a>1.什么是 Float32Array？</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">在MDN中的描述是：一个固定长度，用来储存浮点类型数据的数组<br></code></pre></td></tr></table></figure><h3 id="1-1-固定长度"><a href="#1-1-固定长度" class="headerlink" title="1.1 固定长度"></a>1.1 固定长度</h3><p>为什么说是固定长度？请看下方示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(<span class="hljs-number">2</span>)<br>f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>f[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span><br>f1 <span class="hljs-comment">// [0, 1]</span><br></code></pre></td></tr></table></figure><p>从上面示例可以看出，创建了一个长度为 2 的类型数组，然后通过索引复制 3 个值，最后发现只有两个元素。也就是说类型数组 Float32Array 和普通数组 Array 不一样，不能像 Array 一样五线 2 添加元素。</p><h3 id="1-2-只能存储浮点类型数据"><a href="#1-2-只能存储浮点类型数据" class="headerlink" title="1.2 只能存储浮点类型数据"></a>1.2 只能存储浮点类型数据</h3><p>为什么只能存储浮点类型数据，我们通过下方示例来验证</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(<span class="hljs-number">3</span>)<br>f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>f[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;f&#x27;</span><br>f[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span><br>f <span class="hljs-comment">// [0, NaN, 2]</span><br></code></pre></td></tr></table></figure><p>通过上方的示例我们可以看到，我们只能添加 number 类型的数据，其他其它类型的数据会变成 NaN</p><h3 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2.基本用法"></a>2.基本用法</h3><h4 id="2-1-创建类型数组"><a href="#2-1-创建类型数组" class="headerlink" title="2.1 创建类型数组"></a>2.1 创建类型数组</h4><h4 id="（1）长度作为参数创建"><a href="#（1）长度作为参数创建" class="headerlink" title="（1）长度作为参数创建"></a>（1）长度作为参数创建</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(<span class="hljs-number">5</span>)<br>f <span class="hljs-comment">// [0, 0, 0 ,0, 0]</span><br></code></pre></td></tr></table></figure><h4 id="（2）-普通数组作为参数创建"><a href="#（2）-普通数组作为参数创建" class="headerlink" title="（2） 普通数组作为参数创建"></a>（2） 普通数组作为参数创建</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br>f <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h4 id="（3）-类型数组作为参数创建"><a href="#（3）-类型数组作为参数创建" class="headerlink" title="（3） 类型数组作为参数创建"></a>（3） 类型数组作为参数创建</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> f1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FloatArray32</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]);<br><span class="hljs-keyword">let</span> f2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FloatArray32</span>(f1);<br>f2; <span class="hljs-comment">// [1, 2]</span><br></code></pre></td></tr></table></figure><h1 id="WeakMap-（弱映射）"><a href="#WeakMap-（弱映射）" class="headerlink" title="WeakMap （弱映射）"></a>WeakMap （弱映射）</h1><ul><li><p>资料参考：</p></li><li><p>Set 和 Map 相关的资料：</p></li><li><p><a href="https://gitee.com/cH3802/front_end_history/blob/master/js_2020/other/4.Set%E5%92%8CMap.md">https://gitee.com/cH3802/front_end_history/blob/master/js_2020/other/4.Set%E5%92%8CMap.md</a></p></li><li><p>WeakMap 相关资料：</p></li><li><p>Mdn: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap</a></p></li><li><p>51cto: <a href="https://blog.51cto.com/u_11239407/2930565">https://blog.51cto.com/u_11239407/2930565</a></p></li></ul><p>在 es6 中我们知道 Map 和 Set 是两种新的数据结构，</p><ul><li><p>在查阅翻译 WeakMap 英文是弱映射，这里的弱指的是容易被清理；我们来看一下 WeakMap 的一些属性和方法</p></li><li><h2 id="1-WeakMap-的属性和方法"><a href="#1-WeakMap-的属性和方法" class="headerlink" title="1.WeakMap 的属性和方法"></a>1.WeakMap 的属性和方法</h2></li><li><pre><code class="hljs">const weakMap =  new WeakMap() // 创建一个weakmap实例weakMap.set(key, value) —— 根据键存储值。weakMap.get(key) —— 根据键来返回值，如果 map 中不存在对应的 key，则返回 undefined。weakMap.has(key) —— 如果 key 存在则返回 true，否则返回 false。weakMap.delete(key) —— 删除指定键的值。weakMap.clear() —— 清空 map。map.size —— 返回当前元素个数。<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br>-   注意：和 <span class="hljs-built_in">Map</span> 不同 <span class="hljs-built_in">WeakMap</span> 的 key 值必须是一个对象<br><br>-   <span class="hljs-comment">## 2.WeakMap 的特性</span><br><br>-   从上面我们可以看出 <span class="hljs-built_in">WeakMap</span> 和 <span class="hljs-built_in">Map</span> 的大部分属性和方法是相似的，那么它们是否有不同点，接下来我们看一下需要注意的几个地方<br><br>-   <span class="hljs-comment">### 2.1 WeakMap 的 key 必须是对象</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">-   ###</span> <span class="hljs-number">2.2</span> <span class="hljs-built_in">WeakMap</span> 是弱引用<br><br>-   为什么说 <span class="hljs-built_in">WeakMap</span> 是弱引用，在了解这个之前，我们需要先了解一下垃圾回收机制，在垃圾回收机制当中，对不再使用的对象，我们可以赋值 <span class="hljs-literal">null</span>，进行标记清除；但是我们声明的这个对象，在其他对象里面引用的话，这个时候，标记清除就不生效了。<br><br>-   ```<span class="language-javascript"><span class="hljs-title class_">JavaScript</span></span><br><span class="language-javascript">    <span class="hljs-comment">/* WeakMap的弱引用性 */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 我们用三个对象来验证</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 普通对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> m = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;可乐&#x27;</span>&#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> array = [m]</span><br><span class="language-javascript">        m = <span class="hljs-literal">null</span></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log(array[0]) // 我们通过访问 array[0],结果发现依然能够成功打印</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// map对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> m2 = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;汽水&#x27;</span>&#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()</span><br><span class="language-javascript">        map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;name&#x27;</span>, m2)</span><br><span class="language-javascript">        m2 = <span class="hljs-literal">null</span></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log(map.get(&#x27;name&#x27;)) // 通过访问 map设置的属性name的值依然存在</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// weakMap</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> m3 = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;美联达&#x27;</span>&#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> weakMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>()</span><br><span class="language-javascript">        weakMap.<span class="hljs-title function_">set</span>(m3, m3)</span><br><span class="language-javascript">        m3 = <span class="hljs-literal">null</span></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log(weakMap.get(m3)) // 打印为undefined</span></span><br></code></pre></td></tr></table></figure></code></pre></li><li><h3 id="2-3-WeakMap-可以保留私有数据"><a href="#2-3-WeakMap-可以保留私有数据" class="headerlink" title="2.3 WeakMap 可以保留私有数据"></a>2.3 WeakMap 可以保留私有数据</h3></li><li><p>看下面一个例子</p></li><li><pre><code class="JavaScript">// WeakMap可以保留私有数据   const STACK = (function()&#123;     const wm = new WeakMap()     return class &#123;       constructor() &#123;         wm.set(this, [])       &#125;       push(elem) &#123;         wm.get(this).push(elem)       &#125;       toString(elem) &#123;         console.log(wm.get(this))       &#125;     &#125;   &#125;)()   const stack = new STACK()   stack.push(1)   stack.push(2)   console.log(stack)   console.log(stack.toString())<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br>-   ## <span class="hljs-number">3</span>.WeakMap 的一些应用<br><br>\<span class="hljs-number">1</span>. 保留私有数据 （见上面的 <span class="hljs-number">2.3</span>）<br><br>\<span class="hljs-number">2</span>. 弱应用的一些应用 （深拷贝）<br><br># WeakSet<br><br>## <span class="hljs-number">1</span>.weakset 的属性和方法<br><br>![](https://pic.imgdb.<span class="hljs-keyword">cn</span>/item/<span class="hljs-number">63</span>feb9e5f144a010073c9c7b.png)<br><br>```JavaScript<br>// 创建一个weakset<br>const <span class="hljs-keyword">ws</span> = <span class="hljs-keyword">new</span> WeakSet()<br><br> // 通过上面的截图我们可以发现 weakset有 <span class="hljs-built_in">add</span>,<span class="hljs-keyword">delete</span>, <span class="hljs-built_in">has</span>这三个方法<br><br><br><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-keyword">a</span>: <span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">let</span> key = &#123;<span class="hljs-keyword">a</span>: <span class="hljs-number">2</span>&#125;<br><span class="hljs-keyword">ws</span>.<span class="hljs-built_in">add</span>(obj)<br><span class="hljs-keyword">ws</span>.<span class="hljs-built_in">add</span>(key)<br><br><span class="hljs-keyword">ws</span>.<span class="hljs-keyword">delete</span>(key)<br><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">ws</span>.<span class="hljs-built_in">has</span>(key))<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">ws</span>.<span class="hljs-built_in">has</span>(obj))<br></code></pre></td></tr></table></figure></code></pre></li></ul><p>weakset 的其他特性：</p><p>1.weakset 是不能被遍历的，它没有 forEach 这些方法</p><p>2.weakset 在添加值得时候，只能是对象，添加其他类型会报错</p><p>3.weakset 是弱引用</p><h2 id="2-Weak-的弱引用"><a href="#2-Weak-的弱引用" class="headerlink" title="2.Weak 的弱引用"></a>2.Weak 的弱引用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 和set结构不同，没有size这个属性，是因为ws同WeakMap 一样也是弱引用，在没被引用时，</span><br><span class="hljs-comment">// 数据会被清空</span><br><br>   <span class="hljs-keyword">const</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakSet</span>()<br><br>   <span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;<br>   <span class="hljs-keyword">let</span> key = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">2</span>&#125;<br><br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">       由于ws是不能被迭代的，所以用【..ws】[0] 检验值是否存在是会报错的，</span><br><span class="hljs-comment">       我们可以通过has来判断值是否存在</span><br><span class="hljs-comment">   */</span><br><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ws.<span class="hljs-title function_">has</span>(obj)) <span class="hljs-comment">// true</span><br>   obj = <span class="hljs-literal">null</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ws.<span class="hljs-title function_">has</span>(obj)) <span class="hljs-comment">// false,弱引用被回收了</span><br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/64199f26a682492fcca369aa.jpg"></p><h1 id="getBattery"><a href="#getBattery" class="headerlink" title="getBattery"></a>getBattery</h1><p>浏览器给我们提供了获取电池电量的 API，我们可以用上去，先看看怎么用这个 API：</p><p>调用<code>navigator.getBattery</code>方法，该方法返回一个<code>promise</code>，在这个<code>promise</code>中返回了一个电池对象，我们可以监听电池剩余量、电池是否在充电；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">navigator.<span class="hljs-title function_">getBattery</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">battery</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateAllBatteryInfo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">updateChargeInfo</span>();<br><span class="hljs-title function_">updateLevelInfo</span>();<br><span class="hljs-title function_">updateChargingInfo</span>();<br><span class="hljs-title function_">updateDischargingInfo</span>();<br>&#125;<br><span class="hljs-title function_">updateAllBatteryInfo</span>();<br><br><span class="hljs-comment">// 充电变化</span><br>battery.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;chargingchange&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">updateChargeInfo</span>();<br>&#125;);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateChargeInfo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Battery charging? <span class="hljs-subst">$&#123;battery.charging ? <span class="hljs-string">&#x27;Yes&#x27;</span> : <span class="hljs-string">&#x27;No&#x27;</span>&#125;</span>`</span>);<br>&#125;<br><br><span class="hljs-comment">// 电量水平变化</span><br>battery.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;levelchange&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">updateLevelInfo</span>();<br>&#125;);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateLevelInfo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Battery level: <span class="hljs-subst">$&#123;battery.level * <span class="hljs-number">100</span>&#125;</span>%`</span>);<br>&#125;<br><br><span class="hljs-comment">// 电池充电时间变化</span><br>battery.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;chargingtimechange&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">updateChargingInfo</span>();<br>&#125;);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateChargingInfo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Battery charging time: <span class="hljs-subst">$&#123;battery.chargingTime&#125;</span> seconds`</span>);<br>&#125;<br><br><span class="hljs-comment">//电池使用时间变化</span><br>battery.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;dischargingtimechange&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">updateDischargingInfo</span>();<br>&#125;);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateDischargingInfo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Battery discharging time: <span class="hljs-subst">$&#123;battery.dischargingTime&#125;</span> seconds`</span>);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/64199ef0a682492fcca301fe.jpg"></p><h1 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h1><h2 id="关于-requestAnimationFrame"><a href="#关于-requestAnimationFrame" class="headerlink" title="关于 requestAnimationFrame"></a>关于 requestAnimationFrame</h2><p> （1）用法其实跟 setTimeout 完全一致，只不过当前的时间间隔是跟着系统的绘制频率走，是固定的。</p><p> （2）使得动画更加流畅，防止动画失帧</p><p> 该 API 能以浏览器的显示频率来作为其动画动作的频率，如果系统绘制率是 60Hz，那么回调函数就每 16.7ms 被执行一次，如果绘制频率是 75Hz，那么这个间隔时间就变成了 1000&#x2F;75&#x3D;13.3ms，也就是说它的时间间隔，是跟着系统的绘制频率走；</p><p> 这样就不会存在过度绘制的问题，动画不会掉帧，自然流畅，解决 js 动画过度失效的问题</p><p> （3）节省资源节能(Cpu、内存等)</p><p> 在隐藏或不可见的元素中，requestAnimationFrame 将不会进行重绘或回流，这当然就意味着更少的 CPU、GPU 和内存使用量<br>requestAnimationFrame 是由浏览器专门为动画提供的 API，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了 CPU 开销</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(callback);<br></code></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame#%E5%8F%82%E6%95%B0">参数</a></h4><ul><li><p><code>callback</code></p><p>下一次重绘之前更新动画帧所调用的函数 (即上面所说的回调函数)。该回调函数会被传入<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMHighResTimeStamp"><code>DOMHighResTimeStamp</code></a>参数，该参数与<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Performance/now"><code>performance.now()</code></a>的返回值相同，它表示<code>requestAnimationFrame()</code> 开始去执行回调函数的时刻。</p></li></ul><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame#%E8%BF%94%E5%9B%9E%E5%80%BC">返回值</a></h4><p>一个 <code>long</code> 整数，请求 ID，是回调列表中唯一的标识。是个非零值，没别的意义。你可以传这个值给 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/cancelAnimationFrame"><code>window.cancelAnimationFrame()</code></a> 以取消回调函数。</p><h2 id="参考用例"><a href="#参考用例" class="headerlink" title="参考用例"></a>参考用例</h2><h4 id="替代-setTimeout-实现定时器"><a href="#替代-setTimeout-实现定时器" class="headerlink" title="替代 setTimeout 实现定时器"></a>替代 setTimeout 实现定时器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 立即执行</span><br><span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>&#125;);<br><br><span class="hljs-comment">// 满足指定效果，循环执行；如5s后执行完成清除定时器</span><br><span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>num = <span class="hljs-number">10</span>;<br>&#125;, <span class="hljs-number">5000</span>);<br><span class="hljs-keyword">let</span> timer = <span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (num !== <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// 满足条件执行完毕</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加载完成...&#x27;</span>);<br><span class="hljs-title function_">cancelAnimationFrame</span>(timer);<br>timer = <span class="hljs-literal">null</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加载中...&#x27;</span>);<br>timer = <span class="hljs-title function_">requestAnimationFrame</span>(fn);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="大数据渲染"><a href="#大数据渲染" class="headerlink" title="大数据渲染"></a>大数据渲染</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 将10万条数据渲染到页面 */</span><br><br><span class="hljs-keyword">var</span> total = <span class="hljs-number">100000</span>;<br><span class="hljs-keyword">var</span> size = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">var</span> count = total / size;<br><span class="hljs-keyword">var</span> done = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;list&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addItems</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> li = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">var</span> fg = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createDocumentFragment</span>();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>li.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;item &#x27;</span> + (done * size + i);<br>fg.<span class="hljs-title function_">appendChild</span>(li);<br>&#125;<br><br>ul.<span class="hljs-title function_">appendChild</span>(fg);<br>done++;<br><br><span class="hljs-keyword">if</span> (done &lt; count) &#123;<br><span class="hljs-title function_">requestAnimationFrame</span>(addItems);<br>&#125;<br>&#125;<br><span class="hljs-title function_">requestAnimationFrame</span>(addItems);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue3 文档</title>
    <link href="/2024/05/22/content/vue/vue3/"/>
    <url>/2024/05/22/content/vue/vue3/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue3-快速上手"><a href="#Vue3-快速上手" class="headerlink" title="Vue3 快速上手"></a>Vue3 快速上手</h1><img src="https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png" style="width:200px" /><h2 id="1-Vue3-简介"><a href="#1-Vue3-简介" class="headerlink" title="1.Vue3 简介"></a>1.Vue3 简介</h2><ul><li>2020 年 9 月 18 日，Vue.js 发布 3.0 版本，代号：One Piece（海贼王）</li><li>耗时 2 年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个 RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次 PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99 位贡献者</a></li><li>github 上的 tags 地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="2-Vue3-带来了什么"><a href="#2-Vue3-带来了什么" class="headerlink" title="2.Vue3 带来了什么"></a>2.Vue3 带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li><p>打包大小减少 41%</p></li><li><p>初次渲染快 55%, 更新渲染快 133%</p></li><li><p>内存减少 54%</p><p>……</p><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul><li><p>使用 Proxy 代替 defineProperty 实现响应式</p></li><li><p>重写虚拟 DOM 的实现和 Tree-Shaking</p><p>……</p></li></ul><h3 id="3-拥抱-TypeScript"><a href="#3-拥抱-TypeScript" class="headerlink" title="3.拥抱 TypeScript"></a>3.拥抱 TypeScript</h3><ul><li>Vue3 可以更好的支持 TypeScript</li></ul><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol><li><p>Composition API（组合 API）</p><ul><li>setup 配置</li><li>ref 与 reactive</li><li>watch 与 watchEffect</li><li>provide 与 inject</li><li>……</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment</li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除 keyCode 支持作为 v-on 的修饰符</li><li>…..</li></ul><h1 id="一、创建-Vue3-0-工程"><a href="#一、创建-Vue3-0-工程" class="headerlink" title="一、创建 Vue3.0 工程"></a>一、创建 Vue3.0 工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><p> 官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span><br>vue --version<br><span class="hljs-comment">## 安装或者升级你的@vue/cli</span><br>npm install -g @vue/cli<br><span class="hljs-comment">## 创建</span><br>vue create vue_test<br><span class="hljs-comment">## 启动</span><br><span class="hljs-built_in">cd</span> vue_test<br>npm run serve<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2></li></ol></li></ul><h2 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite 官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><ul><li>什么是 vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite 构建对比图</li></ul><p><img src="https://cn.vitejs.dev/assets/bundler.37740380.png" style="width:500px;height:280px;float:left" /><img src="https://cn.vitejs.dev/assets/esm.3070012d.png" style="width:480px;height:280px" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 创建工程</span><br>npm init vite-app &lt;project-name&gt;<br><span class="hljs-comment">## 进入工程目录</span><br><span class="hljs-built_in">cd</span> &lt;project-name&gt;<br><span class="hljs-comment">## 安装依赖</span><br>npm install<br><span class="hljs-comment">## 运行</span><br>npm run dev<br></code></pre></td></tr></table></figure><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="二、常用-Composition-API"><a href="#二、常用-Composition-API" class="headerlink" title="二、常用 Composition API"></a>二、常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="1-拉开序幕的-setup"><a href="#1-拉开序幕的-setup" class="headerlink" title="1.拉开序幕的 setup"></a>1.拉开序幕的 setup</h2><ol><li>理解：Vue3.0 中一个新的配置项，值为一个函数。</li><li>setup 是所有<strong style="color:#DD5145">Composition API（组合 API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据、方法等等，均要配置在 setup 中。</li><li>setup 函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>尽量不要与 Vue2.x 配置混用<ul><li>Vue2.x 配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup 中的属性、方法。</li><li>但在 setup 中<strong style="color:#DD5145">不能访问到</strong>Vue2.x 配置（data、methos、computed…）。</li><li>如果有重名, setup 优先。</li></ul></li><li>setup 不能是一个 async 函数，因为返回值不再是 return 的对象, 而是 promise, 模板看不到 return 对象中的属性。（后期也可以返回一个 Promise 实例，但需要 Suspense 和异步组件的配合）</li></ol></li></ol><h2 id="2-ref-函数"><a href="#2-ref-函数" class="headerlink" title="2.ref 函数"></a>2.ref 函数</h2><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code><ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference 对象，简称 ref 对象）</strong>。</li><li>JS 中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了 Vue3.0 中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h2 id="3-reactive-函数"><a href="#3-reactive-函数" class="headerlink" title="3.reactive 函数"></a>3.reactive 函数</h2><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy 的实例对象，简称 proxy 对象）</strong></li><li>reactive 定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h2 id="4-Vue3-0-中的响应式原理"><a href="#4-Vue3-0-中的响应式原理" class="headerlink" title="4.Vue3.0 中的响应式原理"></a>4.Vue3.0 中的响应式原理</h2><h3 id="vue2-x-的响应式"><a href="#vue2-x-的响应式" class="headerlink" title="vue2.x 的响应式"></a>vue2.x 的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(data, <span class="hljs-string">&#x27;count&#x27;</span>, &#123;<br><span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;&#125;,<br><span class="hljs-title function_">set</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h3 id="Vue3-0-的响应式"><a href="#Vue3-0-的响应式" class="headerlink" title="Vue3.0 的响应式"></a>Vue3.0 的响应式</h3><ul><li><p>实现原理:</p><ul><li><p>通过 Proxy（代理）: 拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过 Reflect（反射）: 对源对象的属性进行操作。</p></li><li><p>MDN 文档中描述的 Proxy 与 Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(data, &#123;<br><span class="hljs-comment">// 拦截读取属性值</span><br><span class="hljs-title function_">get</span>(<span class="hljs-params">target, prop</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, prop);<br>&#125;,<br><span class="hljs-comment">// 拦截设置属性值或添加新属性</span><br><span class="hljs-title function_">set</span>(<span class="hljs-params">target, prop, value</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, prop, value);<br>&#125;,<br><span class="hljs-comment">// 拦截删除属性</span><br><span class="hljs-title function_">deleteProperty</span>(<span class="hljs-params">target, prop</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(target, prop);<br>&#125;<br>&#125;);<br><br>proxy.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;tom&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><h2 id="5-reactive-对比-ref"><a href="#5-reactive-对比-ref" class="headerlink" title="5.reactive 对比 ref"></a>5.reactive 对比 ref</h2><ul><li>从定义数据角度对比：<ul><li>ref 用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li>reactive 用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li>备注：ref 也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li>ref 通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive 通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref 定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li>reactive 定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="6-setup-的两个注意点"><a href="#6-setup-的两个注意点" class="headerlink" title="6.setup 的两个注意点"></a>6.setup 的两个注意点</h2><ul><li><p>setup 执行的时机</p><ul><li>在 beforeCreate 之前执行一次，this 是 undefined。</li></ul></li><li><p>setup 的参数</p><ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在 props 配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h2><h3 id="1-computed-函数"><a href="#1-computed-函数" class="headerlink" title="1.computed 函数"></a>1.computed 函数</h3><ul><li><p>与 Vue2.x 中 computed 配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;computed&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br><span class="hljs-comment">//计算属性——简写</span><br>    <span class="hljs-keyword">let</span> fullName = <span class="hljs-title function_">computed</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> person.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + person.<span class="hljs-property">lastName</span><br>    &#125;)<br>    <span class="hljs-comment">//计算属性——完整</span><br>    <span class="hljs-keyword">let</span> fullName = <span class="hljs-title function_">computed</span>(&#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">return</span> person.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + person.<span class="hljs-property">lastName</span><br>        &#125;,<br>        <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>            <span class="hljs-keyword">const</span> nameArr = value.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>)<br>            person.<span class="hljs-property">firstName</span> = nameArr[<span class="hljs-number">0</span>]<br>            person.<span class="hljs-property">lastName</span> = nameArr[<span class="hljs-number">1</span>]<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-watch-函数"><a href="#2-watch-函数" class="headerlink" title="2.watch 函数"></a>2.watch 函数</h3><ul><li><p>与 Vue2.x 中 watch 配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视 reactive 定义的响应式数据时：oldValue 无法正确获取、强制开启了深度监视（deep 配置失效）。</li><li>监视 reactive 定义的响应式数据中某个属性时：deep 配置有效。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//情况一：监视ref定义的响应式数据</span><br><span class="hljs-title function_">watch</span>(<br>sum,<br><span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sum变化了&#x27;</span>, newValue, oldValue);<br>&#125;,<br>&#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> &#125;<br>);<br><br><span class="hljs-comment">//情况二：监视多个ref定义的响应式数据</span><br><span class="hljs-title function_">watch</span>([sum, msg], <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sum或msg变化了&#x27;</span>, newValue, oldValue);<br>&#125;);<br><br><span class="hljs-comment">/* 情况三：监视reactive定义的响应式数据</span><br><span class="hljs-comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span><br><span class="hljs-comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_">watch</span>(<br>person,<br><span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person变化了&#x27;</span>, newValue, oldValue);<br>&#125;,<br>&#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">deep</span>: <span class="hljs-literal">false</span> &#125;<br>); <span class="hljs-comment">//此处的deep配置不再奏效</span><br><br><span class="hljs-comment">//情况四：监视reactive定义的响应式数据中的某个属性</span><br><span class="hljs-title function_">watch</span>(<br><span class="hljs-function">() =&gt;</span> person.<span class="hljs-property">job</span>,<br><span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>, newValue, oldValue);<br>&#125;,<br>&#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span> &#125;<br>);<br><br><span class="hljs-comment">//情况五：监视reactive定义的响应式数据中的某些属性</span><br><span class="hljs-title function_">watch</span>(<br>[<span class="hljs-function">() =&gt;</span> person.<span class="hljs-property">job</span>, <span class="hljs-function">() =&gt;</span> person.<span class="hljs-property">name</span>],<br><span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>, newValue, oldValue);<br>&#125;,<br>&#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span> &#125;<br>);<br><br><span class="hljs-comment">//特殊情况</span><br><span class="hljs-title function_">watch</span>(<br><span class="hljs-function">() =&gt;</span> person.<span class="hljs-property">job</span>,<br><span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>, newValue, oldValue);<br>&#125;,<br>&#123; <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span> &#125;<br>); <span class="hljs-comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-watchEffect-函数"><a href="#3-watchEffect-函数" class="headerlink" title="3.watchEffect 函数"></a>3.watchEffect 函数</h3><ul><li><p>watch 的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect 的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect 有点像 computed：</p><ul><li>但 computed 注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而 watchEffect 更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span><br><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> x1 = sum.<span class="hljs-property">value</span>;<br><span class="hljs-keyword">const</span> x2 = person.<span class="hljs-property">age</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;watchEffect配置的回调执行了&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h2><div style="border:1px solid black;width:380px;float:left;margin-right:20px;"><strong>vue2.x的生命周期</strong><img src="https://cn.vuejs.org/images/lifecycle.png" alt="lifecycle_2" style="zoom:33%;width:1200px" /></div><div style="border:1px solid black;width:510px;height:985px;float:left"><strong>vue3.0的生命周期</strong><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="lifecycle_2" style="zoom:33%;width:2500px" /></div><p>1</p><ul><li>Vue3.0 中可以继续使用 Vue2.x 中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0 也提供了 Composition API 形式的生命周期钩子，与 Vue2.x 中钩子对应关系如下：<ul><li><code>beforeCreate</code>&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li><li><code>created</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li><li><code>beforeMount</code> &#x3D;&#x3D;&#x3D;&gt;<code>onBeforeMount</code></li><li><code>mounted</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>&#x3D;&#x3D;&#x3D;&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> &#x3D;&#x3D;&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUnmounted</code></li></ul></li></ul><h2 id="9-自定义-hook-函数"><a href="#9-自定义-hook-函数" class="headerlink" title="9.自定义 hook 函数"></a>9.自定义 hook 函数</h2><ul><li><p>什么是 hook？—— 本质是一个函数，把 setup 函数中使用的 Composition API 进行了封装。</p></li><li><p>类似于 vue2.x 中的 mixin。</p></li><li><p>自定义 hook 的优势: 复用代码, 让 setup 中的逻辑更清楚易懂。</p></li></ul><h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h2><ul><li><p>作用：创建一个 ref 对象，其 value 值指向另一个对象中的某个属性。</p></li><li><p>语法：<code>const name = toRef(person,&#39;name&#39;)</code></p></li><li><p>应用: 要将响应式对象中的某个属性单独提供给外部使用时。</p></li><li><p>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></p></li></ul><h1 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。</li></ul></li></ul><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot; /&gt;<br>&lt;h3&gt;&#123;&#123; keyword &#125;&#125;&lt;/h3&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref, customRef &#125; from &#x27;vue&#x27;;<br>export default &#123;<br>name: &#x27;Demo&#x27;,<br>setup() &#123;<br>// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref<br>//自定义一个myRef<br>function myRef(value, delay) &#123;<br>let timer;<br>//通过customRef去实现自定义<br>return customRef((track, trigger) =&gt; &#123;<br>return &#123;<br>get() &#123;<br>track(); //告诉Vue这个value值是需要被“追踪”的<br>return value;<br>&#125;,<br>set(newValue) &#123;<br>clearTimeout(timer);<br>timer = setTimeout(() =&gt; &#123;<br>value = newValue;<br>trigger(); //告诉Vue去更新界面<br>&#125;, delay);<br>&#125;<br>&#125;;<br>&#125;);<br>&#125;<br>let keyword = myRef(&#x27;hello&#x27;, 500); //使用程序员自定义的ref<br>return &#123;<br>keyword<br>&#125;;<br>&#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><img src="https://v3.cn.vuejs.org/images/components_provide.png" style="width:300px" /><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>......<br>    <span class="hljs-keyword">let</span> car = <span class="hljs-title function_">reactive</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;奔驰&#x27;</span>,<span class="hljs-attr">price</span>:<span class="hljs-string">&#x27;40万&#x27;</span>&#125;)<br>    <span class="hljs-title function_">provide</span>(<span class="hljs-string">&#x27;car&#x27;</span>,car)<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>后代组件中：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setup</span>(<span class="hljs-params">props,context</span>)&#123;<br>......<br>    <span class="hljs-keyword">const</span> car = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&#x27;car&#x27;</span>)<br>    <span class="hljs-keyword">return</span> &#123;car&#125;<br>......<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统 OptionsAPI 中，新增或者修改一个需求，就需要分别在 data，methods，computed 里修改 。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image"></p><h2 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image"></p><h1 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul><li>在 Vue2 中: 组件必须有一个根标签</li><li>在 Vue3 中: 组件可以没有根标签, 内部会将多个标签包含在一个 Fragment 虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul><li><p>什么是 Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件 html 结构</strong>移动到指定位置的技术。</p></li><li><pre><code class="vue">&lt;teleport to=&quot;移动位置&quot;&gt;    &lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;        &lt;div class=&quot;dialog&quot;&gt;            &lt;h3&gt;我是一个弹窗&lt;/h3&gt;            &lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/teleport&gt;<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br><span class="hljs-comment">## 3.Suspense</span><br><br>-   等待异步组件时渲染一些额外内容，让应用有更好的用户体验<br><br>-   使用步骤：<br><br>    -   异步引入组件<br><br>        ```<span class="language-javascript">js</span><br><span class="language-javascript">        <span class="hljs-keyword">import</span> &#123; defineAsyncComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./components/Child.vue&#x27;</span>));</span><br></code></pre></td></tr></table></figure>-   使用`Suspense`包裹组件，并配置好`default` 与 `fallback`    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;app&quot;&gt;<br>&lt;h3&gt;我是App组件&lt;/h3&gt;<br>&lt;Suspense&gt;<br>&lt;template v-slot:default&gt;<br>&lt;Child /&gt;<br>&lt;/template&gt;<br>&lt;template v-slot:fallback&gt;<br>&lt;h3&gt;加载中.....&lt;/h3&gt;<br>&lt;/template&gt;<br>&lt;/Suspense&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></code></pre></li></ul><h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1-全局-API-的转移"><a href="#1-全局-API-的转移" class="headerlink" title="1.全局 API 的转移"></a>1.全局 API 的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//注册全局组件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;MyButton&#x27;</span>, &#123;<br>  <span class="hljs-attr">data</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;),<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">//注册全局指令</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;<br>  <span class="hljs-attr">inserted</span>: <span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.<span class="hljs-title function_">focus</span>()<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0 中对这些 API 做出了调整：</p><ul><li><p>将全局的 API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p>data 选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x 写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.v-enter</span>,<br><span class="hljs-selector-class">.v-leave-to</span> &#123;<br><span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.v-leave</span>,<br><span class="hljs-selector-class">.v-enter-to</span> &#123;<br><span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Vue3.x 写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.v-enter-from</span>,<br><span class="hljs-selector-class">.v-leave-to</span> &#123;<br><span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.v-leave-from</span>,<br><span class="hljs-selector-class">.v-enter-to</span> &#123;<br><span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode 作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;my-component v-on:close=&quot;handleComponentEvent&quot; v-on:click=&quot;handleNativeClickEvent&quot; /&gt;<br></code></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>emits: [&#x27;close&#x27;]<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>……</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue2 文档</title>
    <link href="/2024/05/22/content/vue/vue2/"/>
    <url>/2024/05/22/content/vue/vue2/</url>
    
    <content type="html"><![CDATA[<p><img src="https://pic.imgdb.cn/item/64199d23a682492fcc9fe5bc.jpg"></p><p>Vue2 文档</p><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs markdown">├── node<span class="hljs-emphasis">_modules</span><br><span class="hljs-emphasis">├── public</span><br><span class="hljs-emphasis">│ ├── favicon.ico: 页签图标</span><br><span class="hljs-emphasis">│ └── index.html: 主页面</span><br><span class="hljs-emphasis">├── src</span><br><span class="hljs-emphasis">│ ├── assets: 存放静态资源</span><br><span class="hljs-emphasis">│ │ └── logo.png</span><br><span class="hljs-emphasis">│ │── component: 存放组件</span><br><span class="hljs-emphasis">│ │ └── HelloWorld.vue</span><br><span class="hljs-emphasis">│ │── App.vue: 汇总所有组件</span><br><span class="hljs-emphasis">│ │── main.js: 入口文件</span><br><span class="hljs-emphasis">├── .gitignore: git 版本管制忽略的配置</span><br><span class="hljs-emphasis">├── babel.config.js: babel 的配置文件</span><br><span class="hljs-emphasis">├── package.json: 应用包配置文件</span><br><span class="hljs-emphasis">├── README.md: 应用描述文件</span><br><span class="hljs-emphasis">├── package-lock.json：包版本控制文件</span><br></code></pre></td></tr></table></figure><h2 id="关于不同版本的-Vue"><a href="#关于不同版本的-Vue" class="headerlink" title="关于不同版本的 Vue"></a>关于不同版本的 Vue</h2><ol><li>vue.js 与 vue.runtime.xxx.js 的区别：<ol><li>vue.js 是完整版的 Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js 是运行版的 Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为 vue.runtime.xxx.js 没有模板解析器，所以不能使用 template 这个配置项，需要使用 render 函数接收到的 createElement 函数去指定具体内容。</li></ol><h2 id="vue-config-js-配置文件"><a href="#vue-config-js-配置文件" class="headerlink" title="vue.config.js 配置文件"></a>vue.config.js 配置文件</h2><ol><li>使用 vue inspect &gt; output.js 可以查看到 Vue 脚手架的默认配置。</li><li>使用 vue.config.js 可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ol><h2 id="ref-属性"><a href="#ref-属性" class="headerlink" title="ref 属性"></a>ref 属性</h2><ol><li>被用来给元素或子组件注册引用信息（id 的替代者）</li><li>应用在 html 标签上获取的是真实 DOM 元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2 id="props-配置项"><a href="#props-配置项" class="headerlink" title="props 配置项"></a>props 配置项</h2><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;]</code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">props</span>:&#123;<br> <span class="hljs-attr">name</span>:&#123;<br> <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>, <span class="hljs-comment">//类型</span><br> <span class="hljs-attr">required</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//必要性</span><br> <span class="hljs-attr">default</span>:<span class="hljs-string">&#x27;老王&#x27;</span> <span class="hljs-comment">//默认值</span><br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>备注：props 是只读的，Vue 底层会监测你对 props 的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制 props 的内容到 data 中一份，然后去修改 data 中的数据。</p></blockquote></li></ol><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p> 第一步定义混合：</p> <figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nim">&#123;<br>    data()<span class="hljs-meta">&#123;....&#125;</span>,<br>    methods:<span class="hljs-meta">&#123;....&#125;</span><br>    ....<br>&#125;<br></code></pre></td></tr></table></figure><p> 第二步使用混入：</p><p> 全局混入：<code>Vue.mixin(xxx)</code><br> 局部混入：<code>mixins:[&#39;xxx&#39;]</code></p></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol><li><p>功能：用于增强 Vue</p></li><li><p>本质：包含 install 方法的一个对象，install 的第一个参数是 Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">对象.<span class="hljs-property">install</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">Vue, options</span>) &#123;<br>    <span class="hljs-comment">// 1. 添加全局过滤器</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(....)<br><br>    <span class="hljs-comment">// 2. 添加全局指令</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(....)<br><br>    <span class="hljs-comment">// 3. 配置全局混入(合)</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixin</span>(....)<br><br>    <span class="hljs-comment">// 4. 添加实例方法</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$myMethod</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;...&#125;<br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$myProperty</span> = xxxx<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><h2 id="scoped-样式"><a href="#scoped-样式" class="headerlink" title="scoped 样式"></a>scoped 样式</h2><ol><li>作用：让样式在局部生效，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2 id="总结-TodoList-案例"><a href="#总结-TodoList-案例" class="headerlink" title="总结 TodoList 案例"></a>总结 TodoList 案例</h2><ol><li><p>组件化编码流程：</p><p>(1).拆分静态组件：组件要按照功能点拆分，命名不要与 html 元素冲突。</p><p>(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><pre><code class="hljs">   1).一个组件在用：放在组件自身即可。   2). 一些组件在用：放在他们共同的父组件上（&lt;span style=&quot;color:red&quot;&gt;状态提升&lt;/span&gt;）。</code></pre><p>(3).实现交互：从绑定事件开始。</p></li><li><p>props 适用于：</p><p>(1).父组件 &#x3D;&#x3D;&gt; 子组件 通信</p><p>(2).子组件 &#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用 v-model 时要切记：v-model 绑定的值不能是 props 传过来的值，因为 props 是不可以修改的！</p></li><li><p>props 传过来的若是对象类型的值，修改对象中的属性时 Vue 不会报错，但不推荐这样做。</p></li></ol><h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持 5MB 左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关 API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code><br>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><pre><code class="hljs">  该方法接受一个键名作为参数，返回键名对应的值。</code></pre></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><pre><code class="hljs">  该方法接受一个键名作为参数，并把该键名从存储中删除。</code></pre></li><li><p><code>xxxxxStorage.clear()</code></p><pre><code class="hljs">  该方法会清空存储中的所有数据。</code></pre></li></ol></li><li><p>备注：</p><ol><li>SessionStorage 存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage 存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果 xxx 对应的 value 获取不到，那么 getItem 的返回值是 null。</li><li><code>JSON.parse(null)</code>的结果依然是 null。</li></ol></li></ol><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件</strong></p></li><li><p>使用场景：A 是父组件，B 是子组件，B 想给 A 传数据，那么就要在 A 中给 B 绑定自定义事件（<span style="color:red">事件的回调在 A 中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code> 或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Demo</span> ref=<span class="hljs-string">&quot;demo&quot;</span>/&gt;<br>......<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">xxx</span>.$on(<span class="hljs-string">&#x27;atguigu&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">test</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code></p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生 DOM 事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在 methods 中</span>，<span style="color:red">要么用箭头函数</span>，否则 this 指向会出问题！</p></li></ol><h2 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>   ......<br>   <span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = <span class="hljs-variable language_">this</span> <span class="hljs-comment">//安装全局事件总线，$bus就是当前应用的vm</span><br>   &#125;,<br>    ......<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A 组件想接收数据，则在 A 组件中给$bus 绑定自定义事件，事件的<span style="color:red">回调留在 A 组件自身。</span></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">methods</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">demo</span>(<span class="hljs-params">data</span>)&#123;......&#125;<br>&#125;<br>......<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$on(<span class="hljs-string">&#x27;xxxx&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">demo</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在 beforeDestroy 钩子中，用$off 去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装 pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A 组件想接收数据，则在 A 组件中订阅消息，订阅的<span style="color:red">回调留在 A 组件自身。</span></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">methods</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">demo</span>(<span class="hljs-params">data</span>)&#123;......&#125;<br>&#125;<br>......<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">pid</span> = pubsub.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">demo</span>) <span class="hljs-comment">//订阅消息</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在 beforeDestroy 钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新 DOM 进行某些操作时，要在 nextTick 所指定的回调函数中执行。</li></ol><h2 id="Vue-封装的过度与动画"><a href="#Vue-封装的过度与动画" class="headerlink" title="Vue 封装的过度与动画"></a>Vue 封装的过度与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM 元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img src="https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105" style="width:60%" /></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置 name 属性：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;transition name=&quot;hello&quot;&gt;<br>   &lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;<br>&lt;/transition&gt;<br></code></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h2 id="vue-脚手架配置代理"><a href="#vue-脚手架配置代理" class="headerlink" title="vue 脚手架配置代理"></a>vue 脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>在 vue.config.js 中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">devServer</span>: &#123;<br><span class="hljs-attr">proxy</span>: <span class="hljs-string">&#x27;http://localhost:5000&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>编写 vue.config.js 配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-attr">devServer</span>: &#123;<br><span class="hljs-attr">proxy</span>: &#123;<br><span class="hljs-string">&#x27;/api1&#x27;</span>: &#123;<br><span class="hljs-comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span><br><span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5000&#x27;</span>, <span class="hljs-comment">// 代理目标的基础路径</span><br><span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">pathRewrite</span>: &#123; <span class="hljs-string">&#x27;^/api1&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span> &#125;<br>&#125;,<br><span class="hljs-string">&#x27;/api2&#x27;</span>: &#123;<br><span class="hljs-comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span><br><span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5001&#x27;</span>, <span class="hljs-comment">// 代理目标的基础路径</span><br><span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">pathRewrite</span>: &#123; <span class="hljs-string">&#x27;^/api2&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span> &#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span><br><span class="hljs-comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span><br><span class="hljs-comment">   changeOrigin默认值为true</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入 html 结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>&lt;Category&gt;<br>           &lt;div&gt;html结构1&lt;/div&gt;<br>        &lt;/Category&gt;<br>子组件中：<br>&lt;template&gt;<br>&lt;div&gt;<br>&lt;!-- 定义插槽 --&gt;<br>&lt;slot&gt;插槽默认内容...&lt;/slot&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>具名插槽：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>&lt;Category&gt;<br>            &lt;template slot=&quot;center&quot;&gt;<br>              &lt;div&gt;html结构1&lt;/div&gt;<br>            &lt;/template&gt;<br><br>            &lt;template v-slot:footer&gt;<br>               &lt;div&gt;html结构2&lt;/div&gt;<br>            &lt;/template&gt;<br>        &lt;/Category&gt;<br>子组件中：<br>&lt;template&gt;<br>&lt;div&gt;<br>&lt;!-- 定义插槽 --&gt;<br>&lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;<br>&lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games 数据在 Category 组件中，但使用数据所遍历出来的结构由 App 组件决定）</p></li><li><p>具体编码：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>&lt;Category&gt;<br>         &lt;template scope=&quot;scopeData&quot;&gt;<br>            &lt;!-- 生成的是ul列表 --&gt;<br>            &lt;ul&gt;<br>               &lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;<br>            &lt;/ul&gt;<br>         &lt;/template&gt;<br>      &lt;/Category&gt;<br><br>&lt;Category&gt;<br>         &lt;template slot-scope=&quot;scopeData&quot;&gt;<br>            &lt;!-- 生成的是h4标题 --&gt;<br>            &lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;<br>         &lt;/template&gt;<br>      &lt;/Category&gt;<br>子组件中：<br>&lt;template&gt;<br>&lt;div&gt;<br>&lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name: &#x27;Category&#x27;,<br>props: [&#x27;title&#x27;],<br>//数据在子组件自身<br>data() &#123;<br>return &#123;<br>games: [&#x27;红色警戒&#x27;, &#x27;穿越火线&#x27;, &#x27;劲舞团&#x27;, &#x27;超级玛丽&#x27;]<br>&#125;;<br>&#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol></li></ol> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure></li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><pre><code class="hljs"> 在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</code></pre><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><pre><code class="hljs"> 多个组件需要共享数据时</code></pre><h3 id="3-搭建-vuex-环境"><a href="#3-搭建-vuex-环境" class="headerlink" title="3.搭建 vuex 环境"></a>3.搭建 vuex 环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入Vue核心库</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-comment">//引入Vuex</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-comment">//应用Vuex插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>);<br><br><span class="hljs-comment">//准备actions对象——响应组件中用户的动作</span><br><span class="hljs-keyword">const</span> actions = &#123;&#125;;<br><span class="hljs-comment">//准备mutations对象——修改state中的数据</span><br><span class="hljs-keyword">const</span> mutations = &#123;&#125;;<br><span class="hljs-comment">//准备state对象——保存具体的数据</span><br><span class="hljs-keyword">const</span> state = &#123;&#125;;<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>actions,<br>mutations,<br>state<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建 vm 时传入<code>store</code>配置项</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">......<br><span class="hljs-comment">//引入store</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br>......<br><br><span class="hljs-comment">//创建vm</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>   <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>   <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>   store<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入Vue核心库</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-comment">//引入Vuex</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-comment">//引用Vuex</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>);<br><br><span class="hljs-keyword">const</span> actions = &#123;<br><span class="hljs-comment">//响应组件中加的动作</span><br><span class="hljs-title function_">jia</span>(<span class="hljs-params">context, value</span>) &#123;<br><span class="hljs-comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span><br>context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;JIA&#x27;</span>, value);<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> mutations = &#123;<br><span class="hljs-comment">//执行加</span><br><span class="hljs-title function_">JIA</span>(<span class="hljs-params">state, value</span>) &#123;<br><span class="hljs-comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span><br>state.<span class="hljs-property">sum</span> += value;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//初始化数据</span><br><span class="hljs-keyword">const</span> state = &#123;<br><span class="hljs-attr">sum</span>: <span class="hljs-number">0</span><br>&#125;;<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>actions,<br>mutations,<br>state<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>组件中读取 vuex 中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改 vuex 中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过 actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters-的使用"><a href="#5-getters-的使用" class="headerlink" title="5.getters 的使用"></a>5.getters 的使用</h3><ol><li><p>概念：当 state 中的数据需要经过加工后再使用时，可以使用 getters 加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">......<br><br><span class="hljs-keyword">const</span> getters = &#123;<br>   <span class="hljs-title function_">bigSum</span>(<span class="hljs-params">state</span>)&#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">sum</span> * <span class="hljs-number">10</span><br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>   ......<br>   getters<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6-四个-map-方法的使用"><a href="#6-四个-map-方法的使用" class="headerlink" title="6.四个 map 方法的使用"></a>6.四个 map 方法的使用</h3><ol><li><p><strong>mapState 方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span><br>     ...<span class="hljs-title function_">mapState</span>(&#123;<span class="hljs-attr">sum</span>:<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-attr">school</span>:<span class="hljs-string">&#x27;school&#x27;</span>,<span class="hljs-attr">subject</span>:<span class="hljs-string">&#x27;subject&#x27;</span>&#125;),<br><br>    <span class="hljs-comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span><br>    ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-string">&#x27;school&#x27;</span>,<span class="hljs-string">&#x27;subject&#x27;</span>]),<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p><strong>mapGetters 方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span><br>    ...<span class="hljs-title function_">mapGetters</span>(&#123;<span class="hljs-attr">bigSum</span>:<span class="hljs-string">&#x27;bigSum&#x27;</span>&#125;),<br><br>    <span class="hljs-comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span><br>    ...<span class="hljs-title function_">mapGetters</span>([<span class="hljs-string">&#x27;bigSum&#x27;</span>])<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p><strong>mapActions 方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span><br>    ...<span class="hljs-title function_">mapActions</span>(&#123;<span class="hljs-attr">incrementOdd</span>:<span class="hljs-string">&#x27;jiaOdd&#x27;</span>,<span class="hljs-attr">incrementWait</span>:<span class="hljs-string">&#x27;jiaWait&#x27;</span>&#125;)<br><br>    <span class="hljs-comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span><br>    ...<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;jiaOdd&#x27;</span>,<span class="hljs-string">&#x27;jiaWait&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>mapMutations 方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-comment">//靠mapActions生成：increment、decrement（对象形式）</span><br>    ...<span class="hljs-title function_">mapMutations</span>(&#123;<span class="hljs-attr">increment</span>:<span class="hljs-string">&#x27;JIA&#x27;</span>,<span class="hljs-attr">decrement</span>:<span class="hljs-string">&#x27;JIAN&#x27;</span>&#125;),<br><br>    <span class="hljs-comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span><br>    ...<span class="hljs-title function_">mapMutations</span>([<span class="hljs-string">&#x27;JIA&#x27;</span>,<span class="hljs-string">&#x27;JIAN&#x27;</span>]),<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions 与 mapMutations 使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> countAbout = &#123;<br>  <span class="hljs-attr">namespaced</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">//开启命名空间</span><br>  <span class="hljs-attr">state</span>:&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1</span>&#125;,<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">bigSum</span>(<span class="hljs-params">state</span>)&#123;<br>       <span class="hljs-keyword">return</span> state.<span class="hljs-property">sum</span> * <span class="hljs-number">10</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> personAbout = &#123;<br>  <span class="hljs-attr">namespaced</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">//开启命名空间</span><br>  <span class="hljs-attr">state</span>:&#123; ... &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    countAbout,<br>    personAbout<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取 state 数据：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//方式一：自己直接读取</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">personAbout</span>.<span class="hljs-property">list</span><br><span class="hljs-comment">//方式二：借助mapState读取：</span><br>...<span class="hljs-title function_">mapState</span>(<span class="hljs-string">&#x27;countAbout&#x27;</span>,[<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-string">&#x27;school&#x27;</span>,<span class="hljs-string">&#x27;subject&#x27;</span>]),<br></code></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取 getters 数据：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//方式一：自己直接读取</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>[<span class="hljs-string">&#x27;personAbout/firstPersonName&#x27;</span>]<br><span class="hljs-comment">//方式二：借助mapGetters读取：</span><br>...<span class="hljs-title function_">mapGetters</span>(<span class="hljs-string">&#x27;countAbout&#x27;</span>,[<span class="hljs-string">&#x27;bigSum&#x27;</span>])<br></code></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用 dispatch</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//方式一：自己直接dispatch</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;personAbout/addPersonWang&#x27;</span>,person)<br><span class="hljs-comment">//方式二：借助mapActions：</span><br>...<span class="hljs-title function_">mapActions</span>(<span class="hljs-string">&#x27;countAbout&#x27;</span>,&#123;<span class="hljs-attr">incrementOdd</span>:<span class="hljs-string">&#x27;jiaOdd&#x27;</span>,<span class="hljs-attr">incrementWait</span>:<span class="hljs-string">&#x27;jiaWait&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用 commit</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//方式一：自己直接commit</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)<br><span class="hljs-comment">//方式二：借助mapMutations：</span><br>...<span class="hljs-title function_">mapMutations</span>(<span class="hljs-string">&#x27;countAbout&#x27;</span>,&#123;<span class="hljs-attr">increment</span>:<span class="hljs-string">&#x27;JIA&#x27;</span>,<span class="hljs-attr">decrement</span>:<span class="hljs-string">&#x27;JIAN&#x27;</span>&#125;),<br></code></pre></td></tr></table></figure></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key 是路径，value 是组件。</li></ol><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装 vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写 router 配置项:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入VueRouter</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><span class="hljs-comment">//引入Luyou 组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/About&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Home&#x27;</span>;<br><br><span class="hljs-comment">//创建router实例对象，去管理一组一组的路由规则</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br><span class="hljs-attr">routes</span>: [<br>&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>&#125;<br>]<br>&#125;);<br><br><span class="hljs-comment">//暴露router</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure></li><li><p>实现切换（active-class 可配置高亮样式）</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li><li><p>指定展示位置</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-view&gt;&lt;/router-view&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个 router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol><li><p>配置路由规则，使用 children 配置项：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">routes</span>: [<br>&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>,<br><span class="hljs-attr">children</span>: [<br><span class="hljs-comment">//通过children配置子级路由</span><br>&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;news&#x27;</span>, <span class="hljs-comment">//此处一定不要写：/news</span><br><span class="hljs-attr">component</span>: <span class="hljs-title class_">News</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-comment">//此处一定不要写：/message</span><br><span class="hljs-attr">component</span>: <span class="hljs-title class_">Message</span><br>&#125;<br>]<br>&#125;<br>];<br></code></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="4-路由的-query-参数"><a href="#4-路由的-query-参数" class="headerlink" title="4.路由的 query 参数"></a>4.路由的 query 参数</h3><ol><li><p>传递参数</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;<br>&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;<br>&lt;router-link<br>:to=&quot;&#123;<br>path: &#x27;/home/message/detail&#x27;,<br>query: &#123;<br>id: 666,<br>title: &#x27;你好&#x27;<br>&#125;<br>&#125;&quot;<br>&gt;跳转&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li><li><p>接收参数：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$route.<span class="hljs-property">query</span>.<span class="hljs-property">id</span>;<br>$route.<span class="hljs-property">query</span>.<span class="hljs-property">title</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>   <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/demo&#x27;</span>,<br>   <span class="hljs-attr">component</span>:<span class="hljs-title class_">Demo</span>,<br>   <span class="hljs-attr">children</span>:[<br>      &#123;<br>         <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;test&#x27;</span>,<br>         <span class="hljs-attr">component</span>:<span class="hljs-title class_">Test</span>,<br>         <span class="hljs-attr">children</span>:[<br>            &#123;<br>                      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-comment">//给路由命名</span><br>               <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;welcome&#x27;</span>,<br>               <span class="hljs-attr">component</span>:<span class="hljs-title class_">Hello</span>,<br>            &#125;<br>         ]<br>      &#125;<br>   ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>简化跳转：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!--简化前，需要写完整的路径 --&gt;<br>&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!--简化后，直接通过名字跳转 --&gt;<br>&lt;router-link :to=&quot;&#123; name: &#x27;hello&#x27; &#125;&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!--简化写法配合传递参数 --&gt;<br>&lt;router-link<br>:to=&quot;&#123;<br>name: &#x27;hello&#x27;,<br>query: &#123;<br>id: 666,<br>title: &#x27;你好&#x27;<br>&#125;<br>&#125;&quot;<br>&gt;跳转&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="6-路由的-params-参数"><a href="#6-路由的-params-参数" class="headerlink" title="6.路由的 params 参数"></a>6.路由的 params 参数</h3><ol><li><p>配置路由，声明接收 params 参数</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>   <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br>   <span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span>,<br>   <span class="hljs-attr">children</span>:[<br>      &#123;<br>         <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;news&#x27;</span>,<br>         <span class="hljs-attr">component</span>:<span class="hljs-title class_">News</span><br>      &#125;,<br>      &#123;<br>         <span class="hljs-attr">component</span>:<span class="hljs-title class_">Message</span>,<br>         <span class="hljs-attr">children</span>:[<br>            &#123;<br>               <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br>               <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail/:id/:title&#x27;</span>, <span class="hljs-comment">//使用占位符声明接收params参数</span><br>               <span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span><br>            &#125;<br>         ]<br>      &#125;<br>   ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>传递参数</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;<br>&lt;router-link :to=&quot;/home/aeegmss / detail / 666 / 你好&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;<br>&lt;router-link<br>:to=&quot;&#123;<br>name: &#x27;xiangqing&#x27;,<br>params: &#123;<br>id: 666,<br>title: &#x27;你好&#x27;<br>&#125;<br>&#125;&quot;<br>&gt;跳转&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带 params 参数时，若使用 to 的对象写法，则不能使用 path 配置项，必须使用 name 配置！</p></blockquote></li><li><p>接收参数：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$route.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>;<br>$route.<span class="hljs-property">params</span>.<span class="hljs-property">title</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="7-路由的-props-配置"><a href="#7-路由的-props-配置" class="headerlink" title="7.路由的 props 配置"></a>7.路由的 props 配置</h3><p>作用：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>   <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br>   <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail/:id&#x27;</span>,<br>   <span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span>,<br><br>   <span class="hljs-comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span><br>   <span class="hljs-comment">// props:&#123;a:900&#125;</span><br><br>   <span class="hljs-comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span><br>   <span class="hljs-comment">// props:true</span><br><br>   <span class="hljs-comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span><br>   <span class="hljs-title function_">props</span>(<span class="hljs-params">route</span>)&#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>         <span class="hljs-attr">id</span>:route.<span class="hljs-property">query</span>.<span class="hljs-property">id</span>,<br>         <span class="hljs-attr">title</span>:route.<span class="hljs-property">query</span>.<span class="hljs-property">title</span><br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-的-replace-属性"><a href="#8-的-replace-属性" class="headerlink" title="8.&lt;router-link&gt;的 replace 属性"></a>8.<code>&lt;router-link&gt;</code>的 replace 属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol><li><p>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//$router的两个API</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">params</span>: &#123;<br><span class="hljs-attr">id</span>: xxx,<br><span class="hljs-attr">title</span>: xxx<br>&#125;<br>&#125;);<br><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">replace</span>(&#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">params</span>: &#123;<br><span class="hljs-attr">id</span>: xxx,<br><span class="hljs-attr">title</span>: xxx<br>&#125;<br>&#125;);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">forward</span>(); <span class="hljs-comment">//前进</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">back</span>(); <span class="hljs-comment">//后退</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">go</span>(); <span class="hljs-comment">//可前进也可后退</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：<br>在 router-view 里面使用</p><keep-alive include="News"><router-view></router-view></keep-alive></li></ol><p>注意 include 里面的名字是组件名</p><p>在动态组件 components 里面使用<br>import Home from ‘@&#x2F;components&#x2F;Home&#x2F;Index’<br>import Pano from ‘@&#x2F;components&#x2F;Pano&#x2F;Pano’</p><keep-alive>  <component :is="currentTabComponent"></component></keep-alive><p>&#x2F;&#x2F; currentTabComponent 的值为 Home 或者 Pano ，我们可以动态的切换 currentTabComponent 的值</p><p>keep-alive 的深入理解与使用(配合 router-view 缓存整个路由页面)_Young 丶的博客-CSDN 博客_keep-alive router-view</p><h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeEach&#x27;</span>, to, <span class="hljs-keyword">from</span>);<br><span class="hljs-keyword">if</span> (to.<span class="hljs-property">meta</span>.<span class="hljs-property">isAuth</span>) &#123;<br><span class="hljs-comment">//判断当前路由是否需要进行权限控制</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;school&#x27;</span>) === <span class="hljs-string">&#x27;atguigu&#x27;</span>) &#123;<br><span class="hljs-comment">//权限控制的具体规则</span><br><span class="hljs-title function_">next</span>(); <span class="hljs-comment">//放行</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;暂无权限查看&#x27;</span>);<br><span class="hljs-comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">next</span>(); <span class="hljs-comment">//放行</span><br>&#125;<br>&#125;);<br><br><span class="hljs-comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span><br>router.<span class="hljs-title function_">afterEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;afterEach&#x27;</span>, to, <span class="hljs-keyword">from</span>);<br><span class="hljs-keyword">if</span> (to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>) &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>; <span class="hljs-comment">//修改网页的title</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;vue_test&#x27;</span>;<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>独享守卫:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">beforeEnter</span>(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeEnter&#x27;</span>,to,<span class="hljs-keyword">from</span>)<br>   <span class="hljs-keyword">if</span>(to.<span class="hljs-property">meta</span>.<span class="hljs-property">isAuth</span>)&#123; <span class="hljs-comment">//判断当前路由是否需要进行权限控制</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;school&#x27;</span>) === <span class="hljs-string">&#x27;atguigu&#x27;</span>)&#123;<br>         <span class="hljs-title function_">next</span>()<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>         <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;暂无权限查看&#x27;</span>)<br>         <span class="hljs-comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span><br>      &#125;<br>   &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-title function_">next</span>()<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>组件内守卫：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//进入守卫：通过路由规则，进入该组件时被调用</span><br>beforeRouteEnter (to, <span class="hljs-keyword">from</span>, next) &#123;<br>&#125;,<br><span class="hljs-comment">//离开守卫：通过路由规则，离开该组件时被调用</span><br>beforeRouteLeave (to, <span class="hljs-keyword">from</span>, next) &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol><li>对于一个 url 来说，什么是 hash 值？—— #及其后面的内容就是 hash 值。</li><li>hash 值不会包含在 HTTP 请求中，即：hash 值不会带给服务器。</li><li>hash 模式：<ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机 app 分享，若 app 校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li>history 模式：<ol><li>地址干净，美观 。</li><li>兼容性和 hash 模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端 404 的问题。</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>自定义指令</title>
    <link href="/2024/05/22/content/vue/directive/"/>
    <url>/2024/05/22/content/vue/directive/</url>
    
    <content type="html"><![CDATA[<p><img src="https://pic.imgdb.cn/item/64199d8da682492fcca09396.jpg"></p><h1 id="自定指令"><a href="#自定指令" class="headerlink" title="自定指令"></a>自定指令</h1><h2 id="打包及指令注册使用的两种方式"><a href="#打包及指令注册使用的两种方式" class="headerlink" title="打包及指令注册使用的两种方式"></a>打包及指令注册使用的两种方式</h2><p>以 trim 指令为例</p><h4 id="一-使用遍历"><a href="#一-使用遍历" class="headerlink" title="一.使用遍历"></a>一.使用遍历</h4><p>1.trim.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取input</span><br><span class="hljs-keyword">const</span> getInput = <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;<br><span class="hljs-keyword">const</span> inputEle = el.<span class="hljs-property">tagName</span> !== <span class="hljs-string">&#x27;INPUT&#x27;</span> ? el.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>) : el;<br><span class="hljs-keyword">return</span> inputEle;<br>&#125;;<br><br><span class="hljs-keyword">const</span> trim = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;trim&#x27;</span>,<br><span class="hljs-attr">handle</span>: &#123;<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params">el, arg</span>) &#123;<br><span class="hljs-keyword">const</span> inputEle = <span class="hljs-title function_">getInput</span>(el);<br><span class="hljs-keyword">const</span> handler = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><span class="hljs-keyword">if</span> (!arg.<span class="hljs-property">value</span>) &#123;<br><span class="hljs-keyword">const</span> newVal = event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br><span class="hljs-keyword">if</span> (event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> !== newVal) &#123;<br>event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> = newVal;<br>&#125;<br><br><span class="hljs-keyword">if</span> (arg.<span class="hljs-property">value</span> === <span class="hljs-string">&#x27;all&#x27;</span>) &#123;<br>event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> = event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br>&#125;<br>&#125;;<br>inputEle.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;blur&#x27;</span>, handler);<br>&#125;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> trim;<br></code></pre></td></tr></table></figure><p>2.入口文件 directive&#x2F;index.js</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">import</span> <span class="hljs-built_in">trim</span> from <span class="hljs-string">&#x27;./modules/trim&#x27;</span>;<br><br><span class="hljs-keyword">const</span> directives = &#123;<br>    <span class="hljs-built_in">trim</span><br>&#125;<br></code></pre></td></tr></table></figure><p>3.main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> directiveList <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./directive&#x27;</span>;<br><span class="hljs-comment">// 注册指令</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> directive <span class="hljs-keyword">of</span> directiveList) &#123;<br>app.<span class="hljs-title function_">directive</span>(directive.<span class="hljs-property">name</span>, directive.<span class="hljs-property">handle</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="二-app-use"><a href="#二-app-use" class="headerlink" title="二.app.use"></a>二.app.use</h4><p>1.trim.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span> 自定义指令v-trim</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">const</span> trim = &#123;<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params">el, arg</span>) &#123;<br><span class="hljs-keyword">const</span> inputEle = el.<span class="hljs-property">tagName</span> !== <span class="hljs-string">&#x27;INPUT&#x27;</span> ? el.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>) : el;<br><span class="hljs-keyword">const</span> handler = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><span class="hljs-keyword">if</span> (!arg.<span class="hljs-property">value</span>) &#123;<br><span class="hljs-keyword">const</span> newVal = event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br><span class="hljs-keyword">if</span> (event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> !== newVal) &#123;<br>event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> = newVal;<br>&#125;<br><br><span class="hljs-keyword">if</span> (arg.<span class="hljs-property">value</span> === <span class="hljs-string">&#x27;all&#x27;</span>) &#123;<br>event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> = event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br>&#125;<br>&#125;;<br>inputEle.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;blur&#x27;</span>, handler);<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> trim;<br></code></pre></td></tr></table></figure><p>2.入口文件 directive&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> trim <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/trim&#x27;</span>;<br><br><span class="hljs-keyword">const</span> directives = &#123;<br>trim<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-title function_">install</span>(<span class="hljs-params">app</span>) &#123;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(directives).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>app.<span class="hljs-title function_">directive</span>(key, directives[key]);<br>&#125;);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>3.main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> directiveList <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./directive&#x27;</span>;<br><span class="hljs-comment">// 注册指令</span><br>app.<span class="hljs-title function_">use</span>(directiveList);<br></code></pre></td></tr></table></figure><h2 id="1-vue3-实现文本超出悬浮提示-title-自定义指令"><a href="#1-vue3-实现文本超出悬浮提示-title-自定义指令" class="headerlink" title="1.vue3 实现文本超出悬浮提示 title 自定义指令"></a>1.vue3 实现文本超出悬浮提示 title 自定义指令</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-comment">// 指令所在组件的 VNode 及其子 VNode 全部更新后调用</span><br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tooltip&#x27;</span>,<br><span class="hljs-attr">handle</span>: &#123;<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params">el</span>) &#123;<br><span class="hljs-comment">/* 第1步：先要创建一个容器`span`去获取文本的宽度 */</span><br><span class="hljs-comment">// 获取当前元素的style</span><br><span class="hljs-keyword">const</span> curStyle = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">getComputedStyle</span>(el, <span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-comment">// 创建一个容器来记录文字的width</span><br><span class="hljs-keyword">const</span> textSpan = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;span&#x27;</span>);<br><span class="hljs-comment">// 设置新容器的字体样式，确保与当前需要隐藏的样式相同</span><br>textSpan.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = curStyle.<span class="hljs-property">fontSize</span>;<br>textSpan.<span class="hljs-property">style</span>.<span class="hljs-property">fontWeight</span> = curStyle.<span class="hljs-property">fontWeight</span>;<br>textSpan.<span class="hljs-property">style</span>.<span class="hljs-property">fontFamily</span> = curStyle.<span class="hljs-property">fontFamily</span>;<br><span class="hljs-comment">// 将容器插入body，如果不插入，offsetWidth为0</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(textSpan);<br><span class="hljs-comment">// 设置新容器的文字</span><br>textSpan.<span class="hljs-property">innerHTML</span> = el.<span class="hljs-property">innerText</span>;<br><span class="hljs-comment">// 如果字体元素大于当前元素，则需要隐藏</span><br><span class="hljs-comment">/* 第2步：用获取到的宽跟`el`的宽进行对比，如果文本字体大于当前`el`元素的宽度，则需要title提示</span><br><span class="hljs-comment"> * 第3步：监听`el`的`onmouseenter`以及`onmouseleave`的鼠标移入移出事件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (textSpan.<span class="hljs-property">offsetWidth</span> &gt; el.<span class="hljs-property">offsetWidth</span>) &#123;<br><span class="hljs-comment">// 给当前元素设置超出隐藏</span><br>el.<span class="hljs-property">style</span>.<span class="hljs-property">overflow</span> = <span class="hljs-string">&#x27;hidden&#x27;</span>;<br>el.<span class="hljs-property">style</span>.<span class="hljs-property">textOverflow</span> = <span class="hljs-string">&#x27;ellipsis&#x27;</span>;<br>el.<span class="hljs-property">style</span>.<span class="hljs-property">whiteSpace</span> = <span class="hljs-string">&#x27;nowrap&#x27;</span>;<br><span class="hljs-comment">// 鼠标移入</span><br>el.<span class="hljs-property">onmouseenter</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br><span class="hljs-comment">/* 第4步：鼠标移入`onmouseenter`事件里需要处理title提示的显示 */</span><br><br><span class="hljs-comment">// 创建浮层元素并设置样式</span><br><span class="hljs-keyword">const</span> kxmTooltipDom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>kxmTooltipDom.<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span> = <span class="hljs-string">`</span><br><span class="hljs-string">          display: inline-block;</span><br><span class="hljs-string">          max-width: 400px;</span><br><span class="hljs-string">                max-height: 400px;</span><br><span class="hljs-string">          position: absolute;</span><br><span class="hljs-string">                top: <span class="hljs-subst">$&#123;e.clientY + <span class="hljs-number">5</span>&#125;</span>px;</span><br><span class="hljs-string">          left: <span class="hljs-subst">$&#123;e.clientX&#125;</span>px;</span><br><span class="hljs-string">          padding: 10px;</span><br><span class="hljs-string">          overflow: auto;</span><br><span class="hljs-string">          font-size: 14px;</span><br><span class="hljs-string">                color: #fff;</span><br><span class="hljs-string">                background: rgba(0, 0 , 0, .6);</span><br><span class="hljs-string">                border-radius: 5px;</span><br><span class="hljs-string">                z-index: 19999</span><br><span class="hljs-string">              `</span>;<br><span class="hljs-comment">// 设置id方便寻找</span><br>kxmTooltipDom.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;kxm-tooltip&#x27;</span>);<br><span class="hljs-comment">// 将浮层插入到body中</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(kxmTooltipDom);<br><span class="hljs-comment">// 浮层中的文字</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;kxm-tooltip&#x27;</span>).<span class="hljs-property">innerHTML</span> = el.<span class="hljs-property">innerText</span>;<br>&#125;;<br><span class="hljs-comment">// 鼠标移出</span><br>el.<span class="hljs-property">onmouseleave</span> = <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...<span class="hljs-variable language_">arguments</span>);<br><span class="hljs-comment">/* 第5步：鼠标移出`onmouseleave`需要移出title显示的元素 */</span><br><br><span class="hljs-comment">// 找到浮层元素并移出</span><br><span class="hljs-keyword">const</span> kxmTooltipDom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;kxm-tooltip&#x27;</span>);<br>kxmTooltipDom &amp;&amp; <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(kxmTooltipDom);<br>&#125;;<br>&#125;<br><span class="hljs-comment">// 需要注意：更新完之后需要移除容器，不然body里会多一个span元素内容</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(textSpan);<br>&#125;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="Button-按钮"><a href="#Button-按钮" class="headerlink" title="Button 按钮"></a>Button 按钮</h1><div>常用的操作按钮</div><p>:::demo 使用<code>type</code>，<code>plain</code>，<code>round</code>来定义 Button 的样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;el-button&gt;Small&lt;/el-button&gt;<br>&lt;el-button size=&quot;small&quot;&gt;Middle&lt;/el-button&gt;<br>&lt;el-button&gt;Large&lt;/el-button&gt;<br>&lt;el-button disabled&gt;Disabled&lt;/el-button&gt;<br>&lt;/template&gt;<br><br>&lt;style&gt;<br>button &#123;<br>margin: 0 20px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>:::</p><p>:::demo 使用<code>type</code>，<code>plain</code>，<code>round</code>来定义 Button 的样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;chbtn /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>实用工具</title>
    <link href="/2024/05/22/content/function/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <url>/2024/05/22/content/function/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="前端网站"><a href="#前端网站" class="headerlink" title="前端网站"></a>前端网站</h1><p><img src="https://pic.imgdb.cn/item/6419aca7a682492fccbe88ec.jpg"></p><h2 id="vue-生态"><a href="#vue-生态" class="headerlink" title="vue 生态"></a>vue 生态</h2><p><a href="https://cn.vuejs.org/">Vue3</a></p><p><a href="https://router.vuejs.org/zh/">Vue Router</a></p><p><a href="https://pinia.vuejs.org/zh/">Pinia</a></p><p><a href="https://vuex.vuejs.org/zh/">Vuex </a></p><p><a href="https://cn.vitejs.dev/">Vite | 下一代的前端工具链</a></p><p><a href="https://webpack.docschina.org/concepts/"> webpack5 </a></p><p><a href="https://vitepress.vuejs.org/">VitePress</a></p><p><a href="https://vuepress.vuejs.org/zh/">VuePress </a></p><p><a href="https://vitejs.cn/vitepress/">VitePress 中文网 (vitejs.cn)</a></p><h2 id="开源工具"><a href="#开源工具" class="headerlink" title="开源工具"></a>开源工具</h2><p><a href="https://element-plus.gitee.io/zh-CN/">Element Plus</a></p><p><a href="https://echarts.apache.org/zh/index.html">ECharts</a></p><p><a href="https://tdesign.tencent.com/">TDesign - 开源的企业级设计体系</a></p><p><a href="https://www.bootcdn.cn/">BootCDN - CDN 加速服务</a></p><p><a href="https://gitee.com/">码云 - gitee</a></p><p><a href="https://github.com/">GitHub</a></p><h2 id="技术社区和分享文档"><a href="#技术社区和分享文档" class="headerlink" title="技术社区和分享文档"></a>技术社区和分享文档</h2><p><a href="https://juejin.cn/">稀土掘金</a></p><p><a href="https://e4ebh5yc27.feishu.cn/drive/home/">飞书云文档 </a></p><p><a href="https://www.makeapie.cn/echarts">echarts 图表可视化案例</a></p><p><a href="https://www.isqqw.com/">ECharts 图表集</a></p><p><a href="https://lhammer.cn/You-need-to-know-css/#/zh-cn/">CSS Tricks - css 动画案例</a></p><p><a href="http://chartsdev.com/">数据可视化技术分享</a></p><p><a href="http://www.jimmyxuexue.top:999/">前端加油站-个人博客</a></p><p><a href="http://vue.tuokecat.com/blog/">Home | aehyok- 个人博客</a></p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p><a href="https://es6.ruanyifeng.com/">ES6 入门教程 </a></p><p><a href="http://www.webgl3d.cn/Three.js/">Three.js 教程 </a></p><p><a href="http://www.wjceo.com/blog/threejs/">threejs | 中文案例网</a></p><p><a href="https://interview2.poetries.top/">前端进阶之旅 </a></p><p><a href="https://typescript.bootcss.com/">TypeScript 中文手册 </a></p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p><img src="https://pic.imgdb.cn/item/64199f8ba682492fcca40bae.jpg"></p><p><a href="https://www.67tool.com/?from=itab.link">即时工具</a></p><p><a href="https://www.yeyulingfeng.com/tool/">夜雨聆风工具箱</a></p><p><a href="https://www.aliyundrive.com/drive">阿里云盘</a></p><p><a href="https://www.wotianna.com/tag/gxlrj/">高效率软件</a></p><p><a href="https://www.bookmarkearth.com/">书签地球</a></p><p><a href="http://www.eryi.org/searchsites/cili-search.html">磁力搜索引擎神器大全</a></p><p><a href="https://chrome.zzzmh.cn/#/index">极简插件_Chrome 扩展插件</a></p><p><a href="https://www.superbed.cn/help#item=10">聚合图床 - 免费无限图片上传 </a></p><p><a href="https://www.speedtest.cn/?from=itab">测速网 - 专业测网速</a></p><p><a href="https://docs.qq.com/">腾讯文档-支持多人在线编辑</a></p>]]></content>
    
    
    <categories>
      
      <category>实用工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>css选择器</title>
    <link href="/2024/05/22/content/css/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <url>/2024/05/22/content/css/%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h1 id="placeholder-shown"><a href="#placeholder-shown" class="headerlink" title=":placeholder-shown"></a>:placeholder-shown</h1><p>设置当前显示占位符文本的输入的样式；用户未在文本框中键入任何内容</p><p>根据您的输入是否为空，应用一些动态样式非常好</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* :placeholder-shown */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid silver;</span><br><span class="language-css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">3px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.clear</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">top</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">right</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f00</span>;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">8px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">8px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:placeholder-shown</span> + <span class="hljs-selector-class">.clear</span>&#123;</span><br><span class="language-css">      <span class="hljs-attribute">border-color</span>: teal;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#f00</span>;</span><br><span class="language-css">      <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- :placeholder-shown --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 设置当前显示占位符文本的输入的样式</span><br><span class="hljs-comment">  用户未在文本框中键入任何内容</span><br><span class="hljs-comment">根据您的输入是否为空，应用一些动态样式非常好--&gt;</span><br><br><span class="hljs-comment">&lt;!-- 例如可用作input的清除小按钮 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Type something here!&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Node.js</title>
    <link href="/2024/05/22/content/nodejs/nodejs/"/>
    <url>/2024/05/22/content/nodejs/nodejs/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="什么是nodejs"><a href="#什么是nodejs" class="headerlink" title="什么是nodejs"></a>什么是nodejs</h2><p>在<a href="https://nodejs.org/en">nodejs官网</a>上的描述是一个免费的、开源的、跨平台的 JavaScript 运行时 允许开发人员创建服务器、Web 应用程序、 命令行工具和脚本。基于Chrome V8引擎的JavaScript运行环境，使用了一个事件驱动、非阻塞式I&#x2F;O模型，让JavaScript 运行在服务端的开发平台。</p><h2 id="nodejs的用途"><a href="#nodejs的用途" class="headerlink" title="nodejs的用途"></a>nodejs的用途</h2><p>通过查阅资源，总结出nodejs的用途如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">Node.js 有以下主要用途：<br><br>服务器端开发：<br>构建 Web 应用服务器，处理 HTTP 请求和响应。<br>开发 API 服务，为前端或其他应用提供数据接口。<br><br>实时应用：<br>实现实时聊天、实时通知等实时通信功能。<br>配合 WebSockets 等技术构建实时交互的应用。<br><br>命令行工具开发：<br>可以创建各种实用的命令行程序，用于自动化任务等。<br><br>数据处理：<br>高效地处理大量数据，如数据抓取、数据转换等。<br><br>网络应用：<br>构建各种网络相关的应用，如网络监控工具等。<br><br>微服务架构：<br>用于构建分布式的微服务系统。<br><br>工具和库开发：<br>创建可复用的 Node.js 模块和库，供其他开发者使用。<br><br>物联网应用：<br>在物联网领域进行设备连接和数据处理等操作<br></code></pre></td></tr></table></figure><p>本文主要讲解nodejs的服务器端开发，构建 Web 应用服务器，处理 HTTP 请求和响应；开发 API 接口服务，文章最后，也会写几个应用示例供参考</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>Node.js中不能使用DOM和BOM的API，可以使用console和定时器API</li><li>Node.js的顶级对象为global,也可以使用globalThis访问顶级对象</li><li>在js和nodejs中的事件循环机制，微任务优于宏任务先执行；常见的微任务Promise、process.nextTick,常见的微任务有setTimeout</li><li>从 Node.js v12 开始，通过实验性功能（–experimental-modules）可以使用 <code>.mjs</code> 扩展名的文件来启用对 ES6 模块的支持，并使用 <code>import</code> 语句；本文示例均为CommonJS（require）语法</li></ul><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>nodejs中自带很多模块，我们可分为内置模块和外置模块</p><ol><li>内置模块：<ol><li><code>fs</code>（File System）模块：提供对文件系统的操作，如读取、写入、删除文件和目录等。</li><li><code>http</code> 模块：支持 HTTP 协议，可用于创建 HTTP 服务器和客户端，处理请求和响应。</li><li><code>url</code> 模块：用于解析和操作 URL。</li><li><code>path</code> 模块：处理文件和目录路径。</li><li><code>events</code> 模块：实现事件驱动编程。</li><li><code>net</code> 模块：进行网络通信，如创建 TCP 和 UDP 套接字。</li><li><code>crypto</code> 模块：加密和解密操作。</li><li><code>os</code> 模块：与操作系统交互，获取系统信息。</li></ol></li><li>第三方模块：<ol><li><code>Express</code>：一个流行的 Web 应用框架。</li><li><code>Mongoose</code>：用于连接 MongoDB 数据库并进行数据建模。</li><li><code>Socket.io</code>：实现实时通信。</li><li><code>Passport</code>：处理认证和授权。</li><li><code>lodash</code>：提供实用的工具函数。</li><li><code>Moment</code>：日期和时间操作。</li></ol></li></ol><p>下面我们将着重介绍fs模块、path模块、http模块以及express框架的使用</p><h2 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h2><p>fs是文件系统的缩写，用于文件系统的增删改查，fs是node的内置模块无需安装，可直接引入使用</p><h3 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h3><p>文件写入有同步写入、异步写入、追加写入、流式写入</p><p>相关语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">异步写入  fs.<span class="hljs-title function_">writeFile</span>(path, data[, options], callback)<br>同步写入  fs.<span class="hljs-property">writeFileSync</span> (path, data[, options])<br><br>异步追加 fs.<span class="hljs-title function_">appendFile</span>(path, data[, options], callback)<br>同步追加 fs.<span class="hljs-title function_">appendFileSync</span>(path, data[, options])<br><br>流式写入 fs.<span class="hljs-title function_">createWriteStream</span>(path,[, options])<br></code></pre></td></tr></table></figure><p>参数说明：</p><p>path 文件名的路径</p><p>data 待写入的数据</p><p>options 选项设置 （可选）</p><p>callback 写入回调</p><p>无返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">如下新建 index.<span class="hljs-property">js</span><br><br>同目录下执行以下命令即可运行<br><br>node index<br></code></pre></td></tr></table></figure><p>示例 </p><p>为方便演示，四个文件写入方法均放在index.js文件中，并且同目录下建立.&#x2F;西游记.txt </p><p>可依次注释查看运行结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// index.js</span><br><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> data = <span class="hljs-string">&#x27;西游记讲述了一个...&#x27;</span><br><br><br><span class="hljs-comment">// 异步写入</span><br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;./西游记.txt&#x27;</span>,data , <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入成功&#x27;</span>)<br>&#125;)<br><br><br><span class="hljs-comment">// 同步写入</span><br><span class="hljs-keyword">try</span> &#123;<br>    fs.<span class="hljs-property">writeFileSync</span> (<span class="hljs-string">&#x27;./西游记.txt&#x27;</span>,data)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入成功&#x27;</span>)<br>&#125; <span class="hljs-keyword">catch</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入失败&#x27;</span>)<br>&#125;<br><br><br><span class="hljs-comment">/* 追加写入 */</span> <br><br><span class="hljs-comment">// 异步追加</span><br>fs.<span class="hljs-title function_">appendFile</span>(<span class="hljs-string">&#x27;./西游记.txt&#x27;</span>, <span class="hljs-string">&#x27;12123212121&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;追加写入成功&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 同步追加</span><br><span class="hljs-keyword">try</span> &#123;<br>    fs.<span class="hljs-title function_">appendFileSync</span>(<span class="hljs-string">&#x27;./西游记.txt&#x27;</span>, <span class="hljs-string">&#x27;121213232lfdsdsdsds&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;同步追加写入成功...&#x27;</span>)<br>&#125; <span class="hljs-keyword">catch</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;同步追加写入失败...&#x27;</span>)<br>&#125;<br><br><br><br><span class="hljs-comment">// 流式写入</span><br><span class="hljs-keyword">const</span> ws = fs.<span class="hljs-title function_">createWriteStream</span>(<span class="hljs-string">&#x27;./西游记.txt&#x27;</span>)<br>ws.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;21213231&#x27;</span>)<br>ws.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;2fdfdfefe&#x27;</span>)<br><span class="hljs-comment">// ...</span><br><br>ws.<span class="hljs-title function_">end</span>()<br></code></pre></td></tr></table></figure><p>  程序打开文件是会消耗资源的，使用流式写入可以减少文件打开关闭的次数，流式写入（createWriteStream）适合大文件的持续写入，writeFile 适合于 写入频率较低的场景</p><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>文件读取顾名思义，就是通过程序从文件中取出其中的数据，我们可以使用如下几种方式：</p><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">异步读取：fs.<span class="hljs-title function_">readFile</span>(path[, options], callback)<br>同步读取：fs.<span class="hljs-title function_">readFileSync</span>(path[, options])<br>流式读取：fs.<span class="hljs-title function_">createReadStream</span>(path[, options])<br></code></pre></td></tr></table></figure><p>参数</p><p>path: 文件路径 </p><p>options: 选项配置 </p><p>callback: 回调函数</p><p>返回值：Object</p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-comment">/* 异步读取 */</span> <br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./西游记.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123; <br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;);<br> <br> <span class="hljs-comment">// 指定为utf-8</span><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./西游记.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123; <br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;);<br><br><br><span class="hljs-comment">/* 同步读取 */</span><br><span class="hljs-keyword">let</span> data = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;./西游记.txt&#x27;</span>);<br><span class="hljs-keyword">let</span> data2 = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;./西游记.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>);<br><br><br><span class="hljs-comment">/* 流式读取 */</span><br><span class="hljs-comment">//创建读取流对象</span><br><span class="hljs-keyword">let</span> rs = fs.<span class="hljs-title function_">createReadStream</span>(<span class="hljs-string">&#x27;./西游记.txt&#x27;</span>);<br><span class="hljs-comment">//每次取出 64k 数据后执行一次 data 回调</span><br>rs.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data); <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-property">length</span>);<br>&#125;);<br><span class="hljs-comment">//读取完毕后, 执行 end 回调</span><br>rs.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取完成&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="文件移动与重命名"><a href="#文件移动与重命名" class="headerlink" title="文件移动与重命名"></a>文件移动与重命名</h3><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">异步同命：名 fs.<span class="hljs-title function_">rename</span>(oldPath, newPath, callback)<br>异步同命：fs.<span class="hljs-title function_">renameSync</span>(oldPath, newPath)<br></code></pre></td></tr></table></figure><p>参数说明：</p><p>oldPath 文件当前的路径 </p><p>newPath 文件新的路径 </p><p>callback 操作后的回调</p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.<span class="hljs-title function_">rename</span>(<span class="hljs-string">&#x27;./观书有感.txt&#x27;</span>, <span class="hljs-string">&#x27;./论语/观书有感.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span>&#123; <br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;移动完成&#x27;</span>)<br>&#125;);<br> <br>fs.<span class="hljs-title function_">renameSync</span>(<span class="hljs-string">&#x27;./座右铭.txt&#x27;</span>, <span class="hljs-string">&#x27;./论语/我的座右铭.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><p>在 Node.js 中，我们可以使用unlink或unlinkSync来删除文件</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">fs.<span class="hljs-title function_">unlink</span>(path, callback)<br>fs.<span class="hljs-title function_">unlinkSync</span>(path)<br></code></pre></td></tr></table></figure><p>参数说明：</p><p>path        文件路径</p><p>callback  操作后的回调</p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br> <br>fs.<span class="hljs-title function_">unlink</span>(<span class="hljs-string">&#x27;./test.txt&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123; <br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除成功&#x27;</span>);<br>&#125;);<br> <br>fs.<span class="hljs-title function_">unlinkSync</span>(<span class="hljs-string">&#x27;./test2.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><p>在node.js中，我们可以使用mkdir或者mkdirSync来创建文件夹</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">fs.<span class="hljs-title function_">mkdir</span>(path[, options], callback)<br>fs.<span class="hljs-title function_">mkdirSync</span>(path[, options])<br></code></pre></td></tr></table></figure><p>参数说明：</p><p>path        文件夹路径</p><p>options 选项配置（ 可选 ）</p><p>callback 操作后的回调</p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-comment">//异步创建文件夹</span><br>fs.<span class="hljs-title function_">mkdir</span>(<span class="hljs-string">&#x27;./page&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;创建成功&#x27;</span>);<br>&#125;);<br> <br><span class="hljs-comment">//递归异步创建</span><br>fs.<span class="hljs-title function_">mkdir</span>(<span class="hljs-string">&#x27;./1/2/3&#x27;</span>, &#123;<span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span>&#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123; <br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;递归创建成功&#x27;</span>);<br>&#125;);<br> <br><span class="hljs-comment">//递归同步创建文件夹</span><br>fs.<span class="hljs-title function_">mkdirSync</span>(<span class="hljs-string">&#x27;./x/y/z&#x27;</span>, &#123;<span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure><h3 id="读取文件夹"><a href="#读取文件夹" class="headerlink" title="读取文件夹"></a>读取文件夹</h3><p>在Node.js中我们可以使用readdir 或者readdirSync 来读取文件夹</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">fs.<span class="hljs-title function_">readdir</span>(path[, options], callback)<br>fs.<span class="hljs-title function_">readdirSync</span>(path[, options])<br></code></pre></td></tr></table></figure><p>参数说明：</p><p>path        文件夹路径</p><p>options    选项配置（ 可选 ）</p><p>callback   操作后的回调</p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//异步读取</span><br>fs.<span class="hljs-title function_">readdir</span>(<span class="hljs-string">&#x27;./论语&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123; <br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;);<br><br><span class="hljs-comment">//同步读取</span><br><span class="hljs-keyword">let</span> data = fs.<span class="hljs-title function_">readdirSync</span>(<span class="hljs-string">&#x27;./论语&#x27;</span>); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br></code></pre></td></tr></table></figure><h3 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h3><p>在Node.js中我们可以使用rmdir或者rmdirSync来删除文件夹</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">fs.<span class="hljs-title function_">rmdir</span>(path[, options], callback)<br>fs.<span class="hljs-title function_">rmdirSync</span>(path[, options])<br></code></pre></td></tr></table></figure><p>参数说明：</p><p>path        文件夹路径</p><p>options    选项配置（ 可选 ）</p><p>callback   操作后的回调</p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-comment">//异步删除文件夹 </span><br>fs.<span class="hljs-title function_">rmdir</span>(<span class="hljs-string">&#x27;./page&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除成功&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">//异步递归删除文件夹</span><br>fs.<span class="hljs-title function_">rmdir</span>(<span class="hljs-string">&#x27;./1&#x27;</span>, &#123;<span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span>&#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123; <br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;递归删除&#x27;</span>)<br>&#125;);<br><br><span class="hljs-comment">//同步递归删除文件夹</span><br>fs.<span class="hljs-title function_">rmdirSync</span>(<span class="hljs-string">&#x27;./x&#x27;</span>, &#123;<span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span>&#125;)<br></code></pre></td></tr></table></figure><h3 id="查看资源状态"><a href="#查看资源状态" class="headerlink" title="查看资源状态"></a>查看资源状态</h3><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">fs.<span class="hljs-title function_">stat</span>(path[, options], callback)<br>fs.<span class="hljs-title function_">statSync</span>(path[, options])<br></code></pre></td></tr></table></figure><p>参数说明：</p><p>path        文件夹路径</p><p>options    选项配置（ 可选 ）</p><p>callback   操作后的回调</p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//异步获取状态</span><br>fs.<span class="hljs-title function_">stat</span>(<span class="hljs-string">&#x27;./data.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123; <br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;);<br><br><span class="hljs-comment">//同步获取状态</span><br><span class="hljs-keyword">let</span> data = fs.<span class="hljs-title function_">statSync</span>(<span class="hljs-string">&#x27;./data.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><p>data结果值对象结构：</p><p>size         文件体积 </p><p>birthtime  创建时间 </p><p>mtime      最后修改时间 </p><p>isFile        检测是否为文件</p><p>isDirectory 检测是否为文件夹</p><h2 id="dirname"><a href="#dirname" class="headerlink" title="dirname"></a>dirname</h2><p>__dirname 是Node.js中的全局变量，保存着 当前文件所在目录的绝对路径，可以使用   dirname 与文件名拼接成绝对路径</p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-comment">// 获取当前文件的绝对路径</span><br><span class="hljs-keyword">let</span> data = fs.<span class="hljs-title function_">readFileSync</span>(  dirname + <span class="hljs-string">&#x27;/data.txt&#x27;</span>); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br></code></pre></td></tr></table></figure><p>提示：</p><p>使用 fs 模块的时候，尽量使用   dirname 将路径转化为绝对路径，这样可以避免相对路径产生的Bug</p><h2 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h2><p>path提供了操作路径的功能，下面列举几个常用的api</p><table><thead><tr><th><strong>API</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>path.resolve</td><td>拼接规范的绝对路径 常用</td></tr><tr><td>path.sep</td><td>获取操作系统的路径分隔符</td></tr><tr><td>path.parse</td><td>解析路径并返回对象</td></tr><tr><td>path.basename</td><td>获取路径的基础名称</td></tr><tr><td>path.dirname</td><td>获取路径的目录名</td></tr><tr><td>path.extname</td><td>获得路径的扩展名</td></tr></tbody></table><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-comment">// 获取路径分隔符</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-property">sep</span>)<br><br><span class="hljs-comment">// 拼接绝对路径</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;test.txt&#x27;</span>))<br><br><span class="hljs-comment">// 解析路径</span><br><span class="hljs-keyword">let</span> pathname = <span class="hljs-string">&#x27;D:/program file/nodejs/node.exe&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">parse</span>(pathname))<br><br><span class="hljs-comment">// 获取路径基础名称 </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">basename</span>(pathname))<br> <br><span class="hljs-comment">//获取路径的目录名 </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">dirname</span>(pathname));<br> <br><span class="hljs-comment">//获取路径的扩展名 </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">extname</span>(pathname));<br></code></pre></td></tr></table></figure><h2 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h2><p>http中文名叫<strong>超文本传输协议，</strong>底层基于TCP&#x2F;IP的应用层通信协议，这个协议详细规定了浏览器和万维网服务器之间的通信规则。</p><p>协议中主要规定了两个方面的内容</p><p>客户端：客户端向服务端发送请求叫请求报文</p><p>服务端：服务端向客户端发送请求叫响应报文</p><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p>请求报文通常由以下几个部分组成 请求头、请求行、请求主体、空白体</p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><ul><li>请求方法：表示对资源的操作方式，常见的有 GET（获取资源）、POST（提交数据以创建或更新资源）、PUT（更新资源）、DELETE（删除资源）等。</li><li>统一资源标识符（URI）：确切地指出要请求的资源，它可以是相对路径或绝对路径等。</li><li>HTTP 版本：明确此次请求所遵循的 HTTP 协议版本。</li></ul><p>示例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">例如，“GET /index.html HTTP/1.1”就是一个典型的请求行，表示使用 GET 方法请求“/index.html”资源，遵循 HTTP/1.1 协议<br></code></pre></td></tr></table></figure><h4 id="http请求头及其含义："><a href="#http请求头及其含义：" class="headerlink" title="http请求头及其含义："></a>http请求头及其含义：</h4><ul><li>Accept：告知服务器客户端可以接受的内容类型，如 <code>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</code>。</li><li>Accept-Charset：可接受的字符集。</li><li>Accept-Encoding：可接受的编码方式，如 <code>gzip, deflate</code>。</li><li>Accept-Language：偏好的语言。</li><li>Authorization：包含用于验证用户身份的凭证。</li><li>Cache-Control：控制缓存行为。</li><li>Connection：如 <code>Connection: keep-alive</code> 表示保持长连接。</li><li>Content-Length：请求主体的长度。</li><li>Content-Type：请求主体的类型，如 <code>Content-Type: application/json</code>。</li><li>Host：目标主机地址。</li><li>If-Modified-Since：如果资源在指定时间后未被修改，则返回 304 状态码。</li><li>Referer：指示请求是从哪个页面发起的。</li><li>User-Agent：包含客户端的信息，如浏览器类型、版本等。</li></ul><p>示例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">GET /example HTTP/1.1<br>Host: www.example.com<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,<span class="hljs-emphasis">*/*</span>;q=0.8<br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: en-US,en;q=0.9<br>Connection: keep-alive<br>Cache-Control: max-age=0<br></code></pre></td></tr></table></figure><h4 id="http的请求体"><a href="#http的请求体" class="headerlink" title="http的请求体"></a>http的请求体</h4><p>请求体内容的格式是非常灵活的</p><p>（可以是空）&#x3D;&#x3D;&gt; GET请求，</p><p>（也可以是字符串，还可以是JSON）&#x3D;&#x3D;&#x3D;&gt; POST请求例如：</p><p>字符串：keywords&#x3D;手机&amp;price&#x3D;2000 JSON：{“keywords”:”手机”,”price”:2000}</p><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><ol><li>状态行：包含 HTTP 协议版本、状态码和状态描述。</li><li>响应头：包含各种与响应相关的信息，如服务器信息、内容类型、缓存控制等。</li><li>空行：分隔响应头和响应主体。</li><li>响应主体：实际返回给客户端的数据内容，如网页的 HTML 代码、图片数据等。</li></ol><h4 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">HTTP/1.1 200 OK<br></code></pre></td></tr></table></figure><p>HTTP&#x2F;1.1：HTTP协议版本号</p><p>200：响应状态码 404 Not Found 500 Internal Server Error</p><p>还有一些状态码，参考：  <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></strong></p><p>OK：响应状态描述</p><h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">Cache-Control:缓存控制 private 私有的，只允许客户端缓存数据<br>Connection 链接设置<br>Content-Type:text/html;charset=utf-8  设置响应体的数据类型以及字符集,响应体为html，字符集<br>utf-8<br>Content-Length:响应体的长度，单位为字节<br></code></pre></td></tr></table></figure><h3 id="创建http服务"><a href="#创建http服务" class="headerlink" title="创建http服务"></a>创建http服务</h3><p>下面是一个创建http服务示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><br><span class="hljs-comment">// 创建server服务</span><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 用于解决响应内容中文乱码</span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>,<span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>);    <br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;http server&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 监听端口，启动服务</span><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;http://127.0.0.1:3000&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>注意事项：HTTP 协议默认端口是 80 。HTTPS 协议的默认端口是 443</p><h3 id="获取-HTTP-请求报文"><a href="#获取-HTTP-请求报文" class="headerlink" title="获取 HTTP 请求报文"></a><strong>获取 HTTP 请求报文</strong></h3><p>想要获取请求的数据，需要通过request对象</p><table><thead><tr><th><strong>含义</strong></th><th><strong>语法</strong></th></tr></thead><tbody><tr><td>请求方法</td><td>request.method</td></tr><tr><td>请求版本</td><td>request.httpVersion</td></tr><tr><td>请求路径</td><td>request.url</td></tr><tr><td>URL 路径</td><td>require(‘url’).parse(request.url).pathname</td></tr><tr><td>URL 查询字符串</td><td>require(‘url’).parse(request.url, true).query</td></tr><tr><td>请求头</td><td>request.headers</td></tr><tr><td>请求体</td><td>request.on(‘data’, function(chunk){}) request.on(‘end’, function(){});</td></tr></tbody></table><p>注意事项：</p><ol><li>request.url 只能获取路径以及查询字符串，无法获取 URL 中的域名以及协议的内容</li><li>request.headers  将请求信息转化成一个对象，并将属性名都转化成了『小写』</li><li>关于路径：如果访问网站的时候，只填写了 IP 地址或者是域名信息，此时请求的路径为『 &#x2F; 』</li><li>关于 favicon.ico：这个请求是属于浏览器自动发送的请求</li></ol><h3 id="设置-HTTP-响应报文"><a href="#设置-HTTP-响应报文" class="headerlink" title="设置 HTTP 响应报文"></a><strong>设置 HTTP 响应报文</strong></h3><p>想要设置响应的数据，需要通过response对象</p><table><thead><tr><th><strong>作用</strong></th><th><strong>语法</strong></th></tr></thead><tbody><tr><td>设置响应状态码</td><td>response.statusCode</td></tr><tr><td>设置响应状态描述</td><td>response.statusMessage （ 用的非常少 ）</td></tr><tr><td>设置响应头信息</td><td>response.setHeader(‘头名’, ‘头值’)</td></tr><tr><td>设置响应体</td><td>response.write(‘xx’) response.end(‘xxx’)</td></tr></tbody></table><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 设置响应状态码</span><br>  res.<span class="hljs-property">statusCode</span> = <span class="hljs-number">200</span>;<br><br>  <span class="hljs-comment">// 设置响应头信息</span><br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/plain; charset=utf-8&#x27;</span>);<br><br>  <span class="hljs-comment">// 设置响应体内容</span><br>  res.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;你好，世界！&#x27;</span>);<br><br>  <span class="hljs-comment">// 结束响应</span><br>  res.<span class="hljs-title function_">end</span>();<br>&#125;);<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;服务器启动，监听端口 3000&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>write 和 end 的两种使用情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//1. write 和 end 的结合使用 响应体相对分散</span><br>response.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;xx&#x27;</span>); <br>response.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;xx&#x27;</span>); <br>response.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;xx&#x27;</span>);<br>response.<span class="hljs-title function_">end</span>(); <span class="hljs-comment">//每一个请求，在处理的时候必须要执行 end 方法的</span><br> <br><span class="hljs-comment">//2. 单独使用 end 方法 响应体相对集中</span><br>response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>);<br></code></pre></td></tr></table></figure><p>通过http模块的请求对象（request）和响应对象(response)，我们就可以书写后台接口，下面是一个示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">url</span> === <span class="hljs-string">&#x27;/api/getList&#x27;</span>) &#123;<br>    res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span> &#125;);<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123; <span class="hljs-attr">data</span>: [] &#125;));<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">404</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span> &#125;);<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Not Found&#x27;</span>);<br>  &#125;<br>&#125;);<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server is running on port 8080&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="设置资源类型（mime类型）"><a href="#设置资源类型（mime类型）" class="headerlink" title="设置资源类型（mime类型）"></a><strong>设置资源类型（mime类型）</strong></h3><p>媒体类型（通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型 ）是一种标准，用来表示文档、文件或字节流的性质和格式。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">mime 类型结构： [type]/[subType]<br>例如： text/html text/css image/jpeg image/png application/json<br></code></pre></td></tr></table></figure><p>HTTP 服务可以设置响应头 Content-Type 来表明响应体的 MIME 类型，浏览器会根据该类型决定如何处理资源</p><p>下面是常见文件对应的 mime 类型</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">html: &#x27;text/html&#x27;, <br>css: &#x27;text/css&#x27;,<br>js: &#x27;text/javascript&#x27;, <br>png: &#x27;image/png&#x27;, <br>jpg: &#x27;image/jpeg&#x27;, <br>gif: &#x27;image/gif&#x27;, <br>mp4: &#x27;video/mp4&#x27;, <br>mp3: &#x27;audio/mpeg&#x27;,<br>json: &#x27;application/json&#x27;<br></code></pre></td></tr></table></figure><p>对于未知的资源类型，可以选择 application&#x2F;octet-stream 类型，浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，也就是我们常见的 下载 效果</p><p>如下一个示例，读取文件的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">request, response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//获取请求的方法已经路径</span><br>    <span class="hljs-keyword">let</span> &#123;url,method&#125; = request;<br>    <span class="hljs-comment">//文件夹路径</span><br>    <span class="hljs-keyword">let</span> rootDir =   dirname + <span class="hljs-string">&#x27;/public&#x27;</span>;<br>    <span class="hljs-comment">//拼接文件路径</span><br>    <span class="hljs-keyword">let</span> filePath = rootDir + url;<br>    <span class="hljs-comment">//读取文件内容 </span><br>    fs.<span class="hljs-title function_">readFile</span>(filePath, <span class="hljs-function">(<span class="hljs-params">err, data</span>)=&gt;</span>&#123;<br>        <span class="hljs-comment">//判断 </span><br>        <span class="hljs-keyword">if</span>(err)&#123;<br>            <span class="hljs-comment">//如果出现错误，响应404状态码 </span><br>            response.<span class="hljs-property">statusCode</span> = <span class="hljs-number">404</span>; <br>            response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//响应文件内容 </span><br>            response.<span class="hljs-title function_">end</span>(data);<br>        &#125;<br>    &#125;)<br>&#125;)<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;80端口正在启动中&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h2><p>os模块可以获取当前操作系统的相关信息，下面列举几个示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> os = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;os&#x27;</span>)<br><br><span class="hljs-comment">// 返回每个cpu内核信息，返回结果是一个对象数组</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(os.<span class="hljs-title function_">cpus</span>()) <br><br><span class="hljs-comment">// 系统临时文件夹</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(os.<span class="hljs-title function_">tmpdir</span>()) <span class="hljs-comment">// C:\Users\ADMINI~1\AppData\Local\Temp</span><br><br><span class="hljs-comment">// 返回操作系统主机名</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(os.<span class="hljs-title function_">hostname</span>()) <span class="hljs-comment">// DESKTOP-ED0DIB4</span><br><br><span class="hljs-comment">// </span><br></code></pre></td></tr></table></figure><h1 id="express框架"><a href="#express框架" class="headerlink" title="express框架"></a>express框架</h1><p><a href="https://www.expressjs.com.cn/">express</a>是基于Node.js平台，快速、极简的web开发框架，express我们可以单独使用，也可以下载express的脚手架。常见的Node.js框架有express、koa、Nest等。</p><p>安装express模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">npm init<br>npm i express<br></code></pre></td></tr></table></figure><h2 id="express路由"><a href="#express路由" class="headerlink" title="express路由"></a>express路由</h2><p>一个路由的组成有 请求方法 ， 路径 和 回调函数 组成 </p><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.&lt;method&gt;(path，callback)<br></code></pre></td></tr></table></figure><p>示例</p><p> 下面详细介绍了</p><ul><li>如何创建路由，get请求、post请求</li><li>请求对象的获取</li><li>详情对象的设置</li><li>路由匹配，404路由</li><li>all路由，GET、POST、PUT、DELETE 等任何 HTTP 请求方法都会执行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//导入 express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br> <br><span class="hljs-comment">//创建应用对象</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br> <br><span class="hljs-comment">//创建 get 路由</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123; <br>    <span class="hljs-comment">/* 获取请求头参数 */</span><br>    <span class="hljs-comment">//1. 获取报文的方式与原生 HTTP 获取方式是兼容的 </span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">method</span>);     <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">url</span>); <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">httpVersion</span>); <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">headers</span>);<br>    <br>    <span class="hljs-comment">//2. express 独有的获取报文的方式</span><br>    <span class="hljs-comment">//获取查询字符串</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">query</span>); <br>    <span class="hljs-comment">// 获取指定的请求头</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;host&#x27;</span>));<br>    <br>    <span class="hljs-comment">/* 获取响应头参数 */</span><br>    <span class="hljs-comment">// 1. express 中设置响应的方式兼容 HTTP 模块的方式</span><br>    res.<span class="hljs-property">statusCode</span> = <span class="hljs-number">404</span>; <br>    res.<span class="hljs-property">statusMessage</span> = <span class="hljs-string">&#x27;xxx&#x27;</span>; <br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;xyz&#x27;</span>);<br>    res.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;响应体&#x27;</span>);<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>);<br>    <br>    <br>    <span class="hljs-comment">//2. express 的响应方法 </span><br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>); <span class="hljs-comment">//设置响应状态码 </span><br>    res.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>,<span class="hljs-string">&#x27;yyy&#x27;</span>);<span class="hljs-comment">//设置响应头 </span><br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;中文响应不乱码&#x27;</span>);<span class="hljs-comment">//设置响应体</span><br>    <span class="hljs-comment">//连贯操作  </span><br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>,<span class="hljs-string">&#x27;yyy&#x27;</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;你好朋友&#x27;</span>)<br><br>&#125;);<br> <br><span class="hljs-comment">// 获取路由参数</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/:id.html&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;商品详情, 商品 id 为&#x27;</span> + req.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>);<br>&#125;);<br> <br><span class="hljs-comment">//创建 post 路由</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123; <br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;登录成功&#x27;</span>);<br>&#125;);<br> <br><span class="hljs-comment">//匹配所有的请求方法 </span><br><span class="hljs-comment">// 无论使用 GET、POST、PUT、DELETE 等任何 HTTP 方法访问 /search 路由，都会执行相应的处理函数。</span><br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&#x27;/search&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;1 秒钟为您找到相关结果约 100,000,000 个&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">//自定义 404 路由</span><br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>)<br>&#125;);<br> <br><span class="hljs-comment">//监听端口 启动服务</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;服务已经启动, 端口监听为 3000&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>Express 中间件是一个函数，它可以访问请求对象（req）、响应对象（res）和应用中处于请求-响应循环流程中的中间件，一般被命名为 next 的变量</p><h3 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h3><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-keyword">let</span> recordMiddleware = <span class="hljs-keyword">function</span>(<span class="hljs-params">request,response,next</span>)&#123;<br>    <span class="hljs-comment">//实现功能代码</span><br>    <span class="hljs-comment">//.....</span><br>    <span class="hljs-comment">//执行next函数(当如果希望执行完中间件函数之后，仍然继续执行路由中的回调函数，必须调用next)     </span><br>    <span class="hljs-title function_">next</span>();<br>&#125;<br><br>app.<span class="hljs-title function_">use</span>(recordMiddleware);<br><br><span class="hljs-comment">// 可以定义多个全局中间件，并且也可以使用匿名函数</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">request, response, next</span>) &#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;定义第二个中间件&#x27;</span>);<br>    <span class="hljs-title function_">next</span>();<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h3><p>如果 只需要对某一些路由进行功能封装 ，则就需要路由中间件</p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/路径&#x27;</span>,<span class="hljs-string">`中间件函数`</span>,<span class="hljs-function">(<span class="hljs-params">request,response</span>)=&gt;</span>&#123;<br> <br>&#125;);<br> <br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/路径&#x27;</span>,<span class="hljs-string">`中间件函数1`</span>,<span class="hljs-string">`中间件函数2`</span>,<span class="hljs-function">(<span class="hljs-params">request,response</span>)=&gt;</span>&#123;<br> <br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="静态资源中间件"><a href="#静态资源中间件" class="headerlink" title="静态资源中间件"></a>静态资源中间件</h3><p>路由响应动态资源，静态资源中间件响应静态资源</p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">//静态资源中间件的设置，将当前文件夹下的public目录作为网站的根目录 </span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;./public&#x27;</span>)); <br><br><span class="hljs-comment">//如果访问的内容经常变化，还是需要设置路由</span><br><span class="hljs-comment">//但是，在这里有一个问题，如果public目录下有index.html文件，单独也有index.html的路由，则谁书写在前，优先执行谁</span><br><span class="hljs-comment">// 使用静态资源中间件，我们可以启动一个服务运行index.html</span><br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/index.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request,response</span>)=&gt;</span>&#123;<br>    respsonse.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;首页&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;3000 端口启动        &#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="获取请求体数据"><a href="#获取请求体数据" class="headerlink" title="获取请求体数据"></a>获取请求体数据</h3><p>express可以安装 body-parser包获取请求体数据</p><p>安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">npm i body-parser<br></code></pre></td></tr></table></figure><p>导入并使用 body-parser 包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>);<br><br><span class="hljs-comment">/* 获取中间件函数 */</span><br><span class="hljs-comment">//处理 querystring 格式的请求体</span><br><span class="hljs-keyword">let</span> urlParser = bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">false</span>&#125;));<br><span class="hljs-comment">//处理 JSON 格式的请求体</span><br><span class="hljs-keyword">let</span> jsonParser = bodyParser.<span class="hljs-title function_">json</span>();<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, urlParser, <span class="hljs-function">(<span class="hljs-params">request, response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//获取请求体数据</span><br>    <span class="hljs-comment">//console.log(request.body);</span><br>    <span class="hljs-comment">//用户名 </span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(request.<span class="hljs-property">body</span>.<span class="hljs-property">username</span>);<br>    <span class="hljs-comment">//密码 </span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(request.<span class="hljs-property">body</span>.<span class="hljs-property">userpass</span>); <br>    response.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;获取请求体数据&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>获取到的请求体数据：[Object: null prototype] { username: ‘admin’, userpass: ‘123456’ }</p><h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><p>express 中的 Router 是一个完整的中间件和路由系统，可以看做是一个小型的 app 对象；对路由进行模块化，更好的管理路由。</p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// homeRouter.js</span><br><br><span class="hljs-comment">//1. 导入 express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br> <br><span class="hljs-comment">//2. 创建路由器对象</span><br><span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>();<br> <br><span class="hljs-comment">//3. 在 router 对象身上添加路由</span><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123; <br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;首页&#x27;</span>);<br>&#125;)<br> <br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/cart&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123; <br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;购物车&#x27;</span>);<br>&#125;);<br> <br><span class="hljs-comment">//4. 暴露</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br><span class="hljs-comment">// app.js</span><br><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br> <br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">// 引入子路由文件</span><br><span class="hljs-keyword">const</span> homeRouter = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./routes/homeRouter&#x27;</span>);<br><br><span class="hljs-comment">// 设置和使用中间件 </span><br>app.<span class="hljs-title function_">use</span>(homeRouter);<br> <br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>,<span class="hljs-function">()=&gt;</span>&#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;3000 端口启动&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="EJS"><a href="#EJS" class="headerlink" title="EJS"></a>EJS</h2><p>ejs是一个高效的 Javascript 的模板，后台返回前端界面，可自行查阅资料。</p><h2 id="express脚手架"><a href="#express脚手架" class="headerlink" title="express脚手架"></a>express脚手架</h2><p>通过应用生成器工具 <code>express-generator</code> 可以快速创建一个应用的骨架。</p><p>安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">npx express-generator<br></code></pre></td></tr></table></figure><p><code>-h</code> 参数可以列出所有可用的命令行参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">$ express -h<br><br>  <span class="hljs-title class_">Usage</span>: express [options] [dir]<br><br>  <span class="hljs-title class_">Options</span>:<br><br>    -h, --help          输出使用方法<br>        --version       输出版本号<br>    -e, --ejs           添加对 ejs 模板引擎的支持<br>        --hbs           添加对 handlebars 模板引擎的支持<br>        --pug           添加对 pug 模板引擎的支持<br>    -H, --hogan         添加对 hogan.<span class="hljs-property">js</span> 模板引擎的支持<br>        --no-view       创建不带视图引擎的项目<br>    -v, --view &lt;engine&gt; 添加对视图引擎（view） &lt;engine&gt; 的支持 (ejs|hbs|hjs|jade|pug|twig|vash) （默认是 jade 模板引擎）<br>    -c, --css &lt;engine&gt;  添加样式表引擎 &lt;engine&gt; 的支持 (less|stylus|compass|sass) （默认是普通的 css 文件）<br>        --git           添加 .<span class="hljs-property">gitignore</span><br>    -f, --force         强制在非空目录下创建<br></code></pre></td></tr></table></figure><p>创建了一个名称为 <em><strong>myapp</strong></em> 的 Express 应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">express --view=pug myapp<br></code></pre></td></tr></table></figure><p>文件结构如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">├── app.<span class="hljs-property">js</span><br>├── bin<br>│   └── www<br>├── package.<span class="hljs-property">json</span><br>├── public<br>│   ├── images<br>│   ├── javascripts<br>│   └── stylesheets<br>│       └── style.<span class="hljs-property">css</span><br>├── routes<br>│   ├── index.<span class="hljs-property">js</span><br>│   └── users.<span class="hljs-property">js</span><br>└── views<br>    ├── error.<span class="hljs-property">pug</span><br>    ├── index.<span class="hljs-property">pug</span><br>    └── layout.<span class="hljs-property">pug</span><br></code></pre></td></tr></table></figure><h1 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>简介</p><ul><li>MongoDB 是一个基于分布式文件存储的数据库，官方地址 <strong><a href="https://www.mongodb.com/">https://www.mongodb.com/</a></strong></li><li>数据库（DataBase）是按照数据结构来组织、存储和管理数据的  应用程序</li><li>数据库的主要作用就是 管理数据，对数据进行增删改查</li><li>操作语法与 JavaScript 类似，容易上手，学习成本低</li></ul><p>mongodb有三个重要概念</p><ul><li>数据库（database） 数据库是一个数据仓库，数据库服务下可以创建很多数据库，数据库中可以存放很多集合</li><li>集合（collection） 集合类似于 JS 中的数组，在集合中可以存放很多文档</li><li>文档（document） 文档是数据库中的最小单位，类似于 JS 中的对象</li></ul><p><img src="https://pic.imgdb.cn/item/66695177d9c307b7e9641f04.png"></p><h2 id="下载注意事项"><a href="#下载注意事项" class="headerlink" title="下载注意事项"></a>下载注意事项</h2><ul><li>在MongoDB6之前，我们配置完环境变量后，可以直接通过终端输入”mongo”进入Mongoshell， 但MongoDB6没有mong.exe和mongdb.exe，终端输入”mongo”会报错：’mongo’ 不是内部或外部命令， 也不是可运行的程序或批处理文件。要想通过命令行启动mongoDB需要自己下载一个Mongoshell， 下载及使用相当简单。</li></ul><p>mogodb 下载地址：<strong><a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></strong></p><p>mongoshll 下载地址：<a href="https://www.mongodb.com/try/download/shell">MongoDB Shell Download | MongoDB</a></p><p>配置环境变量请自行查阅</p><p>命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 启动mongodb服务器</span><br>mongod; <span class="hljs-comment">// 相当于使用命令：mongosh &quot;mongodb://localhost:27017&quot;</span><br><br><span class="hljs-comment">// 启动mogondb客户端</span><br>mongosh;<br></code></pre></td></tr></table></figure><h2 id="命令行操作资料参考："><a href="#命令行操作资料参考：" class="headerlink" title="命令行操作资料参考："></a>命令行操作资料参考：</h2><p>数据库的相关命令，我们了解即可，更多的是使用数据库图形化工具</p><h3 id="数据库命令"><a href="#数据库命令" class="headerlink" title="数据库命令"></a><strong>数据库命令</strong></h3><p>显示所有数据库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">show dbs<br></code></pre></td></tr></table></figure><p>切换到指定的数据库，如果数据库不存在会自动创建数据库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">use 数据库名<br></code></pre></td></tr></table></figure><p>显示当前所在的数据库目录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">db<br></code></pre></td></tr></table></figure><p>删除当前数据库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">use 库名<br>db.<span class="hljs-title function_">dropDatabase</span>()<br></code></pre></td></tr></table></figure><h3 id="集合命令"><a href="#集合命令" class="headerlink" title="集合命令"></a><strong>集合命令</strong></h3><p>创建集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">db.<span class="hljs-title function_">createCollection</span>(<span class="hljs-string">&#x27;集合名称&#x27;</span>)<br></code></pre></td></tr></table></figure><p>显示数据库中的所有集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">show.<span class="hljs-property">collections</span><br></code></pre></td></tr></table></figure><p>删除某个集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">db.集合名.<span class="hljs-title function_">drop</span>()<br></code></pre></td></tr></table></figure><p>重命名集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">db.集合名.<span class="hljs-title function_">renameCollection</span>(<span class="hljs-string">&#x27;newName&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="文档命令"><a href="#文档命令" class="headerlink" title="文档命令"></a><strong>文档命令</strong></h3><p>插入文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">db.集合名.<span class="hljs-title function_">insert</span>(<span class="hljs-string">&#x27;文档对象&#x27;</span>)<br></code></pre></td></tr></table></figure><p>查询文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">db.集合名.<span class="hljs-title function_">find</span>(查询条件)<br></code></pre></td></tr></table></figure><p>更新文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">db.集合名.<span class="hljs-title function_">update</span>(查询条件, 新的文档)<br>db.集合名.<span class="hljs-title function_">update</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>&#125;, &#123;<span class="hljs-attr">$set</span>: &#123;<span class="hljs-attr">age</span>: <span class="hljs-number">19</span>&#125;&#125;)<br></code></pre></td></tr></table></figure><p>删除文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">db.集合名.<span class="hljs-title function_">remove</span>(查询条件)<br></code></pre></td></tr></table></figure><h1 id="mongoose"><a href="#mongoose" class="headerlink" title="mongoose"></a>mongoose</h1><p>官网：<a href="https://mongoosejs.com/">https://mongoosejs.com/</a></p><h2 id="什么是mongoose"><a href="#什么是mongoose" class="headerlink" title="什么是mongoose"></a>什么是mongoose</h2><ul><li>Mongoose 是一个让我们可以通过 Node 来操作 MongoDB 数据库的一个模块</li><li>Mongoose 是一个对象文档模型（ODM）库，它是对 Node 原生的 MongoDB 模块进行了进一步的优化封装</li><li>大多数情况下，他被用来把结构化的模式应用到一个 MongoDB 集合，并提供了验证和类型装换等好处</li><li>基于 MongoDB 驱动，通过关系型数据库的思想来实现非关系型数据库</li></ul><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//1. 安装 mongoose</span><br><span class="hljs-comment">//2. 导入 mongoose</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<br><br><span class="hljs-comment">//3. 连接数据库</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://127.0.0.1:27017/bili&#x27;</span>);<br><br><span class="hljs-comment">//4. 设置连接回调</span><br><span class="hljs-comment">//连接成功</span><br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;连接成功&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">//5. 创建文档结构对象</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">BookSchema</span> = <span class="hljs-keyword">new</span> mongoose.<span class="hljs-title class_">Schema</span>(&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-title class_">String</span>,<br>  <span class="hljs-attr">author</span>: <span class="hljs-title class_">String</span>,<br>  <span class="hljs-attr">price</span>: <span class="hljs-title class_">Number</span><br>&#125;);<br><br><span class="hljs-comment">//6. 创建文档模型对象</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">BookModel</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;book&#x27;</span>, <span class="hljs-title class_">BookSchema</span>);<br><br><span class="hljs-comment">//7. 插入文档</span><br><span class="hljs-title class_">BookModel</span>.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;西游记&#x27;</span>,<br>  <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;吴承恩&#x27;</span>,<br>  <span class="hljs-attr">price</span>: <span class="hljs-number">19.9</span><br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//8. 断开连接</span><br>    mongoose.<span class="hljs-title function_">disconnect</span>();<br>  &#125;);<br><br><span class="hljs-comment">//连接出错</span><br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;连接出错~~&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">//连接关闭</span><br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;连接关闭&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="字段验证"><a href="#字段验证" class="headerlink" title="字段验证"></a>字段验证</h2><h3 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h3><p>文档结构（mongoose.Schema）可选的常用字段类型列表</p><table><thead><tr><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>String</td><td>字符串</td></tr><tr><td>Number</td><td>数字</td></tr><tr><td>Boolean</td><td>布尔值</td></tr><tr><td>Array</td><td>数组，也可以使用 [] 来标识</td></tr><tr><td>Date</td><td>日期</td></tr><tr><td>Buffer</td><td>Buffer 对象</td></tr><tr><td>Mixed</td><td>任意类型，需要使用 mongoose.Schema.Types.Mixed 指定</td></tr><tr><td>ObjectId</td><td>对象 ID，需要使用 mongoose.Schema.Types.ObjectId 指定</td></tr><tr><td>Decimal128</td><td>高精度数字，需要使用 mongoose.Schema.Types.Decimal128 指定</td></tr></tbody></table><h3 id="字段验证-1"><a href="#字段验证-1" class="headerlink" title="字段验证"></a>字段验证</h3><p>Mongoose 有一些内建验证器，可以对字段值进行验证</p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 必填项</span><br><span class="hljs-attr">title</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 设置必填项</span><br>&#125;<br><br><span class="hljs-comment">// 默认值</span><br><span class="hljs-attr">author</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;匿名&#x27;</span> <span class="hljs-comment">//默认值</span><br>&#125;<br><br><span class="hljs-comment">// 枚举值</span><br><span class="hljs-attr">gender</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">enum</span>: [<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>] <span class="hljs-comment">//设置的值必须是数组中的</span><br>&#125;<br><br><span class="hljs-comment">// 唯一值，unique 需要 重建集合 才能有效果 </span><br><span class="hljs-attr">username</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">unique</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CURD应用"><a href="#CURD应用" class="headerlink" title="CURD应用"></a>CURD应用</h2><ul><li>数据库的基本操作包括四个，增加（create），删除（delete），修改（update），查（read）</li></ul><p>示例均以BookModel为例</p><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 增加一条</span><br><span class="hljs-title class_">BookModel</span>.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;西游记&#x27;</span>,<br>  <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;吴承恩&#x27;</span>,<br>  <span class="hljs-attr">price</span>: <span class="hljs-number">19.9</span><br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//8. 断开连接</span><br>    mongoose.<span class="hljs-title function_">disconnect</span>();<br>  &#125;);<br><br><span class="hljs-comment">// 批量插入 </span><br><span class="hljs-title class_">BookModel</span>.<span class="hljs-title function_">insertMany</span>([<br>    &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;西游记&#x27;</span>,<br>      <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;吴承恩&#x27;</span>,<br>      <span class="hljs-attr">price</span>: <span class="hljs-number">19.9</span><br>    &#125;，<br>    &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;三国演义&#x27;</span>,<br>      <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;罗贯中&#x27;</span>,<br>      <span class="hljs-attr">price</span>: <span class="hljs-number">21.9</span><br>    &#125;<br>],<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入成功&#x27;</span>);<br>    mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">close</span>();<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 删除一条</span><br><span class="hljs-title class_">BookModel</span>.<span class="hljs-title function_">deleteOne</span>(&#123;<span class="hljs-attr">_id</span>:<span class="hljs-string">&#x27;5dd65f32be6401035cb5b1ed&#x27;</span>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)&#123; <br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除成功&#x27;</span>); <br>    mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">close</span>();<br>&#125;);<br><br><span class="hljs-comment">// 批量删除</span><br><span class="hljs-title class_">BookModel</span>.<span class="hljs-title function_">deleteMany</span>(&#123;<span class="hljs-attr">author</span>:<span class="hljs-string">&#x27;吴承恩&#x27;</span>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)&#123; <br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除成功&#x27;</span>);<br>    mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">close</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 修改一条</span><br><span class="hljs-title class_">BookModel</span>.<span class="hljs-title function_">updateOne</span>(&#123;<span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;吴承恩&#x27;</span>&#125;, &#123;<span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;Wu Chen en&#x27;</span>&#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123; <br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br>    mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">close</span>();<br>&#125;);<br><br><span class="hljs-comment">// 批量修改</span><br><span class="hljs-title class_">BookModel</span>.<span class="hljs-title function_">updateMany</span>(&#123;<span class="hljs-attr">price</span>: <span class="hljs-number">19.9</span>&#125;, &#123;<span class="hljs-attr">author</span>: <span class="hljs-number">99.9</span>&#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123; <br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br>    mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">close</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 查询一条数据</span><br><span class="hljs-comment">// 根据字段查询</span><br><span class="hljs-title class_">BookModel</span>.<span class="hljs-title function_">findOne</span>(&#123;<span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;吴承恩&#x27;</span>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>)&#123; <br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data); <br>    mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">close</span>();<br>&#125;);<br><span class="hljs-comment">//根据 id 查询数据</span><br><span class="hljs-title class_">BookModel</span>.<span class="hljs-title function_">findById</span>(<span class="hljs-string">&#x27;5dd662b5381fc316b44ce167&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>)&#123; <br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>    mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">close</span>();<br>&#125;);<br><br><br><span class="hljs-comment">// 批量查询数据</span><br><span class="hljs-comment">//不加条件查询 </span><br><span class="hljs-title class_">BookModel</span>.<span class="hljs-title function_">find</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>)&#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data); <br>    mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">close</span>();<br>&#125;);<br><span class="hljs-comment">//加条件查询</span><br><span class="hljs-title class_">BookModel</span>.<span class="hljs-title function_">find</span>(&#123;<span class="hljs-attr">price</span>: <span class="hljs-number">19.9</span>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>)&#123; <br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>    mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">close</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>在 mongodb 不能 &lt; &gt;&#x3D; &lt;&#x3D; !&#x3D;&#x3D; 等运算符，需要使用替代符号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&gt; 使用 $gt<br>&lt; 使用 $lt<br>&gt;= 使用 $gte<br>&lt;= 使用 $lte<br>!== 使用 $ne<br><br><span class="hljs-comment">// 示例</span><br>db.<span class="hljs-property">students</span>.<span class="hljs-title function_">find</span>(&#123;<span class="hljs-attr">id</span>:&#123;<span class="hljs-attr">$gt</span>:<span class="hljs-number">3</span>&#125;&#125;);  <span class="hljs-comment">// id号比3大的所有的记录</span><br></code></pre></td></tr></table></figure><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p>$or 逻辑或的情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">db.<span class="hljs-property">students</span>.<span class="hljs-title function_">find</span>(&#123;<span class="hljs-attr">$or</span>:[&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">24</span>&#125;]&#125;);<br></code></pre></td></tr></table></figure><p>$and 逻辑与的情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">db.<span class="hljs-property">students</span>.<span class="hljs-title function_">find</span>(&#123;<span class="hljs-attr">$and</span>: [&#123;<span class="hljs-attr">age</span>: &#123;<span class="hljs-attr">$lt</span>:<span class="hljs-number">20</span>&#125;&#125;, &#123;<span class="hljs-attr">age</span>: &#123;<span class="hljs-attr">$gt</span>: <span class="hljs-number">15</span>&#125;&#125;]&#125;);<br></code></pre></td></tr></table></figure><h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h3><p>条件中可以直接使用 JS 的正则语法，通过正则可以进行模糊查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">db.<span class="hljs-property">students</span>.<span class="hljs-title function_">find</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-regexp">/imissyou/</span>&#125;);<br></code></pre></td></tr></table></figure><h2 id="个性化读取"><a href="#个性化读取" class="headerlink" title="个性化读取"></a>个性化读取</h2><ol><li><strong>字段筛选</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//0:不要的字段</span><br><span class="hljs-comment">//1:要的字段 </span><br><span class="hljs-title class_">SongModel</span>.<span class="hljs-title function_">find</span>().<span class="hljs-title function_">select</span>(&#123;<span class="hljs-attr">_id</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">title</span>:<span class="hljs-number">1</span>&#125;).<span class="hljs-title function_">exec</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)&#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data); <br>    mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">close</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><ol><li><strong>数据排序</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//sort 排序</span><br><span class="hljs-comment">//1:升序</span><br><span class="hljs-comment">//-1:倒序 </span><br><span class="hljs-title class_">SongModel</span>.<span class="hljs-title function_">find</span>().<span class="hljs-title function_">sort</span>(&#123;<span class="hljs-attr">hot</span>:<span class="hljs-number">1</span>&#125;).<span class="hljs-title function_">exec</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)&#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data); <br>    mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">close</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><ol><li><strong>数据截取</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//skip 跳过        limit 限定</span><br><span class="hljs-title class_">SongModel</span>.<span class="hljs-title function_">find</span>().<span class="hljs-title function_">skip</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">limit</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">exec</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)&#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data); <br>    mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">close</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="图形管理工具"><a href="#图形管理工具" class="headerlink" title="图形管理工具"></a>图形管理工具</h2><p>Robo 3T 免费：<a href="https://github.com/Studio3T/robomongo/releases">https://github.com/Studio3T/robomongo/releases</a> </p><p>Navicat 收费：<a href="https://www.navicat.com.cn/">https://www.navicat.com.cn/</a> </p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口是什么？</p><p>接口是前后端沟通的桥梁</p><p>简单理解：一个接口就是 服务中的一个路由规则 ，根据请求响应结果</p><h2 id="接口组成"><a href="#接口组成" class="headerlink" title="接口组成"></a>接口组成</h2><p>一个接口一般由如下几个部分组成</p><p>请求方法</p><p>接口地址（URL）请求参数</p><p>响应结果</p><p>一个接口示例 <strong><a href="https://www.free-api.com/doc/325">https://www.free-api.com/doc/325</a></strong></p><h2 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a><strong>RESTful API</strong></h2><p>RESTful API 是一种特殊风格的接口，主要特点有如下几个：</p><ul><li>URL 中的路径表示 资源 ，路径中不能有 动词 ，create , delete , update</li><li>例如操作资源要与 HTTP 请求方法 对应</li><li>操作结果要与 HTTP 响应状态码 对应</li></ul><p>规则示例</p><table><thead><tr><th><strong>操作</strong></th><th><strong>请求类型</strong></th><th><strong>URL</strong></th><th><strong>返回</strong></th></tr></thead><tbody><tr><td>新增歌曲</td><td>POST</td><td>&#x2F;song</td><td>返回新生成的歌曲信息</td></tr><tr><td>删除歌曲</td><td>DELETE</td><td>&#x2F;song&#x2F;10</td><td>返回一个空文档</td></tr><tr><td>修改歌曲</td><td>PUT</td><td>&#x2F;song&#x2F;10</td><td>返回更新后的歌曲信息</td></tr><tr><td>修改歌曲</td><td>PATCH</td><td>&#x2F;song&#x2F;10</td><td>返回更新后的歌曲信息</td></tr><tr><td>获取所有歌曲</td><td>GET</td><td>&#x2F;song</td><td>返回歌曲列表数组</td></tr><tr><td>获取单个歌曲</td><td>GET</td><td>&#x2F;song&#x2F;10</td><td>返回单个歌曲信息</td></tr></tbody></table><p>扩展阅读： <strong><a href="https://www.ruanyifeng.com/blog/2014/05/restful_api.html">https://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></strong></p><h2 id="json-server"><a href="#json-server" class="headerlink" title="json-server"></a>json-server</h2><p>json-server 本身是一个 JS 编写的工具包，可以快速搭建 RESTful API 服务官方地址: <strong><a href="https://github.com/typicode/json-server">https://github.com/typicode/json-server</a></strong></p><p><strong>安装</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">npm i -g json-server<br></code></pre></td></tr></table></figure><p><strong>创建 JSON 文件（db.json），编写基本结构</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;song&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;干杯&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;singer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;五月天&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;当&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;singer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;动力火车&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;不能说的秘密&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;singer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;周杰伦&quot;</span> <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>以 JSON 文件所在文件夹作为工作目录</strong> <strong>，执行如下命令</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">json-server --watch db.<span class="hljs-property">json</span><br></code></pre></td></tr></table></figure><h2 id="接口测试工具"><a href="#接口测试工具" class="headerlink" title="接口测试工具"></a>接口测试工具</h2><p>apipost ： <strong><a href="https://www.apipost.cn/">https://www.apipost.cn/</a></strong> (中文)</p><p>apifox ： <strong><a href="https://www.apifox.cn/">https://www.apifox.cn/</a></strong>        (中文) </p><p>postman ：  <strong><a href="https://www.postman.com/">https://www.postman.com/</a></strong>  (英文)</p><h2 id="会话控制"><a href="#会话控制" class="headerlink" title="会话控制"></a>会话控制</h2><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>express 中可以使用 cookie-parser 进行处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> express =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-comment">//1. 安装 cookie-parser        npm i cookie-parser</span><br><span class="hljs-comment">//2. 引入 cookieParser 包</span><br><span class="hljs-keyword">const</span> cookieParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cookie-parser&#x27;</span>);<br> <br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br> <br><span class="hljs-comment">//3. 设置 cookieParser 中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cookieParser</span>());<br> <br><span class="hljs-comment">//4-1 设置 cookie</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/set-cookie&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 不带时效性</span><br>    response.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&#x27;username&#x27;</span>,<span class="hljs-string">&#x27;wangwu&#x27;</span>);<br>    <span class="hljs-comment">// 带时效性</span><br>    response.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&#x27;email&#x27;</span>,<span class="hljs-string">&#x27;23123456@qq.com&#x27;</span>, &#123;<span class="hljs-attr">maxAge</span>: <span class="hljs-number">5</span>*<span class="hljs-number">60</span>*<span class="hljs-number">1000</span> &#125;);<br>    <span class="hljs-comment">//响应</span><br>    response.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Cookie的设置&#x27;</span>);<br>&#125;);<br> <br><span class="hljs-comment">//4-2 读取 cookie</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/get-cookie&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//读取 cookie </span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(request.<span class="hljs-property">cookies</span>);<br>    <span class="hljs-comment">//响应体</span><br>    response.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Cookie的读取&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">//4-3 删除cookie</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/delete-cookie&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//删除 </span><br>    response.<span class="hljs-title function_">clearCookie</span>(<span class="hljs-string">&#x27;username&#x27;</span>);<br>    <span class="hljs-comment">//响应</span><br>    response.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;cookie 的清除&#x27;</span>);<br>&#125;);<br> <br><span class="hljs-comment">//4. 启动服务</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;服务已经启动&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>可以使用express-session对session进行操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-comment">//1. 安装包        npm i express-session connect-mongo</span><br><span class="hljs-comment">//2. 引入 express-session connect-mongo </span><br><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-session&quot;</span>); <br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MongoStore</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;connect-mongo&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">//3. 设置 session 的中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;sid&#x27;</span>,        <span class="hljs-comment">//设置cookie的name，默认值是：connect.sid </span><br>    <span class="hljs-attr">secret</span>: <span class="hljs-string">&#x27;atguigu&#x27;</span>, <span class="hljs-comment">//参与加密的字符串（又称签名）</span><br>    <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//是否为每次请求都设置一个cookie用来存储session的id</span><br>    <span class="hljs-attr">resave</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//是否在每次请求时重新保存session </span><br>    <span class="hljs-attr">store</span>: <span class="hljs-title class_">MongoStore</span>.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">mongoUrl</span>: <span class="hljs-string">&#x27;mongodb://127.0.0.1:27017/project&#x27;</span> <span class="hljs-comment">//数据库的连接配置</span><br>&#125;),<br>    <span class="hljs-attr">cookie</span>: &#123;<br>    <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启后前端无法通过 JS 操作</span><br>    <span class="hljs-attr">maxAge</span>: <span class="hljs-number">1000</span> * <span class="hljs-number">300</span> <span class="hljs-comment">// 这一条 是控制 sessionID 的过期时间的！！！</span><br>&#125;<br>&#125;))<br><span class="hljs-comment">//创建 session</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置session</span><br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = <span class="hljs-string">&#x27;zhangsan&#x27;</span>; <br>    req.<span class="hljs-property">session</span>.<span class="hljs-property">email</span> = <span class="hljs-string">&#x27;zhangsan@qq.com&#x27;</span><br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;登录成功&#x27;</span>);<br>&#125;)<br><span class="hljs-comment">//获取 session</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;session的信息&#x27;</span>); <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>);<br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>) &#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">`你好 <span class="hljs-subst">$&#123;req.session.username&#125;</span>`</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;登录 注册&#x27;</span>);<br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">//销毁 session</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/logout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//销毁session</span><br>    <span class="hljs-comment">// res.send(&#x27;设置session&#x27;); </span><br>    req.<span class="hljs-property">session</span>.<span class="hljs-title function_">destroy</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;成功退出&#x27;</span>);<br>    &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;服务已经启动, 端口 &#x27;</span> + <span class="hljs-number">3000</span> + <span class="hljs-string">&#x27; 监听中...&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="cookie-和-session-的区别主要有如下几点："><a href="#cookie-和-session-的区别主要有如下几点：" class="headerlink" title="cookie 和 session 的区别主要有如下几点："></a>cookie 和 session 的区别主要有如下几点：</h3><p>存在的位置</p><p>cookie：浏览器端  session：服务端</p><p>安全性</p><p>cookie  是以明文的方式存放在客户端的，安全性相对较低</p><p>session 存放于服务器中，所以安全性 相对 较好</p><p>网络传输量</p><p>cookie 设置内容过多会增大报文体积， 会影响传输效率</p><p>session 数据存储在服务器，只是通过 cookie 传递 id，所以不影响传输效率</p><p>存储限制</p><p>浏览器限制单个 cookie 保存的数据不能超过 4K ，且单个域名下的存储数量也有限制</p><p>session 数据存储在服务器中，所以没有这些限制</p><h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3><p>JWT（JSON Web Token ）是目前最流行的跨域认证解决方案，可用于基于JWT 使 token 的生成与校验更规范的身份验证</p><p>我们可以使用  jsonwebtoken 来操作 token</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//导入 jsonwebtokan</span><br><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>);<br> <br><span class="hljs-comment">//创建 token</span><br><span class="hljs-comment">// jwt.sign(数据, 加密字符串, 配置对象) </span><br><span class="hljs-keyword">let</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123;<br><span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span><br>&#125;, <span class="hljs-string">&#x27;atguigu&#x27;</span>, &#123; <span class="hljs-attr">expiresIn</span>: <span class="hljs-number">60</span> <span class="hljs-comment">//单位是 秒</span><br>&#125;)<br> <br><span class="hljs-comment">//解析 token</span><br>jwt.<span class="hljs-title function_">verify</span>(token, <span class="hljs-string">&#x27;atguigu&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;校验失败~~&#x27;</span>); <span class="hljs-keyword">return</span><br>&#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;)<br></code></pre></td></tr></table></figure><p>扩展阅读：  <strong><a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</a></strong></p><h1 id="完整脚手架"><a href="#完整脚手架" class="headerlink" title="完整脚手架"></a>完整脚手架</h1><p>前后台脚手架已初步完成</p><p>参考地址：<a href="https://github.com/cH380/NodeEcho">https://github.com/cH380/NodeEcho</a></p><h1 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h1><p>一、nodemon官网</p><p><a href="https://nodemon.io/">https://nodemon.io/</a></p><p>二、为什么要使用nodemon</p><p>使用 node 启动一个服务，需要：</p><p>node server.js</p><p>修改了 server.js 文件，需要停止服务（ctrl + c），再次启动才会生效；</p><p>有了 nodemon，就不用频繁手动重启 server.js ，因为 nodemon 可以监视源码改动，并自动重启服务。这样我们只需要专注写代码逻辑，不需要过多关注服务。</p><p>nodemon.json 各项配置含义：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JSON">–restartable：设置重启命令，默认是 rs；<br>–verbose：是否输出重启的详细信息，布尔值，默认<span class="hljs-literal"><span class="hljs-keyword">false</span></span>；<br>–watch：监视文件或文件夹的路径，数组，每个参数都指某个路径；<br>–ignore：忽略监视的路径，默认忽略的是：.git，node_modules，bower–components，.sass-cache；<br>–delay：设置延迟时间；<br>–ext：指定默认文件扩展名，参数是字符串，空格分隔；<br>–script：指定监视的文件，一般指项目入口的 js 文件；<br>–exec：执行的命令；<br>–env ：运行环境 development 是开发环境，production 是生产环境，pr–ot 是端口；<br></code></pre></td></tr></table></figure><p>————————————————</p><h1 id="Node-js应用实例"><a href="#Node-js应用实例" class="headerlink" title="Node.js应用实例"></a>Node.js应用实例</h1><h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><h3 id="以下是一个express-ws模块来实现websocket的示例"><a href="#以下是一个express-ws模块来实现websocket的示例" class="headerlink" title="以下是一个express+ws模块来实现websocket的示例"></a>以下是一个express+ws模块来实现websocket的示例</h3><p>WebSocket.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 引入WebSocket模块</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">WebSocket</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ws&#x27;</span>);<br><br><span class="hljs-keyword">let</span> wss = <span class="hljs-literal">null</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">initWebSocket</span>(<span class="hljs-params">port</span>) &#123;<br>    <span class="hljs-comment">// 创建WebSocket服务器监听在3000端口</span><br>   <span class="hljs-keyword">if</span>(!wss) &#123;<br>        wss = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>.<span class="hljs-title class_">Server</span>(&#123; port &#125;);<br>   &#125;<br>    <br>    <span class="hljs-comment">// 当有客户端连接时</span><br>    wss.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connection&#x27;</span>, <span class="hljs-keyword">function</span> <span class="hljs-title function_">connection</span>(<span class="hljs-params">ws</span>) &#123;<br>      <span class="hljs-comment">// 发送欢迎消息到客户端</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;连接成功&#x27;</span>)<br>      ws.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;连接成功&#x27;</span>);<br>     <br>    <span class="hljs-comment">//   setInterval(() =&gt; &#123;</span><br>    <span class="hljs-comment">//     const now = new Date();</span><br>    <span class="hljs-comment">//     ws.send(now.toString());</span><br>    <span class="hljs-comment">// &#125;,  3 * 1000)</span><br><br>      <span class="hljs-comment">// 当收到客户端消息时</span><br>      ws.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span> <span class="hljs-title function_">incoming</span>(<span class="hljs-params">message</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;received: %s&#x27;</span>, message);<br>    <br>        <span class="hljs-comment">// 发送消息到客户端</span><br>        ws.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hello, you sent -&gt; &#x27;</span> + message);<br>      &#125;);<br>    <br>      <span class="hljs-comment">// 当连接关闭时</span><br>      ws.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-keyword">function</span> <span class="hljs-title function_">close</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Client disconnected&#x27;</span>);<br>      &#125;);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> initWebSocket = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./utils/WebSocket&#x27;</span>)<br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">// ... 其他代码省略</span><br><br><span class="hljs-title function_">initWebSocket</span>(<span class="hljs-number">4090</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = app;<br></code></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>简单聊天室<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;messageInput&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入消息&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sendMessage()&quot;</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;endMessage()&quot;</span>&gt;</span>关闭<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;econnect()&quot;</span>&gt;</span>重连<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;chatMessages&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 参考地址：https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> ws;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> reconnectInterval = <span class="hljs-number">5000</span>; <span class="hljs-comment">// 重连间隔（5 秒）</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">sendMessage</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> message = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;messageInput&#x27;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            ws.<span class="hljs-title function_">send</span>(message);</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;messageInput&#x27;</span>).<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// 清空输入框</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 关闭功能</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">endMessage</span>(<span class="hljs-params"></span>)  &#123;</span><br><span class="language-javascript">            ws.<span class="hljs-title function_">close</span>()</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 重连</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">econnect</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">connectWebSocket</span>()</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">connectWebSocket</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&#x27;ws://localhost:4090/chat&#x27;</span>);</span><br><span class="language-javascript">            </span><br><span class="language-javascript">            ws.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;WebSocket 连接成功&#x27;</span>);</span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            ws.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> message = event.<span class="hljs-property">data</span>;</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;chatMessages&#x27;</span>).<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27;&lt;li&gt;&#x27;</span> + message + <span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;收到消息:&#x27;</span>, event.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            ws.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;连接关闭，原因:&#x27;</span>, event.<span class="hljs-property">reason</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;chatMessages&#x27;</span>).<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27;&lt;li&gt;&#x27;</span> + <span class="hljs-string">&#x27;连接关闭&#x27;</span> + <span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// setTimeout(connectWebSocket, reconnectInterval);</span></span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            ws.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;出错了:&#x27;</span>, error);</span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">connectWebSocket</span>();</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="聊天室功能"><a href="#聊天室功能" class="headerlink" title="聊天室功能"></a>聊天室功能</h3><p>ws.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 引入WebSocket模块</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">WebSocket</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ws&#x27;</span>);<br><br><span class="hljs-keyword">let</span> wss = <span class="hljs-literal">null</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">initWebSocket</span>(<span class="hljs-params">port</span>) &#123;<br>    <span class="hljs-comment">// 创建WebSocket服务器监听在4090端口</span><br><span class="hljs-keyword">const</span> wss = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>.<span class="hljs-title class_">Server</span>(&#123; <span class="hljs-attr">port</span>: <span class="hljs-number">4090</span> &#125;);<br><br><span class="hljs-comment">// 用于存储房间信息的对象，键为房间号，值为连接集合</span><br><span class="hljs-keyword">const</span> rooms = &#123;&#125;;<br><br><span class="hljs-comment">// 当有客户端连接时</span><br>wss.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;connection&quot;</span>, <span class="hljs-keyword">function</span> <span class="hljs-title function_">connection</span>(<span class="hljs-params">ws</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;一个新的客户端已连接&quot;</span>);<br><br>  <span class="hljs-comment">// 当收到客户端消息时</span><br>  ws.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-keyword">function</span> <span class="hljs-title function_">incoming</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-keyword">const</span> message = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data); <span class="hljs-comment">// 解析收到的消息</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;接收到消息:&quot;</span>, message);<br><br>    <span class="hljs-comment">// 根据消息类型处理</span><br>    <span class="hljs-keyword">switch</span> (message.<span class="hljs-property">type</span>) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;join&quot;</span>:<br>        <span class="hljs-comment">// 用户加入房间</span><br>        <span class="hljs-keyword">if</span> (!rooms[message.<span class="hljs-property">room</span>]) &#123;<br>          rooms[message.<span class="hljs-property">room</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(); <span class="hljs-comment">// 如果房间不存在，则创建</span><br>        &#125;<br>        rooms[message.<span class="hljs-property">room</span>].<span class="hljs-title function_">add</span>(ws); <span class="hljs-comment">// 将当前连接加入房间</span><br>        ws.<span class="hljs-property">room</span> = message.<span class="hljs-property">room</span>; <span class="hljs-comment">// 在WebSocket连接上记录房间号</span><br>        ws.<span class="hljs-property">userId</span> = message.<span class="hljs-property">userId</span>; <span class="hljs-comment">// 在WebSocket连接上记录用户ID</span><br>        <span class="hljs-comment">// 向加入房间的用户发送确认消息</span><br>        ws.<span class="hljs-title function_">send</span>(<span class="hljs-string">`你好，你已经加入房间 <span class="hljs-subst">$&#123;message.room&#125;</span>`</span>);<br>        rooms[message.<span class="hljs-property">room</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">client</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (client.<span class="hljs-property">readyState</span> === <span class="hljs-title class_">WebSocket</span>.<span class="hljs-property">OPEN</span>) &#123;<br>            client.<span class="hljs-title function_">send</span>(<span class="hljs-string">`欢迎 用户 <span class="hljs-subst">$&#123;message.userId&#125;</span> 加入房间 <span class="hljs-subst">$&#123;message.room&#125;</span>`</span>);<br>          &#125;<br>        &#125;);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;message&quot;</span>:<br>        <span class="hljs-comment">// 向房间内的所有客户端（包括发送者）广播消息</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;rooms=&#x27;</span>, rooms)<br>        <span class="hljs-keyword">if</span> (rooms[message.<span class="hljs-property">room</span>]) &#123;<br>          rooms[message.<span class="hljs-property">room</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">client</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (client.<span class="hljs-property">readyState</span> === <span class="hljs-title class_">WebSocket</span>.<span class="hljs-property">OPEN</span>) &#123;<br>              client.<span class="hljs-title function_">send</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;message.userId&#125;</span> [<span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()&#125;</span>] : <span class="hljs-subst">$&#123;message.content&#125;</span>`</span>);<br>            &#125;<br>          &#125;);<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-comment">// 当连接关闭时</span><br>  ws.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;close&quot;</span>, <span class="hljs-keyword">function</span> <span class="hljs-title function_">close</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;客户端已断开连接&quot;</span>);<br>    <span class="hljs-comment">// 从房间中移除连接</span><br>    <span class="hljs-keyword">if</span> (ws.<span class="hljs-property">room</span> &amp;&amp; rooms[ws.<span class="hljs-property">room</span>]) &#123;<br>      rooms[ws.<span class="hljs-property">room</span>].<span class="hljs-title function_">delete</span>(ws);<br>      <span class="hljs-comment">// 如果房间为空，则删除房间</span><br>      <span class="hljs-keyword">if</span> (rooms[ws.<span class="hljs-property">room</span>].<span class="hljs-property">size</span> === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">delete</span> rooms[ws.<span class="hljs-property">room</span>];<br>      &#125;<br>    &#125;<br>  &#125;);<br>&#125;);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>WebSocket客户端<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;DOMContentLoaded&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 创建WebSocket连接到本地服务器</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&quot;ws://localhost:4090&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 设置默认房间号为1001</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;room&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-string">&quot;1001&quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 生成随机用户ID</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">generateUserId</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user_&quot;</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>).<span class="hljs-title function_">substr</span>(<span class="hljs-number">2</span>, <span class="hljs-number">9</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 加入房间按钮点击事件</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;joinRoom&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">let</span> room = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;room&quot;</span>).<span class="hljs-property">value</span>; <span class="hljs-comment">// 获取房间号</span></span><br><span class="language-javascript">          <span class="hljs-keyword">let</span> userId = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;userId&quot;</span>).<span class="hljs-property">value</span>; <span class="hljs-comment">// 获取用户ID</span></span><br><span class="language-javascript">          <span class="hljs-comment">// 如果用户ID未填写，则生成随机用户ID</span></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!userId) &#123;</span><br><span class="language-javascript">            userId = <span class="hljs-title function_">generateUserId</span>();</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;userId&quot;</span>).<span class="hljs-property">value</span> = userId; <span class="hljs-comment">// 显示生成的用户ID</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">          <span class="hljs-comment">// 发送加入房间的消息到服务器</span></span><br><span class="language-javascript">          socket.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;join&quot;</span>, room, userId &#125;));</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 发送消息按钮点击事件</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;sendMessage&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> message = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;message&quot;</span>).<span class="hljs-property">value</span>; <span class="hljs-comment">// 获取消息内容</span></span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> room = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;room&quot;</span>).<span class="hljs-property">value</span>; <span class="hljs-comment">// 获取房间号</span></span><br><span class="language-javascript">          <span class="hljs-keyword">let</span> userId = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;userId&quot;</span>).<span class="hljs-property">value</span>; <span class="hljs-comment">// 获取用户ID</span></span><br><span class="language-javascript">          <span class="hljs-comment">// 如果用户ID未填写，则生成随机用户ID</span></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!userId) &#123;</span><br><span class="language-javascript">            userId = <span class="hljs-title function_">generateUserId</span>();</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;userId&quot;</span>).<span class="hljs-property">value</span> = userId; <span class="hljs-comment">// 显示生成的用户ID</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">          <span class="hljs-comment">// 发送消息到服务器</span></span><br><span class="language-javascript">          socket.<span class="hljs-title function_">send</span>(</span><br><span class="language-javascript">            <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;message&quot;</span>, room, userId, <span class="hljs-attr">content</span>: message &#125;)</span><br><span class="language-javascript">          );</span><br><span class="language-javascript">          <span class="hljs-comment">// 清空消息输入框</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;message&quot;</span>).<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 接收到服务器消息时的处理</span></span><br><span class="language-javascript">        socket.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 将接收到的消息显示在页面上</span></span><br><span class="language-javascript">          <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;serverMessages&quot;</span>).<span class="hljs-property">textContent</span> +=</span><br><span class="language-javascript">            event.<span class="hljs-property">data</span> + <span class="hljs-string">&quot;\n&quot;</span>;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">main</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">        <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.message</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">75vw</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.message-main</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">75vw</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">70vh</span>;</span><br><span class="language-css">        <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.send-message</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">75vw</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.send-message</span> <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">75vw</span> - <span class="hljs-number">100px</span>);</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.login</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20vw</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>WebSocket客户端<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;message-main&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;serverMessages&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;white-space: pre&quot;</span></span><br><span class="hljs-tag">        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;send-message&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;message&quot;</span> /&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sendMessage&quot;</span>&gt;</span>发送消息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;userId&quot;</span>&gt;</span>用户ID:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userId&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;留空将自动生成&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;room&quot;</span>&gt;</span>房间号:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;room&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;joinRoom&quot;</span>&gt;</span>加入房间<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>参考地址：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket">https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket</a></p><h2 id="文件流处理"><a href="#文件流处理" class="headerlink" title="文件流处理"></a>文件流处理</h2><p>前端部分（Vue 3）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;handleFileChange&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleFileChange</span> = (<span class="hljs-params">e</span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> file = e.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();</span></span><br><span class="language-javascript"><span class="language-xml">  formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;file&#x27;</span>, file);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/upload&#x27;</span>, formData)</span></span><br><span class="language-javascript"><span class="language-xml"> .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">   .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>后端部分（Node.js + Express）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> multer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;multer&#x27;</span>);<br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">// 连接 MongoDB</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost/fileUpload&#x27;</span>, &#123; <span class="hljs-attr">useNewUrlParser</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">useUnifiedTopology</span>: <span class="hljs-literal">true</span> &#125;);<br><br><span class="hljs-keyword">const</span> fileSchema = <span class="hljs-keyword">new</span> mongoose.<span class="hljs-title class_">Schema</span>(&#123;<br>  <span class="hljs-attr">filename</span>: <span class="hljs-title class_">String</span>,<br>  <span class="hljs-attr">path</span>: <span class="hljs-title class_">String</span><br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">File</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;File&#x27;</span>, fileSchema);<br><br><span class="hljs-comment">// 设置存储文件的配置</span><br><span class="hljs-keyword">const</span> storage = multer.<span class="hljs-title function_">diskStorage</span>(&#123;<br>  <span class="hljs-attr">destination</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">req, file, cb</span>) &#123;<br>    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;uploads/&#x27;</span>);<br>  &#125;,<br>  <span class="hljs-attr">filename</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">req, file, cb</span>) &#123;<br>    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, file.<span class="hljs-property">originalname</span>);<br>  &#125;<br>&#125;);<br><br><span class="hljs-keyword">const</span> upload = <span class="hljs-title function_">multer</span>(&#123; storage &#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/upload&#x27;</span>, upload.<span class="hljs-title function_">single</span>(<span class="hljs-string">&#x27;file&#x27;</span>), <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(&#123;<br>    <span class="hljs-attr">filename</span>: req.<span class="hljs-property">file</span>.<span class="hljs-property">filename</span>,<br>    <span class="hljs-attr">path</span>: req.<span class="hljs-property">file</span>.<span class="hljs-property">path</span><br>  &#125;);<br><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">await</span> file.<span class="hljs-title function_">save</span>();<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;文件上传并保存成功&#x27;</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;保存出错&#x27;</span>);<br>  &#125;<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;服务器启动&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="豆瓣网页爬虫"><a href="#豆瓣网页爬虫" class="headerlink" title="豆瓣网页爬虫"></a>豆瓣网页爬虫</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// output.js</span><br><br><span class="hljs-comment">// 导入所需模块</span><br><span class="hljs-keyword">let</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;request-promise&#x27;</span>); <span class="hljs-comment">// 用于发送HTTP请求的库</span><br><span class="hljs-keyword">let</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>); <span class="hljs-comment">// 用于解析HTML的库</span><br><span class="hljs-keyword">let</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>); <span class="hljs-comment">// 文件系统模块，用于文件操作</span><br><br><span class="hljs-comment">// 初始化电影列表和基础URL</span><br><span class="hljs-keyword">let</span> movies = [];<br><span class="hljs-keyword">let</span> basicUrl = <span class="hljs-string">&#x27;https://movie.douban.com/top250&#x27;</span>;<br><br><span class="hljs-comment">// 防止并发控制的函数，确保某段代码只被执行一次</span><br><span class="hljs-keyword">let</span> once = <span class="hljs-keyword">function</span> (<span class="hljs-params">cb</span>) &#123;<br>    <span class="hljs-keyword">let</span> active = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (!active) &#123;<br>            active = <span class="hljs-literal">true</span>;<br>            <span class="hljs-title function_">cb</span>();<br>        &#125;<br>    &#125;;<br>&#125;;<br><br><span class="hljs-comment">// 日志打印函数，利用once确保日志不重复打印</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">item</span>) &#123;<br>    <span class="hljs-title function_">once</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">// 提取单个电影信息的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getMovieInfo</span>(<span class="hljs-params">node</span>) &#123;<br>    <span class="hljs-keyword">let</span> $ = cheerio.<span class="hljs-title function_">load</span>(node); <span class="hljs-comment">// 使用cheerio加载HTML节点</span><br>    <span class="hljs-keyword">let</span> titles = $(<span class="hljs-string">&#x27;.info .hd span&#x27;</span>); <span class="hljs-comment">// 获取标题元素</span><br>    titles = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(titles).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> $(t).<span class="hljs-title function_">text</span>()); <span class="hljs-comment">// 将标题文本内容提取到数组</span><br>    <span class="hljs-keyword">let</span> bd = $(<span class="hljs-string">&#x27;.info .bd&#x27;</span>); <span class="hljs-comment">// 获取电影信息块</span><br>    <span class="hljs-keyword">let</span> info = bd.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;p&#x27;</span>).<span class="hljs-title function_">text</span>(); <span class="hljs-comment">// 提取简介文本</span><br>    <span class="hljs-keyword">let</span> score = bd.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.star .rating_num&#x27;</span>).<span class="hljs-title function_">text</span>(); <span class="hljs-comment">// 提取评分</span><br>    <span class="hljs-keyword">return</span> &#123; titles, info, score &#125;; <span class="hljs-comment">// 返回电影信息对象</span><br>&#125;<br><br><span class="hljs-comment">// 获取单页电影列表的异步函数</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getPage</span>(<span class="hljs-params">url, num</span>) &#123;<br>    <span class="hljs-keyword">let</span> html = <span class="hljs-keyword">await</span> <span class="hljs-title function_">request</span>(&#123; url &#125;); <span class="hljs-comment">// 发起请求获取HTML</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;连接成功！&#x27;</span>, <span class="hljs-string">`正在爬取第<span class="hljs-subst">$&#123;num + <span class="hljs-number">1</span>&#125;</span>页数据`</span>); <span class="hljs-comment">// 打印日志</span><br>    <span class="hljs-keyword">let</span> $ = cheerio.<span class="hljs-title function_">load</span>(html); <span class="hljs-comment">// 解析HTML</span><br>    <span class="hljs-keyword">let</span> movieNodes = $(<span class="hljs-string">&#x27;#content .article .grid_view&#x27;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.item&#x27;</span>); <span class="hljs-comment">// 获取电影项</span><br>    <span class="hljs-keyword">let</span> movieList = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(movieNodes).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">node</span> =&gt;</span> <span class="hljs-title function_">getMovieInfo</span>(node)); <span class="hljs-comment">// 提取各电影信息</span><br>    <span class="hljs-keyword">return</span> movieList; <span class="hljs-comment">// 返回当前页电影列表</span><br>&#125;<br><br><span class="hljs-comment">// 主函数，执行爬虫逻辑</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> =  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span>; <span class="hljs-comment">// 需爬取的页数</span><br>    <span class="hljs-keyword">let</span> list = []; <span class="hljs-comment">// 存储所有电影信息的列表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>        <span class="hljs-keyword">let</span> url = <span class="hljs-string">`<span class="hljs-subst">$&#123;basicUrl&#125;</span>?start=<span class="hljs-subst">$&#123;<span class="hljs-number">25</span> * i&#125;</span>`</span>; <span class="hljs-comment">// 构造URL</span><br>        list.<span class="hljs-title function_">push</span>(...<span class="hljs-keyword">await</span> <span class="hljs-title function_">getPage</span>(url, i)); <span class="hljs-comment">// 爬取每页数据并添加到list</span><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list.<span class="hljs-property">length</span>); <span class="hljs-comment">// 打印总数</span><br>    fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;./output.json&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(list), <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">// 写入文件</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;生成json文件成功！&#x27;</span>);<br>    &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Socket-IO"><a href="#Socket-IO" class="headerlink" title="Socket.IO"></a>Socket.IO</h2>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
