<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue3 文档</title>
    <link href="/2024/05/22/content/vue/vue3/"/>
    <url>/2024/05/22/content/vue/vue3/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue3-快速上手"><a href="#Vue3-快速上手" class="headerlink" title="Vue3 快速上手"></a>Vue3 快速上手</h1><img src="https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png" style="width:200px" /><h2 id="1-Vue3-简介"><a href="#1-Vue3-简介" class="headerlink" title="1.Vue3 简介"></a>1.Vue3 简介</h2><ul><li>2020 年 9 月 18 日，Vue.js 发布 3.0 版本，代号：One Piece（海贼王）</li><li>耗时 2 年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个 RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次 PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99 位贡献者</a></li><li>github 上的 tags 地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="2-Vue3-带来了什么"><a href="#2-Vue3-带来了什么" class="headerlink" title="2.Vue3 带来了什么"></a>2.Vue3 带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li><p>打包大小减少 41%</p></li><li><p>初次渲染快 55%, 更新渲染快 133%</p></li><li><p>内存减少 54%</p><p>……</p><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul><li><p>使用 Proxy 代替 defineProperty 实现响应式</p></li><li><p>重写虚拟 DOM 的实现和 Tree-Shaking</p><p>……</p></li></ul><h3 id="3-拥抱-TypeScript"><a href="#3-拥抱-TypeScript" class="headerlink" title="3.拥抱 TypeScript"></a>3.拥抱 TypeScript</h3><ul><li>Vue3 可以更好的支持 TypeScript</li></ul><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol><li><p>Composition API（组合 API）</p><ul><li>setup 配置</li><li>ref 与 reactive</li><li>watch 与 watchEffect</li><li>provide 与 inject</li><li>……</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment</li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除 keyCode 支持作为 v-on 的修饰符</li><li>…..</li></ul><h1 id="一、创建-Vue3-0-工程"><a href="#一、创建-Vue3-0-工程" class="headerlink" title="一、创建 Vue3.0 工程"></a>一、创建 Vue3.0 工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><p> 官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span><br>vue --version<br><span class="hljs-comment">## 安装或者升级你的@vue/cli</span><br>npm install -g @vue/cli<br><span class="hljs-comment">## 创建</span><br>vue create vue_test<br><span class="hljs-comment">## 启动</span><br><span class="hljs-built_in">cd</span> vue_test<br>npm run serve<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2></li></ol></li></ul><h2 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite 官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><ul><li>什么是 vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite 构建对比图</li></ul><p><img src="https://cn.vitejs.dev/assets/bundler.37740380.png" style="width:500px;height:280px;float:left" /><img src="https://cn.vitejs.dev/assets/esm.3070012d.png" style="width:480px;height:280px" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 创建工程</span><br>npm init vite-app &lt;project-name&gt;<br><span class="hljs-comment">## 进入工程目录</span><br><span class="hljs-built_in">cd</span> &lt;project-name&gt;<br><span class="hljs-comment">## 安装依赖</span><br>npm install<br><span class="hljs-comment">## 运行</span><br>npm run dev<br></code></pre></td></tr></table></figure><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="二、常用-Composition-API"><a href="#二、常用-Composition-API" class="headerlink" title="二、常用 Composition API"></a>二、常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="1-拉开序幕的-setup"><a href="#1-拉开序幕的-setup" class="headerlink" title="1.拉开序幕的 setup"></a>1.拉开序幕的 setup</h2><ol><li>理解：Vue3.0 中一个新的配置项，值为一个函数。</li><li>setup 是所有<strong style="color:#DD5145">Composition API（组合 API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据、方法等等，均要配置在 setup 中。</li><li>setup 函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>尽量不要与 Vue2.x 配置混用<ul><li>Vue2.x 配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup 中的属性、方法。</li><li>但在 setup 中<strong style="color:#DD5145">不能访问到</strong>Vue2.x 配置（data、methos、computed…）。</li><li>如果有重名, setup 优先。</li></ul></li><li>setup 不能是一个 async 函数，因为返回值不再是 return 的对象, 而是 promise, 模板看不到 return 对象中的属性。（后期也可以返回一个 Promise 实例，但需要 Suspense 和异步组件的配合）</li></ol></li></ol><h2 id="2-ref-函数"><a href="#2-ref-函数" class="headerlink" title="2.ref 函数"></a>2.ref 函数</h2><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code><ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference 对象，简称 ref 对象）</strong>。</li><li>JS 中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了 Vue3.0 中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h2 id="3-reactive-函数"><a href="#3-reactive-函数" class="headerlink" title="3.reactive 函数"></a>3.reactive 函数</h2><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy 的实例对象，简称 proxy 对象）</strong></li><li>reactive 定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h2 id="4-Vue3-0-中的响应式原理"><a href="#4-Vue3-0-中的响应式原理" class="headerlink" title="4.Vue3.0 中的响应式原理"></a>4.Vue3.0 中的响应式原理</h2><h3 id="vue2-x-的响应式"><a href="#vue2-x-的响应式" class="headerlink" title="vue2.x 的响应式"></a>vue2.x 的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(data, <span class="hljs-string">&#x27;count&#x27;</span>, &#123;<br><span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;&#125;,<br><span class="hljs-title function_">set</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h3 id="Vue3-0-的响应式"><a href="#Vue3-0-的响应式" class="headerlink" title="Vue3.0 的响应式"></a>Vue3.0 的响应式</h3><ul><li><p>实现原理:</p><ul><li><p>通过 Proxy（代理）: 拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过 Reflect（反射）: 对源对象的属性进行操作。</p></li><li><p>MDN 文档中描述的 Proxy 与 Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(data, &#123;<br><span class="hljs-comment">// 拦截读取属性值</span><br><span class="hljs-title function_">get</span>(<span class="hljs-params">target, prop</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, prop);<br>&#125;,<br><span class="hljs-comment">// 拦截设置属性值或添加新属性</span><br><span class="hljs-title function_">set</span>(<span class="hljs-params">target, prop, value</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, prop, value);<br>&#125;,<br><span class="hljs-comment">// 拦截删除属性</span><br><span class="hljs-title function_">deleteProperty</span>(<span class="hljs-params">target, prop</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(target, prop);<br>&#125;<br>&#125;);<br><br>proxy.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;tom&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><h2 id="5-reactive-对比-ref"><a href="#5-reactive-对比-ref" class="headerlink" title="5.reactive 对比 ref"></a>5.reactive 对比 ref</h2><ul><li>从定义数据角度对比：<ul><li>ref 用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li>reactive 用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li>备注：ref 也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li>ref 通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive 通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref 定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li>reactive 定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="6-setup-的两个注意点"><a href="#6-setup-的两个注意点" class="headerlink" title="6.setup 的两个注意点"></a>6.setup 的两个注意点</h2><ul><li><p>setup 执行的时机</p><ul><li>在 beforeCreate 之前执行一次，this 是 undefined。</li></ul></li><li><p>setup 的参数</p><ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在 props 配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h2><h3 id="1-computed-函数"><a href="#1-computed-函数" class="headerlink" title="1.computed 函数"></a>1.computed 函数</h3><ul><li><p>与 Vue2.x 中 computed 配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;computed&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br><span class="hljs-comment">//计算属性——简写</span><br>    <span class="hljs-keyword">let</span> fullName = <span class="hljs-title function_">computed</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> person.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + person.<span class="hljs-property">lastName</span><br>    &#125;)<br>    <span class="hljs-comment">//计算属性——完整</span><br>    <span class="hljs-keyword">let</span> fullName = <span class="hljs-title function_">computed</span>(&#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">return</span> person.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + person.<span class="hljs-property">lastName</span><br>        &#125;,<br>        <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>            <span class="hljs-keyword">const</span> nameArr = value.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>)<br>            person.<span class="hljs-property">firstName</span> = nameArr[<span class="hljs-number">0</span>]<br>            person.<span class="hljs-property">lastName</span> = nameArr[<span class="hljs-number">1</span>]<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-watch-函数"><a href="#2-watch-函数" class="headerlink" title="2.watch 函数"></a>2.watch 函数</h3><ul><li><p>与 Vue2.x 中 watch 配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视 reactive 定义的响应式数据时：oldValue 无法正确获取、强制开启了深度监视（deep 配置失效）。</li><li>监视 reactive 定义的响应式数据中某个属性时：deep 配置有效。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//情况一：监视ref定义的响应式数据</span><br><span class="hljs-title function_">watch</span>(<br>sum,<br><span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sum变化了&#x27;</span>, newValue, oldValue);<br>&#125;,<br>&#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> &#125;<br>);<br><br><span class="hljs-comment">//情况二：监视多个ref定义的响应式数据</span><br><span class="hljs-title function_">watch</span>([sum, msg], <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sum或msg变化了&#x27;</span>, newValue, oldValue);<br>&#125;);<br><br><span class="hljs-comment">/* 情况三：监视reactive定义的响应式数据</span><br><span class="hljs-comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span><br><span class="hljs-comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_">watch</span>(<br>person,<br><span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person变化了&#x27;</span>, newValue, oldValue);<br>&#125;,<br>&#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">deep</span>: <span class="hljs-literal">false</span> &#125;<br>); <span class="hljs-comment">//此处的deep配置不再奏效</span><br><br><span class="hljs-comment">//情况四：监视reactive定义的响应式数据中的某个属性</span><br><span class="hljs-title function_">watch</span>(<br><span class="hljs-function">() =&gt;</span> person.<span class="hljs-property">job</span>,<br><span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>, newValue, oldValue);<br>&#125;,<br>&#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span> &#125;<br>);<br><br><span class="hljs-comment">//情况五：监视reactive定义的响应式数据中的某些属性</span><br><span class="hljs-title function_">watch</span>(<br>[<span class="hljs-function">() =&gt;</span> person.<span class="hljs-property">job</span>, <span class="hljs-function">() =&gt;</span> person.<span class="hljs-property">name</span>],<br><span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>, newValue, oldValue);<br>&#125;,<br>&#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span> &#125;<br>);<br><br><span class="hljs-comment">//特殊情况</span><br><span class="hljs-title function_">watch</span>(<br><span class="hljs-function">() =&gt;</span> person.<span class="hljs-property">job</span>,<br><span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>, newValue, oldValue);<br>&#125;,<br>&#123; <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span> &#125;<br>); <span class="hljs-comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-watchEffect-函数"><a href="#3-watchEffect-函数" class="headerlink" title="3.watchEffect 函数"></a>3.watchEffect 函数</h3><ul><li><p>watch 的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect 的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect 有点像 computed：</p><ul><li>但 computed 注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而 watchEffect 更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span><br><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> x1 = sum.<span class="hljs-property">value</span>;<br><span class="hljs-keyword">const</span> x2 = person.<span class="hljs-property">age</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;watchEffect配置的回调执行了&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h2><div style="border:1px solid black;width:380px;float:left;margin-right:20px;"><strong>vue2.x的生命周期</strong><img src="https://cn.vuejs.org/images/lifecycle.png" alt="lifecycle_2" style="zoom:33%;width:1200px" /></div><div style="border:1px solid black;width:510px;height:985px;float:left"><strong>vue3.0的生命周期</strong><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="lifecycle_2" style="zoom:33%;width:2500px" /></div><p>1</p><ul><li>Vue3.0 中可以继续使用 Vue2.x 中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0 也提供了 Composition API 形式的生命周期钩子，与 Vue2.x 中钩子对应关系如下：<ul><li><code>beforeCreate</code>&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li><li><code>created</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li><li><code>beforeMount</code> &#x3D;&#x3D;&#x3D;&gt;<code>onBeforeMount</code></li><li><code>mounted</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>&#x3D;&#x3D;&#x3D;&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> &#x3D;&#x3D;&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUnmounted</code></li></ul></li></ul><h2 id="9-自定义-hook-函数"><a href="#9-自定义-hook-函数" class="headerlink" title="9.自定义 hook 函数"></a>9.自定义 hook 函数</h2><ul><li><p>什么是 hook？—— 本质是一个函数，把 setup 函数中使用的 Composition API 进行了封装。</p></li><li><p>类似于 vue2.x 中的 mixin。</p></li><li><p>自定义 hook 的优势: 复用代码, 让 setup 中的逻辑更清楚易懂。</p></li></ul><h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h2><ul><li><p>作用：创建一个 ref 对象，其 value 值指向另一个对象中的某个属性。</p></li><li><p>语法：<code>const name = toRef(person,&#39;name&#39;)</code></p></li><li><p>应用: 要将响应式对象中的某个属性单独提供给外部使用时。</p></li><li><p>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></p></li></ul><h1 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。</li></ul></li></ul><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot; /&gt;<br>&lt;h3&gt;&#123;&#123; keyword &#125;&#125;&lt;/h3&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref, customRef &#125; from &#x27;vue&#x27;;<br>export default &#123;<br>name: &#x27;Demo&#x27;,<br>setup() &#123;<br>// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref<br>//自定义一个myRef<br>function myRef(value, delay) &#123;<br>let timer;<br>//通过customRef去实现自定义<br>return customRef((track, trigger) =&gt; &#123;<br>return &#123;<br>get() &#123;<br>track(); //告诉Vue这个value值是需要被“追踪”的<br>return value;<br>&#125;,<br>set(newValue) &#123;<br>clearTimeout(timer);<br>timer = setTimeout(() =&gt; &#123;<br>value = newValue;<br>trigger(); //告诉Vue去更新界面<br>&#125;, delay);<br>&#125;<br>&#125;;<br>&#125;);<br>&#125;<br>let keyword = myRef(&#x27;hello&#x27;, 500); //使用程序员自定义的ref<br>return &#123;<br>keyword<br>&#125;;<br>&#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><img src="https://v3.cn.vuejs.org/images/components_provide.png" style="width:300px" /><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>......<br>    <span class="hljs-keyword">let</span> car = <span class="hljs-title function_">reactive</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;奔驰&#x27;</span>,<span class="hljs-attr">price</span>:<span class="hljs-string">&#x27;40万&#x27;</span>&#125;)<br>    <span class="hljs-title function_">provide</span>(<span class="hljs-string">&#x27;car&#x27;</span>,car)<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>后代组件中：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setup</span>(<span class="hljs-params">props,context</span>)&#123;<br>......<br>    <span class="hljs-keyword">const</span> car = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&#x27;car&#x27;</span>)<br>    <span class="hljs-keyword">return</span> &#123;car&#125;<br>......<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统 OptionsAPI 中，新增或者修改一个需求，就需要分别在 data，methods，computed 里修改 。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image"></p><h2 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image"></p><h1 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul><li>在 Vue2 中: 组件必须有一个根标签</li><li>在 Vue3 中: 组件可以没有根标签, 内部会将多个标签包含在一个 Fragment 虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul><li><p>什么是 Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件 html 结构</strong>移动到指定位置的技术。</p></li><li><pre><code class="vue">&lt;teleport to=&quot;移动位置&quot;&gt;    &lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;        &lt;div class=&quot;dialog&quot;&gt;            &lt;h3&gt;我是一个弹窗&lt;/h3&gt;            &lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/teleport&gt;<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br><span class="hljs-comment">## 3.Suspense</span><br><br>-   等待异步组件时渲染一些额外内容，让应用有更好的用户体验<br><br>-   使用步骤：<br><br>    -   异步引入组件<br><br>        ```<span class="language-javascript">js</span><br><span class="language-javascript">        <span class="hljs-keyword">import</span> &#123; defineAsyncComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./components/Child.vue&#x27;</span>));</span><br></code></pre></td></tr></table></figure>-   使用`Suspense`包裹组件，并配置好`default` 与 `fallback`    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;app&quot;&gt;<br>&lt;h3&gt;我是App组件&lt;/h3&gt;<br>&lt;Suspense&gt;<br>&lt;template v-slot:default&gt;<br>&lt;Child /&gt;<br>&lt;/template&gt;<br>&lt;template v-slot:fallback&gt;<br>&lt;h3&gt;加载中.....&lt;/h3&gt;<br>&lt;/template&gt;<br>&lt;/Suspense&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></code></pre></li></ul><h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1-全局-API-的转移"><a href="#1-全局-API-的转移" class="headerlink" title="1.全局 API 的转移"></a>1.全局 API 的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//注册全局组件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;MyButton&#x27;</span>, &#123;<br>  <span class="hljs-attr">data</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;),<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">//注册全局指令</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;<br>  <span class="hljs-attr">inserted</span>: <span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.<span class="hljs-title function_">focus</span>()<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0 中对这些 API 做出了调整：</p><ul><li><p>将全局的 API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p>data 选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x 写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.v-enter</span>,<br><span class="hljs-selector-class">.v-leave-to</span> &#123;<br><span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.v-leave</span>,<br><span class="hljs-selector-class">.v-enter-to</span> &#123;<br><span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Vue3.x 写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.v-enter-from</span>,<br><span class="hljs-selector-class">.v-leave-to</span> &#123;<br><span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.v-leave-from</span>,<br><span class="hljs-selector-class">.v-enter-to</span> &#123;<br><span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode 作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;my-component v-on:close=&quot;handleComponentEvent&quot; v-on:click=&quot;handleNativeClickEvent&quot; /&gt;<br></code></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>emits: [&#x27;close&#x27;]<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>……</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue2 文档</title>
    <link href="/2024/05/22/content/vue/vue2/"/>
    <url>/2024/05/22/content/vue/vue2/</url>
    
    <content type="html"><![CDATA[<p><img src="https://pic.imgdb.cn/item/64199d23a682492fcc9fe5bc.jpg"></p><p>Vue2 文档</p><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs markdown">├── node<span class="hljs-emphasis">_modules</span><br><span class="hljs-emphasis">├── public</span><br><span class="hljs-emphasis">│ ├── favicon.ico: 页签图标</span><br><span class="hljs-emphasis">│ └── index.html: 主页面</span><br><span class="hljs-emphasis">├── src</span><br><span class="hljs-emphasis">│ ├── assets: 存放静态资源</span><br><span class="hljs-emphasis">│ │ └── logo.png</span><br><span class="hljs-emphasis">│ │── component: 存放组件</span><br><span class="hljs-emphasis">│ │ └── HelloWorld.vue</span><br><span class="hljs-emphasis">│ │── App.vue: 汇总所有组件</span><br><span class="hljs-emphasis">│ │── main.js: 入口文件</span><br><span class="hljs-emphasis">├── .gitignore: git 版本管制忽略的配置</span><br><span class="hljs-emphasis">├── babel.config.js: babel 的配置文件</span><br><span class="hljs-emphasis">├── package.json: 应用包配置文件</span><br><span class="hljs-emphasis">├── README.md: 应用描述文件</span><br><span class="hljs-emphasis">├── package-lock.json：包版本控制文件</span><br></code></pre></td></tr></table></figure><h2 id="关于不同版本的-Vue"><a href="#关于不同版本的-Vue" class="headerlink" title="关于不同版本的 Vue"></a>关于不同版本的 Vue</h2><ol><li>vue.js 与 vue.runtime.xxx.js 的区别：<ol><li>vue.js 是完整版的 Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js 是运行版的 Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为 vue.runtime.xxx.js 没有模板解析器，所以不能使用 template 这个配置项，需要使用 render 函数接收到的 createElement 函数去指定具体内容。</li></ol><h2 id="vue-config-js-配置文件"><a href="#vue-config-js-配置文件" class="headerlink" title="vue.config.js 配置文件"></a>vue.config.js 配置文件</h2><ol><li>使用 vue inspect &gt; output.js 可以查看到 Vue 脚手架的默认配置。</li><li>使用 vue.config.js 可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ol><h2 id="ref-属性"><a href="#ref-属性" class="headerlink" title="ref 属性"></a>ref 属性</h2><ol><li>被用来给元素或子组件注册引用信息（id 的替代者）</li><li>应用在 html 标签上获取的是真实 DOM 元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2 id="props-配置项"><a href="#props-配置项" class="headerlink" title="props 配置项"></a>props 配置项</h2><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;]</code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">props</span>:&#123;<br> <span class="hljs-attr">name</span>:&#123;<br> <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>, <span class="hljs-comment">//类型</span><br> <span class="hljs-attr">required</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//必要性</span><br> <span class="hljs-attr">default</span>:<span class="hljs-string">&#x27;老王&#x27;</span> <span class="hljs-comment">//默认值</span><br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>备注：props 是只读的，Vue 底层会监测你对 props 的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制 props 的内容到 data 中一份，然后去修改 data 中的数据。</p></blockquote></li></ol><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p> 第一步定义混合：</p> <figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nim">&#123;<br>    data()<span class="hljs-meta">&#123;....&#125;</span>,<br>    methods:<span class="hljs-meta">&#123;....&#125;</span><br>    ....<br>&#125;<br></code></pre></td></tr></table></figure><p> 第二步使用混入：</p><p> 全局混入：<code>Vue.mixin(xxx)</code><br> 局部混入：<code>mixins:[&#39;xxx&#39;]</code></p></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol><li><p>功能：用于增强 Vue</p></li><li><p>本质：包含 install 方法的一个对象，install 的第一个参数是 Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">对象.<span class="hljs-property">install</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">Vue, options</span>) &#123;<br>    <span class="hljs-comment">// 1. 添加全局过滤器</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(....)<br><br>    <span class="hljs-comment">// 2. 添加全局指令</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(....)<br><br>    <span class="hljs-comment">// 3. 配置全局混入(合)</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixin</span>(....)<br><br>    <span class="hljs-comment">// 4. 添加实例方法</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$myMethod</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;...&#125;<br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$myProperty</span> = xxxx<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><h2 id="scoped-样式"><a href="#scoped-样式" class="headerlink" title="scoped 样式"></a>scoped 样式</h2><ol><li>作用：让样式在局部生效，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2 id="总结-TodoList-案例"><a href="#总结-TodoList-案例" class="headerlink" title="总结 TodoList 案例"></a>总结 TodoList 案例</h2><ol><li><p>组件化编码流程：</p><p>(1).拆分静态组件：组件要按照功能点拆分，命名不要与 html 元素冲突。</p><p>(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><pre><code class="hljs">   1).一个组件在用：放在组件自身即可。   2). 一些组件在用：放在他们共同的父组件上（&lt;span style=&quot;color:red&quot;&gt;状态提升&lt;/span&gt;）。</code></pre><p>(3).实现交互：从绑定事件开始。</p></li><li><p>props 适用于：</p><p>(1).父组件 &#x3D;&#x3D;&gt; 子组件 通信</p><p>(2).子组件 &#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用 v-model 时要切记：v-model 绑定的值不能是 props 传过来的值，因为 props 是不可以修改的！</p></li><li><p>props 传过来的若是对象类型的值，修改对象中的属性时 Vue 不会报错，但不推荐这样做。</p></li></ol><h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持 5MB 左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关 API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code><br>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><pre><code class="hljs">  该方法接受一个键名作为参数，返回键名对应的值。</code></pre></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><pre><code class="hljs">  该方法接受一个键名作为参数，并把该键名从存储中删除。</code></pre></li><li><p><code>xxxxxStorage.clear()</code></p><pre><code class="hljs">  该方法会清空存储中的所有数据。</code></pre></li></ol></li><li><p>备注：</p><ol><li>SessionStorage 存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage 存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果 xxx 对应的 value 获取不到，那么 getItem 的返回值是 null。</li><li><code>JSON.parse(null)</code>的结果依然是 null。</li></ol></li></ol><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件</strong></p></li><li><p>使用场景：A 是父组件，B 是子组件，B 想给 A 传数据，那么就要在 A 中给 B 绑定自定义事件（<span style="color:red">事件的回调在 A 中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code> 或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Demo</span> ref=<span class="hljs-string">&quot;demo&quot;</span>/&gt;<br>......<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">xxx</span>.$on(<span class="hljs-string">&#x27;atguigu&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">test</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code></p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生 DOM 事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在 methods 中</span>，<span style="color:red">要么用箭头函数</span>，否则 this 指向会出问题！</p></li></ol><h2 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>   ......<br>   <span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = <span class="hljs-variable language_">this</span> <span class="hljs-comment">//安装全局事件总线，$bus就是当前应用的vm</span><br>   &#125;,<br>    ......<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A 组件想接收数据，则在 A 组件中给$bus 绑定自定义事件，事件的<span style="color:red">回调留在 A 组件自身。</span></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">methods</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">demo</span>(<span class="hljs-params">data</span>)&#123;......&#125;<br>&#125;<br>......<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$on(<span class="hljs-string">&#x27;xxxx&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">demo</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在 beforeDestroy 钩子中，用$off 去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装 pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A 组件想接收数据，则在 A 组件中订阅消息，订阅的<span style="color:red">回调留在 A 组件自身。</span></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">methods</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">demo</span>(<span class="hljs-params">data</span>)&#123;......&#125;<br>&#125;<br>......<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">pid</span> = pubsub.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">demo</span>) <span class="hljs-comment">//订阅消息</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在 beforeDestroy 钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新 DOM 进行某些操作时，要在 nextTick 所指定的回调函数中执行。</li></ol><h2 id="Vue-封装的过度与动画"><a href="#Vue-封装的过度与动画" class="headerlink" title="Vue 封装的过度与动画"></a>Vue 封装的过度与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM 元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img src="https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105" style="width:60%" /></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置 name 属性：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;transition name=&quot;hello&quot;&gt;<br>   &lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;<br>&lt;/transition&gt;<br></code></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h2 id="vue-脚手架配置代理"><a href="#vue-脚手架配置代理" class="headerlink" title="vue 脚手架配置代理"></a>vue 脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>在 vue.config.js 中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">devServer</span>: &#123;<br><span class="hljs-attr">proxy</span>: <span class="hljs-string">&#x27;http://localhost:5000&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>编写 vue.config.js 配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-attr">devServer</span>: &#123;<br><span class="hljs-attr">proxy</span>: &#123;<br><span class="hljs-string">&#x27;/api1&#x27;</span>: &#123;<br><span class="hljs-comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span><br><span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5000&#x27;</span>, <span class="hljs-comment">// 代理目标的基础路径</span><br><span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">pathRewrite</span>: &#123; <span class="hljs-string">&#x27;^/api1&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span> &#125;<br>&#125;,<br><span class="hljs-string">&#x27;/api2&#x27;</span>: &#123;<br><span class="hljs-comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span><br><span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5001&#x27;</span>, <span class="hljs-comment">// 代理目标的基础路径</span><br><span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">pathRewrite</span>: &#123; <span class="hljs-string">&#x27;^/api2&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span> &#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span><br><span class="hljs-comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span><br><span class="hljs-comment">   changeOrigin默认值为true</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入 html 结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>&lt;Category&gt;<br>           &lt;div&gt;html结构1&lt;/div&gt;<br>        &lt;/Category&gt;<br>子组件中：<br>&lt;template&gt;<br>&lt;div&gt;<br>&lt;!-- 定义插槽 --&gt;<br>&lt;slot&gt;插槽默认内容...&lt;/slot&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>具名插槽：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>&lt;Category&gt;<br>            &lt;template slot=&quot;center&quot;&gt;<br>              &lt;div&gt;html结构1&lt;/div&gt;<br>            &lt;/template&gt;<br><br>            &lt;template v-slot:footer&gt;<br>               &lt;div&gt;html结构2&lt;/div&gt;<br>            &lt;/template&gt;<br>        &lt;/Category&gt;<br>子组件中：<br>&lt;template&gt;<br>&lt;div&gt;<br>&lt;!-- 定义插槽 --&gt;<br>&lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;<br>&lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games 数据在 Category 组件中，但使用数据所遍历出来的结构由 App 组件决定）</p></li><li><p>具体编码：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>&lt;Category&gt;<br>         &lt;template scope=&quot;scopeData&quot;&gt;<br>            &lt;!-- 生成的是ul列表 --&gt;<br>            &lt;ul&gt;<br>               &lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;<br>            &lt;/ul&gt;<br>         &lt;/template&gt;<br>      &lt;/Category&gt;<br><br>&lt;Category&gt;<br>         &lt;template slot-scope=&quot;scopeData&quot;&gt;<br>            &lt;!-- 生成的是h4标题 --&gt;<br>            &lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;<br>         &lt;/template&gt;<br>      &lt;/Category&gt;<br>子组件中：<br>&lt;template&gt;<br>&lt;div&gt;<br>&lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name: &#x27;Category&#x27;,<br>props: [&#x27;title&#x27;],<br>//数据在子组件自身<br>data() &#123;<br>return &#123;<br>games: [&#x27;红色警戒&#x27;, &#x27;穿越火线&#x27;, &#x27;劲舞团&#x27;, &#x27;超级玛丽&#x27;]<br>&#125;;<br>&#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol></li></ol> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure></li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><pre><code class="hljs"> 在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</code></pre><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><pre><code class="hljs"> 多个组件需要共享数据时</code></pre><h3 id="3-搭建-vuex-环境"><a href="#3-搭建-vuex-环境" class="headerlink" title="3.搭建 vuex 环境"></a>3.搭建 vuex 环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入Vue核心库</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-comment">//引入Vuex</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-comment">//应用Vuex插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>);<br><br><span class="hljs-comment">//准备actions对象——响应组件中用户的动作</span><br><span class="hljs-keyword">const</span> actions = &#123;&#125;;<br><span class="hljs-comment">//准备mutations对象——修改state中的数据</span><br><span class="hljs-keyword">const</span> mutations = &#123;&#125;;<br><span class="hljs-comment">//准备state对象——保存具体的数据</span><br><span class="hljs-keyword">const</span> state = &#123;&#125;;<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>actions,<br>mutations,<br>state<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建 vm 时传入<code>store</code>配置项</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">......<br><span class="hljs-comment">//引入store</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br>......<br><br><span class="hljs-comment">//创建vm</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>   <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>   <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>   store<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入Vue核心库</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-comment">//引入Vuex</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-comment">//引用Vuex</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>);<br><br><span class="hljs-keyword">const</span> actions = &#123;<br><span class="hljs-comment">//响应组件中加的动作</span><br><span class="hljs-title function_">jia</span>(<span class="hljs-params">context, value</span>) &#123;<br><span class="hljs-comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span><br>context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;JIA&#x27;</span>, value);<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> mutations = &#123;<br><span class="hljs-comment">//执行加</span><br><span class="hljs-title function_">JIA</span>(<span class="hljs-params">state, value</span>) &#123;<br><span class="hljs-comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span><br>state.<span class="hljs-property">sum</span> += value;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//初始化数据</span><br><span class="hljs-keyword">const</span> state = &#123;<br><span class="hljs-attr">sum</span>: <span class="hljs-number">0</span><br>&#125;;<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>actions,<br>mutations,<br>state<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>组件中读取 vuex 中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改 vuex 中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过 actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters-的使用"><a href="#5-getters-的使用" class="headerlink" title="5.getters 的使用"></a>5.getters 的使用</h3><ol><li><p>概念：当 state 中的数据需要经过加工后再使用时，可以使用 getters 加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">......<br><br><span class="hljs-keyword">const</span> getters = &#123;<br>   <span class="hljs-title function_">bigSum</span>(<span class="hljs-params">state</span>)&#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">sum</span> * <span class="hljs-number">10</span><br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>   ......<br>   getters<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6-四个-map-方法的使用"><a href="#6-四个-map-方法的使用" class="headerlink" title="6.四个 map 方法的使用"></a>6.四个 map 方法的使用</h3><ol><li><p><strong>mapState 方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span><br>     ...<span class="hljs-title function_">mapState</span>(&#123;<span class="hljs-attr">sum</span>:<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-attr">school</span>:<span class="hljs-string">&#x27;school&#x27;</span>,<span class="hljs-attr">subject</span>:<span class="hljs-string">&#x27;subject&#x27;</span>&#125;),<br><br>    <span class="hljs-comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span><br>    ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-string">&#x27;school&#x27;</span>,<span class="hljs-string">&#x27;subject&#x27;</span>]),<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p><strong>mapGetters 方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span><br>    ...<span class="hljs-title function_">mapGetters</span>(&#123;<span class="hljs-attr">bigSum</span>:<span class="hljs-string">&#x27;bigSum&#x27;</span>&#125;),<br><br>    <span class="hljs-comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span><br>    ...<span class="hljs-title function_">mapGetters</span>([<span class="hljs-string">&#x27;bigSum&#x27;</span>])<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p><strong>mapActions 方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span><br>    ...<span class="hljs-title function_">mapActions</span>(&#123;<span class="hljs-attr">incrementOdd</span>:<span class="hljs-string">&#x27;jiaOdd&#x27;</span>,<span class="hljs-attr">incrementWait</span>:<span class="hljs-string">&#x27;jiaWait&#x27;</span>&#125;)<br><br>    <span class="hljs-comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span><br>    ...<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;jiaOdd&#x27;</span>,<span class="hljs-string">&#x27;jiaWait&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>mapMutations 方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-comment">//靠mapActions生成：increment、decrement（对象形式）</span><br>    ...<span class="hljs-title function_">mapMutations</span>(&#123;<span class="hljs-attr">increment</span>:<span class="hljs-string">&#x27;JIA&#x27;</span>,<span class="hljs-attr">decrement</span>:<span class="hljs-string">&#x27;JIAN&#x27;</span>&#125;),<br><br>    <span class="hljs-comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span><br>    ...<span class="hljs-title function_">mapMutations</span>([<span class="hljs-string">&#x27;JIA&#x27;</span>,<span class="hljs-string">&#x27;JIAN&#x27;</span>]),<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions 与 mapMutations 使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> countAbout = &#123;<br>  <span class="hljs-attr">namespaced</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">//开启命名空间</span><br>  <span class="hljs-attr">state</span>:&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1</span>&#125;,<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">bigSum</span>(<span class="hljs-params">state</span>)&#123;<br>       <span class="hljs-keyword">return</span> state.<span class="hljs-property">sum</span> * <span class="hljs-number">10</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> personAbout = &#123;<br>  <span class="hljs-attr">namespaced</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">//开启命名空间</span><br>  <span class="hljs-attr">state</span>:&#123; ... &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    countAbout,<br>    personAbout<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取 state 数据：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//方式一：自己直接读取</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">personAbout</span>.<span class="hljs-property">list</span><br><span class="hljs-comment">//方式二：借助mapState读取：</span><br>...<span class="hljs-title function_">mapState</span>(<span class="hljs-string">&#x27;countAbout&#x27;</span>,[<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-string">&#x27;school&#x27;</span>,<span class="hljs-string">&#x27;subject&#x27;</span>]),<br></code></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取 getters 数据：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//方式一：自己直接读取</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>[<span class="hljs-string">&#x27;personAbout/firstPersonName&#x27;</span>]<br><span class="hljs-comment">//方式二：借助mapGetters读取：</span><br>...<span class="hljs-title function_">mapGetters</span>(<span class="hljs-string">&#x27;countAbout&#x27;</span>,[<span class="hljs-string">&#x27;bigSum&#x27;</span>])<br></code></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用 dispatch</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//方式一：自己直接dispatch</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;personAbout/addPersonWang&#x27;</span>,person)<br><span class="hljs-comment">//方式二：借助mapActions：</span><br>...<span class="hljs-title function_">mapActions</span>(<span class="hljs-string">&#x27;countAbout&#x27;</span>,&#123;<span class="hljs-attr">incrementOdd</span>:<span class="hljs-string">&#x27;jiaOdd&#x27;</span>,<span class="hljs-attr">incrementWait</span>:<span class="hljs-string">&#x27;jiaWait&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用 commit</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//方式一：自己直接commit</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)<br><span class="hljs-comment">//方式二：借助mapMutations：</span><br>...<span class="hljs-title function_">mapMutations</span>(<span class="hljs-string">&#x27;countAbout&#x27;</span>,&#123;<span class="hljs-attr">increment</span>:<span class="hljs-string">&#x27;JIA&#x27;</span>,<span class="hljs-attr">decrement</span>:<span class="hljs-string">&#x27;JIAN&#x27;</span>&#125;),<br></code></pre></td></tr></table></figure></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key 是路径，value 是组件。</li></ol><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装 vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写 router 配置项:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入VueRouter</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><span class="hljs-comment">//引入Luyou 组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/About&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Home&#x27;</span>;<br><br><span class="hljs-comment">//创建router实例对象，去管理一组一组的路由规则</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br><span class="hljs-attr">routes</span>: [<br>&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>&#125;<br>]<br>&#125;);<br><br><span class="hljs-comment">//暴露router</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure></li><li><p>实现切换（active-class 可配置高亮样式）</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li><li><p>指定展示位置</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-view&gt;&lt;/router-view&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个 router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol><li><p>配置路由规则，使用 children 配置项：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">routes</span>: [<br>&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>,<br><span class="hljs-attr">children</span>: [<br><span class="hljs-comment">//通过children配置子级路由</span><br>&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;news&#x27;</span>, <span class="hljs-comment">//此处一定不要写：/news</span><br><span class="hljs-attr">component</span>: <span class="hljs-title class_">News</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-comment">//此处一定不要写：/message</span><br><span class="hljs-attr">component</span>: <span class="hljs-title class_">Message</span><br>&#125;<br>]<br>&#125;<br>];<br></code></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="4-路由的-query-参数"><a href="#4-路由的-query-参数" class="headerlink" title="4.路由的 query 参数"></a>4.路由的 query 参数</h3><ol><li><p>传递参数</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;<br>&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;<br>&lt;router-link<br>:to=&quot;&#123;<br>path: &#x27;/home/message/detail&#x27;,<br>query: &#123;<br>id: 666,<br>title: &#x27;你好&#x27;<br>&#125;<br>&#125;&quot;<br>&gt;跳转&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li><li><p>接收参数：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$route.<span class="hljs-property">query</span>.<span class="hljs-property">id</span>;<br>$route.<span class="hljs-property">query</span>.<span class="hljs-property">title</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>   <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/demo&#x27;</span>,<br>   <span class="hljs-attr">component</span>:<span class="hljs-title class_">Demo</span>,<br>   <span class="hljs-attr">children</span>:[<br>      &#123;<br>         <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;test&#x27;</span>,<br>         <span class="hljs-attr">component</span>:<span class="hljs-title class_">Test</span>,<br>         <span class="hljs-attr">children</span>:[<br>            &#123;<br>                      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-comment">//给路由命名</span><br>               <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;welcome&#x27;</span>,<br>               <span class="hljs-attr">component</span>:<span class="hljs-title class_">Hello</span>,<br>            &#125;<br>         ]<br>      &#125;<br>   ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>简化跳转：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!--简化前，需要写完整的路径 --&gt;<br>&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!--简化后，直接通过名字跳转 --&gt;<br>&lt;router-link :to=&quot;&#123; name: &#x27;hello&#x27; &#125;&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!--简化写法配合传递参数 --&gt;<br>&lt;router-link<br>:to=&quot;&#123;<br>name: &#x27;hello&#x27;,<br>query: &#123;<br>id: 666,<br>title: &#x27;你好&#x27;<br>&#125;<br>&#125;&quot;<br>&gt;跳转&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="6-路由的-params-参数"><a href="#6-路由的-params-参数" class="headerlink" title="6.路由的 params 参数"></a>6.路由的 params 参数</h3><ol><li><p>配置路由，声明接收 params 参数</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>   <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br>   <span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span>,<br>   <span class="hljs-attr">children</span>:[<br>      &#123;<br>         <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;news&#x27;</span>,<br>         <span class="hljs-attr">component</span>:<span class="hljs-title class_">News</span><br>      &#125;,<br>      &#123;<br>         <span class="hljs-attr">component</span>:<span class="hljs-title class_">Message</span>,<br>         <span class="hljs-attr">children</span>:[<br>            &#123;<br>               <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br>               <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail/:id/:title&#x27;</span>, <span class="hljs-comment">//使用占位符声明接收params参数</span><br>               <span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span><br>            &#125;<br>         ]<br>      &#125;<br>   ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>传递参数</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;<br>&lt;router-link :to=&quot;/home/aeegmss / detail / 666 / 你好&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;<br>&lt;router-link<br>:to=&quot;&#123;<br>name: &#x27;xiangqing&#x27;,<br>params: &#123;<br>id: 666,<br>title: &#x27;你好&#x27;<br>&#125;<br>&#125;&quot;<br>&gt;跳转&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带 params 参数时，若使用 to 的对象写法，则不能使用 path 配置项，必须使用 name 配置！</p></blockquote></li><li><p>接收参数：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$route.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>;<br>$route.<span class="hljs-property">params</span>.<span class="hljs-property">title</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="7-路由的-props-配置"><a href="#7-路由的-props-配置" class="headerlink" title="7.路由的 props 配置"></a>7.路由的 props 配置</h3><p>作用：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>   <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br>   <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail/:id&#x27;</span>,<br>   <span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span>,<br><br>   <span class="hljs-comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span><br>   <span class="hljs-comment">// props:&#123;a:900&#125;</span><br><br>   <span class="hljs-comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span><br>   <span class="hljs-comment">// props:true</span><br><br>   <span class="hljs-comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span><br>   <span class="hljs-title function_">props</span>(<span class="hljs-params">route</span>)&#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>         <span class="hljs-attr">id</span>:route.<span class="hljs-property">query</span>.<span class="hljs-property">id</span>,<br>         <span class="hljs-attr">title</span>:route.<span class="hljs-property">query</span>.<span class="hljs-property">title</span><br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-的-replace-属性"><a href="#8-的-replace-属性" class="headerlink" title="8.&lt;router-link&gt;的 replace 属性"></a>8.<code>&lt;router-link&gt;</code>的 replace 属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol><li><p>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//$router的两个API</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">params</span>: &#123;<br><span class="hljs-attr">id</span>: xxx,<br><span class="hljs-attr">title</span>: xxx<br>&#125;<br>&#125;);<br><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">replace</span>(&#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">params</span>: &#123;<br><span class="hljs-attr">id</span>: xxx,<br><span class="hljs-attr">title</span>: xxx<br>&#125;<br>&#125;);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">forward</span>(); <span class="hljs-comment">//前进</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">back</span>(); <span class="hljs-comment">//后退</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">go</span>(); <span class="hljs-comment">//可前进也可后退</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：<br>在 router-view 里面使用</p><keep-alive include="News"><router-view></router-view></keep-alive></li></ol><p>注意 include 里面的名字是组件名</p><p>在动态组件 components 里面使用<br>import Home from ‘@&#x2F;components&#x2F;Home&#x2F;Index’<br>import Pano from ‘@&#x2F;components&#x2F;Pano&#x2F;Pano’</p><keep-alive>  <component :is="currentTabComponent"></component></keep-alive><p>&#x2F;&#x2F; currentTabComponent 的值为 Home 或者 Pano ，我们可以动态的切换 currentTabComponent 的值</p><p>keep-alive 的深入理解与使用(配合 router-view 缓存整个路由页面)_Young 丶的博客-CSDN 博客_keep-alive router-view</p><h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeEach&#x27;</span>, to, <span class="hljs-keyword">from</span>);<br><span class="hljs-keyword">if</span> (to.<span class="hljs-property">meta</span>.<span class="hljs-property">isAuth</span>) &#123;<br><span class="hljs-comment">//判断当前路由是否需要进行权限控制</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;school&#x27;</span>) === <span class="hljs-string">&#x27;atguigu&#x27;</span>) &#123;<br><span class="hljs-comment">//权限控制的具体规则</span><br><span class="hljs-title function_">next</span>(); <span class="hljs-comment">//放行</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;暂无权限查看&#x27;</span>);<br><span class="hljs-comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">next</span>(); <span class="hljs-comment">//放行</span><br>&#125;<br>&#125;);<br><br><span class="hljs-comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span><br>router.<span class="hljs-title function_">afterEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;afterEach&#x27;</span>, to, <span class="hljs-keyword">from</span>);<br><span class="hljs-keyword">if</span> (to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>) &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>; <span class="hljs-comment">//修改网页的title</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;vue_test&#x27;</span>;<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>独享守卫:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">beforeEnter</span>(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeEnter&#x27;</span>,to,<span class="hljs-keyword">from</span>)<br>   <span class="hljs-keyword">if</span>(to.<span class="hljs-property">meta</span>.<span class="hljs-property">isAuth</span>)&#123; <span class="hljs-comment">//判断当前路由是否需要进行权限控制</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;school&#x27;</span>) === <span class="hljs-string">&#x27;atguigu&#x27;</span>)&#123;<br>         <span class="hljs-title function_">next</span>()<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>         <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;暂无权限查看&#x27;</span>)<br>         <span class="hljs-comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span><br>      &#125;<br>   &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-title function_">next</span>()<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>组件内守卫：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//进入守卫：通过路由规则，进入该组件时被调用</span><br>beforeRouteEnter (to, <span class="hljs-keyword">from</span>, next) &#123;<br>&#125;,<br><span class="hljs-comment">//离开守卫：通过路由规则，离开该组件时被调用</span><br>beforeRouteLeave (to, <span class="hljs-keyword">from</span>, next) &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol><li>对于一个 url 来说，什么是 hash 值？—— #及其后面的内容就是 hash 值。</li><li>hash 值不会包含在 HTTP 请求中，即：hash 值不会带给服务器。</li><li>hash 模式：<ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机 app 分享，若 app 校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li>history 模式：<ol><li>地址干净，美观 。</li><li>兼容性和 hash 模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端 404 的问题。</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>自定义指令</title>
    <link href="/2024/05/22/content/vue/directive/"/>
    <url>/2024/05/22/content/vue/directive/</url>
    
    <content type="html"><![CDATA[<p><img src="https://pic.imgdb.cn/item/64199d8da682492fcca09396.jpg"></p><h1 id="自定指令"><a href="#自定指令" class="headerlink" title="自定指令"></a>自定指令</h1><h2 id="打包及指令注册使用的两种方式"><a href="#打包及指令注册使用的两种方式" class="headerlink" title="打包及指令注册使用的两种方式"></a>打包及指令注册使用的两种方式</h2><p>以 trim 指令为例</p><h4 id="一-使用遍历"><a href="#一-使用遍历" class="headerlink" title="一.使用遍历"></a>一.使用遍历</h4><p>1.trim.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取input</span><br><span class="hljs-keyword">const</span> getInput = <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;<br><span class="hljs-keyword">const</span> inputEle = el.<span class="hljs-property">tagName</span> !== <span class="hljs-string">&#x27;INPUT&#x27;</span> ? el.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>) : el;<br><span class="hljs-keyword">return</span> inputEle;<br>&#125;;<br><br><span class="hljs-keyword">const</span> trim = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;trim&#x27;</span>,<br><span class="hljs-attr">handle</span>: &#123;<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params">el, arg</span>) &#123;<br><span class="hljs-keyword">const</span> inputEle = <span class="hljs-title function_">getInput</span>(el);<br><span class="hljs-keyword">const</span> handler = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><span class="hljs-keyword">if</span> (!arg.<span class="hljs-property">value</span>) &#123;<br><span class="hljs-keyword">const</span> newVal = event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br><span class="hljs-keyword">if</span> (event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> !== newVal) &#123;<br>event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> = newVal;<br>&#125;<br><br><span class="hljs-keyword">if</span> (arg.<span class="hljs-property">value</span> === <span class="hljs-string">&#x27;all&#x27;</span>) &#123;<br>event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> = event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br>&#125;<br>&#125;;<br>inputEle.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;blur&#x27;</span>, handler);<br>&#125;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> trim;<br></code></pre></td></tr></table></figure><p>2.入口文件 directive&#x2F;index.js</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">import</span> <span class="hljs-built_in">trim</span> from <span class="hljs-string">&#x27;./modules/trim&#x27;</span>;<br><br><span class="hljs-keyword">const</span> directives = &#123;<br>    <span class="hljs-built_in">trim</span><br>&#125;<br></code></pre></td></tr></table></figure><p>3.main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> directiveList <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./directive&#x27;</span>;<br><span class="hljs-comment">// 注册指令</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> directive <span class="hljs-keyword">of</span> directiveList) &#123;<br>app.<span class="hljs-title function_">directive</span>(directive.<span class="hljs-property">name</span>, directive.<span class="hljs-property">handle</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="二-app-use"><a href="#二-app-use" class="headerlink" title="二.app.use"></a>二.app.use</h4><p>1.trim.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span> 自定义指令v-trim</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">const</span> trim = &#123;<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params">el, arg</span>) &#123;<br><span class="hljs-keyword">const</span> inputEle = el.<span class="hljs-property">tagName</span> !== <span class="hljs-string">&#x27;INPUT&#x27;</span> ? el.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>) : el;<br><span class="hljs-keyword">const</span> handler = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><span class="hljs-keyword">if</span> (!arg.<span class="hljs-property">value</span>) &#123;<br><span class="hljs-keyword">const</span> newVal = event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();<br><span class="hljs-keyword">if</span> (event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> !== newVal) &#123;<br>event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> = newVal;<br>&#125;<br><br><span class="hljs-keyword">if</span> (arg.<span class="hljs-property">value</span> === <span class="hljs-string">&#x27;all&#x27;</span>) &#123;<br>event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> = event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br>&#125;<br>&#125;;<br>inputEle.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;blur&#x27;</span>, handler);<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> trim;<br></code></pre></td></tr></table></figure><p>2.入口文件 directive&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> trim <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/trim&#x27;</span>;<br><br><span class="hljs-keyword">const</span> directives = &#123;<br>trim<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-title function_">install</span>(<span class="hljs-params">app</span>) &#123;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(directives).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>app.<span class="hljs-title function_">directive</span>(key, directives[key]);<br>&#125;);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>3.main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> directiveList <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./directive&#x27;</span>;<br><span class="hljs-comment">// 注册指令</span><br>app.<span class="hljs-title function_">use</span>(directiveList);<br></code></pre></td></tr></table></figure><h2 id="1-vue3-实现文本超出悬浮提示-title-自定义指令"><a href="#1-vue3-实现文本超出悬浮提示-title-自定义指令" class="headerlink" title="1.vue3 实现文本超出悬浮提示 title 自定义指令"></a>1.vue3 实现文本超出悬浮提示 title 自定义指令</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-comment">// 指令所在组件的 VNode 及其子 VNode 全部更新后调用</span><br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tooltip&#x27;</span>,<br><span class="hljs-attr">handle</span>: &#123;<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params">el</span>) &#123;<br><span class="hljs-comment">/* 第1步：先要创建一个容器`span`去获取文本的宽度 */</span><br><span class="hljs-comment">// 获取当前元素的style</span><br><span class="hljs-keyword">const</span> curStyle = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">getComputedStyle</span>(el, <span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-comment">// 创建一个容器来记录文字的width</span><br><span class="hljs-keyword">const</span> textSpan = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;span&#x27;</span>);<br><span class="hljs-comment">// 设置新容器的字体样式，确保与当前需要隐藏的样式相同</span><br>textSpan.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = curStyle.<span class="hljs-property">fontSize</span>;<br>textSpan.<span class="hljs-property">style</span>.<span class="hljs-property">fontWeight</span> = curStyle.<span class="hljs-property">fontWeight</span>;<br>textSpan.<span class="hljs-property">style</span>.<span class="hljs-property">fontFamily</span> = curStyle.<span class="hljs-property">fontFamily</span>;<br><span class="hljs-comment">// 将容器插入body，如果不插入，offsetWidth为0</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(textSpan);<br><span class="hljs-comment">// 设置新容器的文字</span><br>textSpan.<span class="hljs-property">innerHTML</span> = el.<span class="hljs-property">innerText</span>;<br><span class="hljs-comment">// 如果字体元素大于当前元素，则需要隐藏</span><br><span class="hljs-comment">/* 第2步：用获取到的宽跟`el`的宽进行对比，如果文本字体大于当前`el`元素的宽度，则需要title提示</span><br><span class="hljs-comment"> * 第3步：监听`el`的`onmouseenter`以及`onmouseleave`的鼠标移入移出事件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (textSpan.<span class="hljs-property">offsetWidth</span> &gt; el.<span class="hljs-property">offsetWidth</span>) &#123;<br><span class="hljs-comment">// 给当前元素设置超出隐藏</span><br>el.<span class="hljs-property">style</span>.<span class="hljs-property">overflow</span> = <span class="hljs-string">&#x27;hidden&#x27;</span>;<br>el.<span class="hljs-property">style</span>.<span class="hljs-property">textOverflow</span> = <span class="hljs-string">&#x27;ellipsis&#x27;</span>;<br>el.<span class="hljs-property">style</span>.<span class="hljs-property">whiteSpace</span> = <span class="hljs-string">&#x27;nowrap&#x27;</span>;<br><span class="hljs-comment">// 鼠标移入</span><br>el.<span class="hljs-property">onmouseenter</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br><span class="hljs-comment">/* 第4步：鼠标移入`onmouseenter`事件里需要处理title提示的显示 */</span><br><br><span class="hljs-comment">// 创建浮层元素并设置样式</span><br><span class="hljs-keyword">const</span> kxmTooltipDom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>kxmTooltipDom.<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span> = <span class="hljs-string">`</span><br><span class="hljs-string">          display: inline-block;</span><br><span class="hljs-string">          max-width: 400px;</span><br><span class="hljs-string">                max-height: 400px;</span><br><span class="hljs-string">          position: absolute;</span><br><span class="hljs-string">                top: <span class="hljs-subst">$&#123;e.clientY + <span class="hljs-number">5</span>&#125;</span>px;</span><br><span class="hljs-string">          left: <span class="hljs-subst">$&#123;e.clientX&#125;</span>px;</span><br><span class="hljs-string">          padding: 10px;</span><br><span class="hljs-string">          overflow: auto;</span><br><span class="hljs-string">          font-size: 14px;</span><br><span class="hljs-string">                color: #fff;</span><br><span class="hljs-string">                background: rgba(0, 0 , 0, .6);</span><br><span class="hljs-string">                border-radius: 5px;</span><br><span class="hljs-string">                z-index: 19999</span><br><span class="hljs-string">              `</span>;<br><span class="hljs-comment">// 设置id方便寻找</span><br>kxmTooltipDom.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;kxm-tooltip&#x27;</span>);<br><span class="hljs-comment">// 将浮层插入到body中</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(kxmTooltipDom);<br><span class="hljs-comment">// 浮层中的文字</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;kxm-tooltip&#x27;</span>).<span class="hljs-property">innerHTML</span> = el.<span class="hljs-property">innerText</span>;<br>&#125;;<br><span class="hljs-comment">// 鼠标移出</span><br>el.<span class="hljs-property">onmouseleave</span> = <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...<span class="hljs-variable language_">arguments</span>);<br><span class="hljs-comment">/* 第5步：鼠标移出`onmouseleave`需要移出title显示的元素 */</span><br><br><span class="hljs-comment">// 找到浮层元素并移出</span><br><span class="hljs-keyword">const</span> kxmTooltipDom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;kxm-tooltip&#x27;</span>);<br>kxmTooltipDom &amp;&amp; <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(kxmTooltipDom);<br>&#125;;<br>&#125;<br><span class="hljs-comment">// 需要注意：更新完之后需要移除容器，不然body里会多一个span元素内容</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(textSpan);<br>&#125;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="Button-按钮"><a href="#Button-按钮" class="headerlink" title="Button 按钮"></a>Button 按钮</h1><div>常用的操作按钮</div><p>:::demo 使用<code>type</code>，<code>plain</code>，<code>round</code>来定义 Button 的样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;el-button&gt;Small&lt;/el-button&gt;<br>&lt;el-button size=&quot;small&quot;&gt;Middle&lt;/el-button&gt;<br>&lt;el-button&gt;Large&lt;/el-button&gt;<br>&lt;el-button disabled&gt;Disabled&lt;/el-button&gt;<br>&lt;/template&gt;<br><br>&lt;style&gt;<br>button &#123;<br>margin: 0 20px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>:::</p><p>:::demo 使用<code>type</code>，<code>plain</code>，<code>round</code>来定义 Button 的样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;chbtn /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mongodb</title>
    <link href="/2024/05/22/content/nodejs/mongodb/"/>
    <url>/2024/05/22/content/nodejs/mongodb/</url>
    
    <content type="html"><![CDATA[<h1 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h1><h2 id="一-下载与启动"><a href="#一-下载与启动" class="headerlink" title="一.下载与启动"></a>一.下载与启动</h2><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在 MongoDB6 之前，我们配置完环境变量后，可以直接通过终端输入”mongo”进入 Mongoshell， 但 MongoDB6 没有 mong.exe 和 mongdb.exe，终端输入”mongo”会报错：’mongo’ 不是内部或外部命令， 也不是可运行的程序或批处理文件。要想通过命令行启动 mongoDB 需要自己下载一个 Mongoshell，将 ongoshell 解压的 zip 文件放到 mongodb 下面的 bin 目录</p><p>mogodb 下载地址：<a href="https://www.mongodb.com/try/download/community"><strong>https://www.mongodb.com/try/download/community</strong></a></p><p>mongoshll 下载地址：<a href="https://www.mongodb.com/try/download/shell">MongoDB Shell Download | MongoDB</a></p><p>配置环境变量</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 启动mongodb服务器</span><br>mongod;<br><br><span class="hljs-comment">// 启动mogondb客户端</span><br>mongosh;<br></code></pre></td></tr></table></figure><h2 id="二-数据库命令"><a href="#二-数据库命令" class="headerlink" title="二.数据库命令"></a>二.数据库命令</h2><h4 id="数据库命令"><a href="#数据库命令" class="headerlink" title="数据库命令"></a>数据库命令</h4><p>显示所有数据库</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">show</span> dbs<br></code></pre></td></tr></table></figure><p>切换到指定的数据库，如果数据库不存在会自动创建数据库</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">use</span> 数据库名<br></code></pre></td></tr></table></figure><p>显示当前所在的数据库目录</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">db</span><br></code></pre></td></tr></table></figure><p>删除当前数据库</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">use</span> 库名<br><span class="hljs-keyword">db</span>.dropDatabase()<br></code></pre></td></tr></table></figure><h4 id="集合命令"><a href="#集合命令" class="headerlink" title="集合命令"></a>集合命令</h4><p>创建集合</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">db.createCollectio<span class="hljs-meta">n</span>(<span class="hljs-string">&#x27;集合名称&#x27;</span>)<br></code></pre></td></tr></table></figure><p>显示数据库中的所有集合</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">show</span>.collections<br></code></pre></td></tr></table></figure><p>删除某个集合</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">db</span>.集合名.<span class="hljs-keyword">drop</span>()<br></code></pre></td></tr></table></figure><p>重命名集合</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">db.集合名.renameCollectio<span class="hljs-meta">n</span>(<span class="hljs-string">&#x27;newName&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="文档命令"><a href="#文档命令" class="headerlink" title="文档命令"></a>文档命令</h4><p>插入文档</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">db.集合名.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&#x27;文档对象&#x27;</span>)<br></code></pre></td></tr></table></figure><p>查询文档</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">db.集合名.<span class="hljs-built_in">find</span>(查询条件)<br></code></pre></td></tr></table></figure><p>更新文档</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">db.集合名.<span class="hljs-keyword">update</span>(查询条件, 新的文档)<br>db.集合名.<span class="hljs-keyword">update</span>(&#123;<span class="hljs-type">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>&#125;, &#123;$<span class="hljs-keyword">set</span>: &#123;age: <span class="hljs-number">19</span>&#125;&#125;)<br></code></pre></td></tr></table></figure><p>删除文档</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">db.集合名.<span class="hljs-built_in">remove</span>(查询条件)<br></code></pre></td></tr></table></figure><h2 id="三-mongoose"><a href="#三-mongoose" class="headerlink" title="三.mongoose"></a>三.mongoose</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="https://mongoose.nodejs.cn/docs/index.html">入门 - Mongoose 中文网 (nodejs.cn)</a></p><h3 id="什么是-mongoose"><a href="#什么是-mongoose" class="headerlink" title="什么是 mongoose"></a>什么是 mongoose</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Mongoose 是一个让我们可以通过 Node 来操作 MongoDB 数据库的一个模块<br><br>Mongoose 是一个对象文档模型（ODM）库，它是对 Node 原生的 MongoDB 模块进行了进一步的优化封装<br><br>大多数情况下，他被用来把结构化的模式应用到一个 MongoDB 集合，并提供了验证和类型装换等好处<br><br>基于 MongoDB 驱动，通过关系型数据库的思想来实现非关系型数据库<br></code></pre></td></tr></table></figure><h3 id="一个简单的示例"><a href="#一个简单的示例" class="headerlink" title="一个简单的示例"></a>一个简单的示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 安装 mongoose</span><br><span class="hljs-comment">//2. 导入 mongoose</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<br><br><span class="hljs-comment">//3. 连接数据库</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://127.0.0.1:27017/bili&#x27;</span>);<br><br><span class="hljs-comment">//4. 设置连接回调</span><br><span class="hljs-comment">//连接成功</span><br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;连接成功&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">//5. 创建文档结构对象</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">BookSchema</span> = <span class="hljs-keyword">new</span> mongoose.<span class="hljs-title class_">Schema</span>(&#123;<br><span class="hljs-attr">title</span>: <span class="hljs-title class_">String</span>,<br><span class="hljs-attr">author</span>: <span class="hljs-title class_">String</span>,<br><span class="hljs-attr">price</span>: <span class="hljs-title class_">Number</span><br>&#125;);<br><br><span class="hljs-comment">//6. 创建文档模型对象</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">BookModel</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;nnik&#x27;</span>, <span class="hljs-title class_">BookSchema</span>);<br><br><span class="hljs-comment">//7. 插入文档</span><br><span class="hljs-title class_">BookModel</span>.<span class="hljs-title function_">create</span>(&#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;西游记&#x27;</span>,<br><span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;吴承恩&#x27;</span>,<br><span class="hljs-attr">price</span>: <span class="hljs-number">19.9</span><br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br><span class="hljs-comment">//8. 断开连接</span><br>mongoose.<span class="hljs-title function_">disconnect</span>();<br>&#125;);<br><br><span class="hljs-comment">//连接出错</span><br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;连接出错~~&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">//连接关闭</span><br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;连接关闭&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>requestAnimationFrame</title>
    <link href="/2024/05/22/content/js/requestAnimationFrame/"/>
    <url>/2024/05/22/content/js/requestAnimationFrame/</url>
    
    <content type="html"><![CDATA[<p><img src="https://pic.imgdb.cn/item/64199ef0a682492fcca301fe.jpg"></p><h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h2><h3 id="关于-requestAnimationFrame"><a href="#关于-requestAnimationFrame" class="headerlink" title="关于 requestAnimationFrame"></a>关于 requestAnimationFrame</h3><p>​ （1）用法其实跟 setTimeout 完全一致，只不过当前的时间间隔是跟着系统的绘制频率走，是固定的。</p><p>​ （2）使得动画更加流畅，防止动画失帧</p><p>​ 该 API 能以浏览器的显示频率来作为其动画动作的频率，如果系统绘制率是 60Hz，那么回调函数就每 16.7ms 被执行一次，如果绘制频率是 75Hz，那么这个间隔时间就变成了 1000&#x2F;75&#x3D;13.3ms，也就是说它的时间间隔，是跟着系统的绘制频率走；</p><p>​ 这样就不会存在过度绘制的问题，动画不会掉帧，自然流畅，解决 js 动画过度失效的问题</p><p>​ （3）节省资源节能(Cpu、内存等)</p><p>​ 在隐藏或不可见的元素中，requestAnimationFrame 将不会进行重绘或回流，这当然就意味着更少的 CPU、GPU 和内存使用量<br>requestAnimationFrame 是由浏览器专门为动画提供的 API，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了 CPU 开销</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(callback);<br></code></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame#%E5%8F%82%E6%95%B0">参数</a></h4><ul><li><p><code>callback</code></p><p>下一次重绘之前更新动画帧所调用的函数 (即上面所说的回调函数)。该回调函数会被传入<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMHighResTimeStamp"><code>DOMHighResTimeStamp</code></a>参数，该参数与<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Performance/now"><code>performance.now()</code></a>的返回值相同，它表示<code>requestAnimationFrame()</code> 开始去执行回调函数的时刻。</p></li></ul><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame#%E8%BF%94%E5%9B%9E%E5%80%BC">返回值</a></h4><p>一个 <code>long</code> 整数，请求 ID，是回调列表中唯一的标识。是个非零值，没别的意义。你可以传这个值给 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/cancelAnimationFrame"><code>window.cancelAnimationFrame()</code></a> 以取消回调函数。</p><h2 id="参考用例"><a href="#参考用例" class="headerlink" title="参考用例"></a>参考用例</h2><h4 id="替代-setTimeout-实现定时器"><a href="#替代-setTimeout-实现定时器" class="headerlink" title="替代 setTimeout 实现定时器"></a>替代 setTimeout 实现定时器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 立即执行</span><br><span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>&#125;);<br><br><span class="hljs-comment">// 满足指定效果，循环执行；如5s后执行完成清除定时器</span><br><span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>num = <span class="hljs-number">10</span>;<br>&#125;, <span class="hljs-number">5000</span>);<br><span class="hljs-keyword">let</span> timer = <span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (num !== <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// 满足条件执行完毕</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加载完成...&#x27;</span>);<br><span class="hljs-title function_">cancelAnimationFrame</span>(timer);<br>timer = <span class="hljs-literal">null</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加载中...&#x27;</span>);<br>timer = <span class="hljs-title function_">requestAnimationFrame</span>(fn);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="大数据渲染"><a href="#大数据渲染" class="headerlink" title="大数据渲染"></a>大数据渲染</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 将10万条数据渲染到页面 */</span><br><br><span class="hljs-keyword">var</span> total = <span class="hljs-number">100000</span>;<br><span class="hljs-keyword">var</span> size = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">var</span> count = total / size;<br><span class="hljs-keyword">var</span> done = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;list&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addItems</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> li = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">var</span> fg = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createDocumentFragment</span>();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>li.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;item &#x27;</span> + (done * size + i);<br>fg.<span class="hljs-title function_">appendChild</span>(li);<br>&#125;<br><br>ul.<span class="hljs-title function_">appendChild</span>(fg);<br>done++;<br><br><span class="hljs-keyword">if</span> (done &lt; count) &#123;<br><span class="hljs-title function_">requestAnimationFrame</span>(addItems);<br>&#125;<br>&#125;<br><span class="hljs-title function_">requestAnimationFrame</span>(addItems);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>navigator</title>
    <link href="/2024/05/22/content/js/navigator/"/>
    <url>/2024/05/22/content/js/navigator/</url>
    
    <content type="html"><![CDATA[<p><img src="https://pic.imgdb.cn/item/64199f26a682492fcca369aa.jpg"></p><h2 id="getBattery"><a href="#getBattery" class="headerlink" title="getBattery"></a>getBattery</h2><p>浏览器给我们提供了获取电池电量的 API，我们可以用上去，先看看怎么用这个 API：</p><p>调用<code>navigator.getBattery</code>方法，该方法返回一个<code>promise</code>，在这个<code>promise</code>中返回了一个电池对象，我们可以监听电池剩余量、电池是否在充电；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">navigator.<span class="hljs-title function_">getBattery</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">battery</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateAllBatteryInfo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">updateChargeInfo</span>();<br><span class="hljs-title function_">updateLevelInfo</span>();<br><span class="hljs-title function_">updateChargingInfo</span>();<br><span class="hljs-title function_">updateDischargingInfo</span>();<br>&#125;<br><span class="hljs-title function_">updateAllBatteryInfo</span>();<br><br><span class="hljs-comment">// 充电变化</span><br>battery.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;chargingchange&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">updateChargeInfo</span>();<br>&#125;);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateChargeInfo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Battery charging? <span class="hljs-subst">$&#123;battery.charging ? <span class="hljs-string">&#x27;Yes&#x27;</span> : <span class="hljs-string">&#x27;No&#x27;</span>&#125;</span>`</span>);<br>&#125;<br><br><span class="hljs-comment">// 电量水平变化</span><br>battery.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;levelchange&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">updateLevelInfo</span>();<br>&#125;);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateLevelInfo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Battery level: <span class="hljs-subst">$&#123;battery.level * <span class="hljs-number">100</span>&#125;</span>%`</span>);<br>&#125;<br><br><span class="hljs-comment">// 电池充电时间变化</span><br>battery.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;chargingtimechange&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">updateChargingInfo</span>();<br>&#125;);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateChargingInfo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Battery charging time: <span class="hljs-subst">$&#123;battery.chargingTime&#125;</span> seconds`</span>);<br>&#125;<br><br><span class="hljs-comment">//电池使用时间变化</span><br>battery.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;dischargingtimechange&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">updateDischargingInfo</span>();<br>&#125;);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateDischargingInfo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Battery discharging time: <span class="hljs-subst">$&#123;battery.dischargingTime&#125;</span> seconds`</span>);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>js</title>
    <link href="/2024/05/22/content/js/j1/"/>
    <url>/2024/05/22/content/js/j1/</url>
    
    <content type="html"><![CDATA[<p><img src="https://pic.imgdb.cn/item/63fe1f21f144a0100784a2ca.jpg"></p><h2 id="一-Float32Array"><a href="#一-Float32Array" class="headerlink" title="一.Float32Array"></a>一.Float32Array</h2><h3 id="1-什么是-Float32Array？"><a href="#1-什么是-Float32Array？" class="headerlink" title="1.什么是 Float32Array？"></a>1.什么是 Float32Array？</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">在MDN中的描述是：一个固定长度，用来储存浮点类型数据的数组<br></code></pre></td></tr></table></figure><h3 id="1-1-固定长度"><a href="#1-1-固定长度" class="headerlink" title="1.1 固定长度"></a>1.1 固定长度</h3><p>为什么说是固定长度？请看下方示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(<span class="hljs-number">2</span>)<br>f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>f[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span><br>f1 <span class="hljs-comment">// [0, 1]</span><br></code></pre></td></tr></table></figure><p>从上面示例可以看出，创建了一个长度为 2 的类型数组，然后通过索引复制 3 个值，最后发现只有两个元素。也就是说类型数组 Float32Array 和普通数组 Array 不一样，不能像 Array 一样五线 2 添加元素。</p><h4 id="1-2-只能存储浮点类型数据"><a href="#1-2-只能存储浮点类型数据" class="headerlink" title="1.2 只能存储浮点类型数据"></a>1.2 只能存储浮点类型数据</h4><p>为什么只能存储浮点类型数据，我们通过下方示例来验证</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(<span class="hljs-number">3</span>)<br>f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>f[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;f&#x27;</span><br>f[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span><br>f <span class="hljs-comment">// [0, NaN, 2]</span><br></code></pre></td></tr></table></figure><p>通过上方的示例我们可以看到，我们只能添加 number 类型的数据，其他其它类型的数据会变成 NaN</p><h3 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2.基本用法"></a>2.基本用法</h3><h4 id="2-1-创建类型数组"><a href="#2-1-创建类型数组" class="headerlink" title="2.1 创建类型数组"></a>2.1 创建类型数组</h4><h4 id="（1）长度作为参数创建"><a href="#（1）长度作为参数创建" class="headerlink" title="（1）长度作为参数创建"></a>（1）长度作为参数创建</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(<span class="hljs-number">5</span>)<br>f <span class="hljs-comment">// [0, 0, 0 ,0, 0]</span><br></code></pre></td></tr></table></figure><h4 id="（2）-普通数组作为参数创建"><a href="#（2）-普通数组作为参数创建" class="headerlink" title="（2） 普通数组作为参数创建"></a>（2） 普通数组作为参数创建</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br>f <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h4 id="（3）-类型数组作为参数创建"><a href="#（3）-类型数组作为参数创建" class="headerlink" title="（3） 类型数组作为参数创建"></a>（3） 类型数组作为参数创建</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> f1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FloatArray32</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]);<br><span class="hljs-keyword">let</span> f2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FloatArray32</span>(f1);<br>f2; <span class="hljs-comment">// [1, 2]</span><br></code></pre></td></tr></table></figure><h2 id="二-WeakMap-（弱映射）"><a href="#二-WeakMap-（弱映射）" class="headerlink" title="二.WeakMap （弱映射）"></a>二.WeakMap （弱映射）</h2><ul><li><p>资料参考：</p></li><li><p>Set 和 Map 相关的资料：</p></li><li><p><a href="https://gitee.com/cH3802/front_end_history/blob/master/js_2020/other/4.Set%E5%92%8CMap.md">https://gitee.com/cH3802/front_end_history/blob/master/js_2020/other/4.Set%E5%92%8CMap.md</a></p></li><li><p>WeakMap 相关资料：</p></li><li><p>Mdn: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap</a></p></li><li><p>51cto: <a href="https://blog.51cto.com/u_11239407/2930565">https://blog.51cto.com/u_11239407/2930565</a></p></li></ul><p>在 es6 中我们知道 Map 和 Set 是两种新的数据结构，</p><ul><li><p>在查阅翻译 WeakMap 英文是弱映射，这里的弱指的是容易被清理；我们来看一下 WeakMap 的一些属性和方法</p></li><li><h4 id="1-WeakMap-的属性和方法"><a href="#1-WeakMap-的属性和方法" class="headerlink" title="1.WeakMap 的属性和方法"></a>1.WeakMap 的属性和方法</h4></li><li><pre><code class="hljs">const weakMap =  new WeakMap() // 创建一个weakmap实例weakMap.set(key, value) —— 根据键存储值。weakMap.get(key) —— 根据键来返回值，如果 map 中不存在对应的 key，则返回 undefined。weakMap.has(key) —— 如果 key 存在则返回 true，否则返回 false。weakMap.delete(key) —— 删除指定键的值。weakMap.clear() —— 清空 map。map.size —— 返回当前元素个数。<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>-   注意：和 Map 不同 WeakMap 的 key 值必须是一个对象<br><br>-   ### <span class="hljs-number">2.</span>WeakMap 的特性<br><br>-   从上面我们可以看出 WeakMap 和 Map 的大部分属性和方法是相似的，那么它们是否有不同点，接下来我们看一下需要注意的几个地方<br><br>-   #### <span class="hljs-number">2.1</span> WeakMap 的 key 必须是对象<br><br>-   #### <span class="hljs-number">2.2</span> WeakMap 是弱引用<br><br>-   为什么说 WeakMap 是弱引用，在了解这个之前，我们需要先了解一下垃圾回收机制，在垃圾回收机制当中，对不再使用的对象，我们可以赋值 null，进行标记清除；但是我们声明的这个对象，在其他对象里面引用的话，这个时候，标记清除就不生效了。<br><br>-   ```JavaScript<br>    <span class="hljs-comment">/* WeakMap的弱引用性 */</span><br><br>        <span class="hljs-comment">// 我们用三个对象来验证</span><br><br>        <span class="hljs-comment">// 普通对象</span><br>        <span class="hljs-keyword">let</span> m = &#123; name: <span class="hljs-string">&#x27;可乐&#x27;</span>&#125;<br>        <span class="hljs-keyword">let</span> array = [m]<br>        m = null<br>        <span class="hljs-comment">// console.log(array[0]) // 我们通过访问 array[0],结果发现依然能够成功打印</span><br><br>        <span class="hljs-comment">// map对象</span><br>        <span class="hljs-keyword">let</span> m2 = &#123;name: <span class="hljs-string">&#x27;汽水&#x27;</span>&#125;<br>        <span class="hljs-keyword">let</span> map = new Map()<br>        map.set(<span class="hljs-string">&#x27;name&#x27;</span>, m2)<br>        m2 = null<br>        <span class="hljs-comment">// console.log(map.get(&#x27;name&#x27;)) // 通过访问 map设置的属性name的值依然存在</span><br><br>        <span class="hljs-comment">// weakMap</span><br>        <span class="hljs-keyword">let</span> m3 = &#123;name: <span class="hljs-string">&#x27;美联达&#x27;</span>&#125;<br>        <span class="hljs-keyword">let</span> weakMap = new WeakMap()<br>        weakMap.set(m3, m3)<br>        m3 = null<br>        <span class="hljs-comment">// console.log(weakMap.get(m3)) // 打印为undefined</span><br></code></pre></td></tr></table></figure></code></pre></li><li><h4 id="2-3-WeakMap-可以保留私有数据"><a href="#2-3-WeakMap-可以保留私有数据" class="headerlink" title="2.3 WeakMap 可以保留私有数据"></a>2.3 WeakMap 可以保留私有数据</h4></li><li><p>看下面一个例子</p></li><li><pre><code class="JavaScript">// WeakMap可以保留私有数据   const STACK = (function()&#123;     const wm = new WeakMap()     return class &#123;       constructor() &#123;         wm.set(this, [])       &#125;       push(elem) &#123;         wm.get(this).push(elem)       &#125;       toString(elem) &#123;         console.log(wm.get(this))       &#125;     &#125;   &#125;)()   const stack = new STACK()   stack.push(1)   stack.push(2)   console.log(stack)   console.log(stack.toString())<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br>-   ### <span class="hljs-number">3</span>.WeakMap 的一些应用<br><br>\<span class="hljs-number">1</span>. 保留私有数据 （见上面的 <span class="hljs-number">2.3</span>）<br><br>\<span class="hljs-number">2</span>. 弱应用的一些应用 （深拷贝）<br><br>## 三. WeakSet<br><br>### <span class="hljs-number">1</span>.weakset 的属性和方法<br><br>![](https://pic.imgdb.<span class="hljs-keyword">cn</span>/item/<span class="hljs-number">63</span>feb9e5f144a010073c9c7b.png)<br><br>```JavaScript<br>// 创建一个weakset<br>const <span class="hljs-keyword">ws</span> = <span class="hljs-keyword">new</span> WeakSet()<br><br> // 通过上面的截图我们可以发现 weakset有 <span class="hljs-built_in">add</span>,<span class="hljs-keyword">delete</span>, <span class="hljs-built_in">has</span>这三个方法<br><br><br><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-keyword">a</span>: <span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">let</span> key = &#123;<span class="hljs-keyword">a</span>: <span class="hljs-number">2</span>&#125;<br><span class="hljs-keyword">ws</span>.<span class="hljs-built_in">add</span>(obj)<br><span class="hljs-keyword">ws</span>.<span class="hljs-built_in">add</span>(key)<br><br><span class="hljs-keyword">ws</span>.<span class="hljs-keyword">delete</span>(key)<br><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">ws</span>.<span class="hljs-built_in">has</span>(key))<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">ws</span>.<span class="hljs-built_in">has</span>(obj))<br></code></pre></td></tr></table></figure></code></pre></li></ul><p>weakset 的其他特性：</p><p>1.weakset 是不能被遍历的，它没有 forEach 这些方法</p><p>2.weakset 在添加值得时候，只能是对象，添加其他类型会报错</p><p>3.weakset 是弱引用</p><h3 id="2-Weak-的弱引用"><a href="#2-Weak-的弱引用" class="headerlink" title="2.Weak 的弱引用"></a>2.Weak 的弱引用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 和set结构不同，没有size这个属性，是因为ws同WeakMap 一样也是弱引用，在没被引用时，</span><br><span class="hljs-comment">// 数据会被清空</span><br><br>   <span class="hljs-keyword">const</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakSet</span>()<br><br>   <span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;<br>   <span class="hljs-keyword">let</span> key = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">2</span>&#125;<br><br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">       由于ws是不能被迭代的，所以用【..ws】[0] 检验值是否存在是会报错的，</span><br><span class="hljs-comment">       我们可以通过has来判断值是否存在</span><br><span class="hljs-comment">   */</span><br><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ws.<span class="hljs-title function_">has</span>(obj)) <span class="hljs-comment">// true</span><br>   obj = <span class="hljs-literal">null</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ws.<span class="hljs-title function_">has</span>(obj)) <span class="hljs-comment">// false,弱引用被回收了</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>实用工具</title>
    <link href="/2024/05/22/content/function/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <url>/2024/05/22/content/function/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<p><img src="https://pic.imgdb.cn/item/64199f8ba682492fcca40bae.jpg"></p><p><a href="https://www.67tool.com/?from=itab.link">即时工具</a></p><p><a href="https://www.yeyulingfeng.com/tool/">夜雨聆风工具箱</a></p><p><a href="https://www.aliyundrive.com/drive">阿里云盘</a></p><p><a href="https://www.wotianna.com/tag/gxlrj/">高效率软件</a></p><p><a href="https://www.bookmarkearth.com/">书签地球</a></p><p><a href="http://www.eryi.org/searchsites/cili-search.html">磁力搜索引擎神器大全</a></p><p><a href="https://chrome.zzzmh.cn/#/index">极简插件_Chrome 扩展插件</a></p><p><a href="https://www.superbed.cn/help#item=10">聚合图床 - 免费无限图片上传 </a></p><p><a href="https://www.speedtest.cn/?from=itab">测速网 - 专业测网速</a></p><p><a href="https://docs.qq.com/">腾讯文档-支持多人在线编辑</a></p>]]></content>
    
    
    <categories>
      
      <category>实用工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前端网站</title>
    <link href="/2024/05/22/content/function/test/"/>
    <url>/2024/05/22/content/function/test/</url>
    
    <content type="html"><![CDATA[<p><img src="https://pic.imgdb.cn/item/6419aca7a682492fccbe88ec.jpg"></p><h2 id="vue-生态"><a href="#vue-生态" class="headerlink" title="vue 生态"></a>vue 生态</h2><p><a href="https://cn.vuejs.org/">Vue3</a></p><p><a href="https://router.vuejs.org/zh/">Vue Router</a></p><p><a href="https://pinia.vuejs.org/zh/">Pinia</a></p><p><a href="https://vuex.vuejs.org/zh/">Vuex </a></p><p><a href="https://cn.vitejs.dev/">Vite | 下一代的前端工具链</a></p><p><a href="https://webpack.docschina.org/concepts/"> webpack5 </a></p><p><a href="https://vitepress.vuejs.org/">VitePress</a></p><p><a href="https://vuepress.vuejs.org/zh/">VuePress </a></p><p><a href="https://vitejs.cn/vitepress/">VitePress 中文网 (vitejs.cn)</a></p><h2 id="开源工具"><a href="#开源工具" class="headerlink" title="开源工具"></a>开源工具</h2><p><a href="https://element-plus.gitee.io/zh-CN/">Element Plus</a></p><p><a href="https://echarts.apache.org/zh/index.html">ECharts</a></p><p><a href="https://tdesign.tencent.com/">TDesign - 开源的企业级设计体系</a></p><p><a href="https://www.bootcdn.cn/">BootCDN - CDN 加速服务</a></p><p><a href="https://gitee.com/">码云 - gitee</a></p><p><a href="https://github.com/">GitHub</a></p><h2 id="技术社区和分享文档"><a href="#技术社区和分享文档" class="headerlink" title="技术社区和分享文档"></a>技术社区和分享文档</h2><p><a href="https://juejin.cn/">稀土掘金</a></p><p><a href="https://e4ebh5yc27.feishu.cn/drive/home/">飞书云文档 </a></p><p><a href="https://www.makeapie.cn/echarts">echarts 图表可视化案例</a></p><p><a href="https://www.isqqw.com/">ECharts 图表集</a></p><p><a href="https://lhammer.cn/You-need-to-know-css/#/zh-cn/">CSS Tricks - css 动画案例</a></p><p><a href="http://chartsdev.com/">数据可视化技术分享</a></p><p><a href="http://www.jimmyxuexue.top:999/">前端加油站-个人博客</a></p><p><a href="http://vue.tuokecat.com/blog/">Home | aehyok- 个人博客</a></p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p><a href="https://es6.ruanyifeng.com/">ES6 入门教程 </a></p><p><a href="http://www.webgl3d.cn/Three.js/">Three.js 教程 </a></p><p><a href="http://www.wjceo.com/blog/threejs/">threejs | 中文案例网</a></p><p><a href="https://interview2.poetries.top/">前端进阶之旅 </a></p><p><a href="https://typescript.bootcss.com/">TypeScript 中文手册 </a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>实用工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>css选择器</title>
    <link href="/2024/05/22/content/css/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <url>/2024/05/22/content/css/%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h1 id="placeholder-shown"><a href="#placeholder-shown" class="headerlink" title=":placeholder-shown"></a>:placeholder-shown</h1><p>设置当前显示占位符文本的输入的样式；用户未在文本框中键入任何内容</p><p>根据您的输入是否为空，应用一些动态样式非常好</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* :placeholder-shown */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid silver;</span><br><span class="language-css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">3px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.wrapper</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.clear</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">top</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">right</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f00</span>;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">8px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">8px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:placeholder-shown</span> + <span class="hljs-selector-class">.clear</span>&#123;</span><br><span class="language-css">      <span class="hljs-attribute">border-color</span>: teal;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#f00</span>;</span><br><span class="language-css">      <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- :placeholder-shown --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 设置当前显示占位符文本的输入的样式</span><br><span class="hljs-comment">  用户未在文本框中键入任何内容</span><br><span class="hljs-comment">根据您的输入是否为空，应用一些动态样式非常好--&gt;</span><br><br><span class="hljs-comment">&lt;!-- 例如可用作input的清除小按钮 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Type something here!&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>示例</title>
    <link href="/2024/05/22/%E7%A4%BA%E4%BE%8B/"/>
    <url>/2024/05/22/%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://theme-next.iissnan.com/getting-started.html">https://theme-next.iissnan.com/getting-started.html</a><br>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nodejs</title>
    <link href="/2024/05/22/content/nodejs/nodejs/"/>
    <url>/2024/05/22/content/nodejs/nodejs/</url>
    
    <content type="html"><![CDATA[<h2 id="nodejs-注意事项"><a href="#nodejs-注意事项" class="headerlink" title="nodejs 注意事项"></a>nodejs 注意事项</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">Node.js中不能使用DOM和BOM的API，可以使用console和定时器API<br>Node.js的顶级对象为global,也可以使用globalThis访问顶级对象<br>在js和nodejs中的事件循环机制，微任务优于宏任务先执行；常见的微任务Promise、process.nextTick,常见的微任务有setTimeout<br></code></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>nodejs 中自带很多模块，我们可分为内置模块和外置模块</p><ol><li>内置模块：<ol><li><code>fs</code>（File System）模块：提供对文件系统的操作，如读取、写入、删除文件和目录等。</li><li><code>http</code> 模块：支持 HTTP 协议，可用于创建 HTTP 服务器和客户端，处理请求和响应。</li><li><code>url</code> 模块：用于解析和操作 URL。</li><li><code>path</code> 模块：处理文件和目录路径。</li><li><code>events</code> 模块：实现事件驱动编程。</li><li><code>net</code> 模块：进行网络通信，如创建 TCP 和 UDP 套接字。</li><li><code>crypto</code> 模块：加密和解密操作。</li><li><code>os</code> 模块：与操作系统交互，获取系统信息。</li></ol></li><li>第三方模块：<ol><li><code>Express</code>：一个流行的 Web 应用框架。</li><li><code>Mongoose</code>：用于连接 MongoDB 数据库并进行数据建模。</li><li><code>Socket.io</code>：实现实时通信。</li><li><code>Passport</code>：处理认证和授权。</li><li><code>lodash</code>：提供实用的工具函数。</li><li><code>Moment</code>：日期和时间操作。</li></ol></li></ol><p>下面我们将着重介绍 fs 模块、path 模块、http 模块以及 express 框架的使用</p><h3 id="fs-模块"><a href="#fs-模块" class="headerlink" title="fs 模块"></a>fs 模块</h3><h3 id="path-模块"><a href="#path-模块" class="headerlink" title="path 模块"></a>path 模块</h3><h3 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h3><h3 id="express-框架"><a href="#express-框架" class="headerlink" title="express 框架"></a>express 框架</h3><h4 id="express-路由"><a href="#express-路由" class="headerlink" title="express 路由"></a>express 路由</h4><h4 id="响应设置"><a href="#响应设置" class="headerlink" title="响应设置"></a>响应设置</h4><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><h4 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h4><h4 id="EJS"><a href="#EJS" class="headerlink" title="EJS"></a>EJS</h4><h4 id="express-脚手架"><a href="#express-脚手架" class="headerlink" title="express 脚手架"></a>express 脚手架</h4><h2 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h2><h3 id="下载注意事项"><a href="#下载注意事项" class="headerlink" title="下载注意事项"></a>下载注意事项</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">在MongoDB6之前，我们配置完环境变量后，可以直接通过终端输入&quot;mongo&quot;进入Mongoshell，<br>但MongoDB6没有mong.exe和mongdb.exe，终端输入&quot;mongo&quot;会报错：&#x27;mongo&#x27; 不是内部或外部命令，<br>也不是可运行的程序或批处理文件。要想通过命令行启动mongoDB需要自己下载一个Mongoshell，<br>下载及使用相当简单。<br><br>mongosh<br><br>相当于使用命令：mongosh &quot;mongodb://localhost:27017&quot;<br></code></pre></td></tr></table></figure><h3 id="命令行操作资料参考："><a href="#命令行操作资料参考：" class="headerlink" title="命令行操作资料参考："></a>命令行操作资料参考：</h3><p><a href="https://blog.csdn.net/PILIpilipala/article/details/113818320">https://blog.csdn.net/PILIpilipala/article/details/113818320</a></p><p>&#x2F;&#x2F; …</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h2 id="mongoose"><a href="#mongoose" class="headerlink" title="mongoose"></a>mongoose</h2><h3 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h3><p>文档可参考：<a href="https://ch380.github.io/content/nodejs/mongodb.html">https://ch380.github.io/content/nodejs/mongodb.html</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-comment">// 启动mongodb服务器</span><br>mongod<br><br><span class="hljs-comment">// 启动mogondb客户端</span><br>mongosh<br></code></pre></td></tr></table></figure><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//1. 安装 mongoose</span><br><span class="hljs-comment">//2. 导入 mongoose</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<br><br><span class="hljs-comment">//3. 连接数据库</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://127.0.0.1:27017/bili&#x27;</span>);<br><br><span class="hljs-comment">//4. 设置连接回调</span><br><span class="hljs-comment">//连接成功</span><br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;连接成功&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">//5. 创建文档结构对象</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">BookSchema</span> = <span class="hljs-keyword">new</span> mongoose.<span class="hljs-title class_">Schema</span>(&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-title class_">String</span>,<br>  <span class="hljs-attr">author</span>: <span class="hljs-title class_">String</span>,<br>  <span class="hljs-attr">price</span>: <span class="hljs-title class_">Number</span><br>&#125;);<br><br><span class="hljs-comment">//6. 创建文档模型对象</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">BookModel</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;book&#x27;</span>, <span class="hljs-title class_">BookSchema</span>);<br><br><span class="hljs-comment">//7. 插入文档</span><br><span class="hljs-title class_">BookModel</span>.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;西游记&#x27;</span>,<br>  <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;吴承恩&#x27;</span>,<br>  <span class="hljs-attr">price</span>: <span class="hljs-number">19.9</span><br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//8. 断开连接</span><br>    mongoose.<span class="hljs-title function_">disconnect</span>();<br>  &#125;);<br><br><span class="hljs-comment">//连接出错</span><br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;连接出错~~&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">//连接关闭</span><br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;连接关闭&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
